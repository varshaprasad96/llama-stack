/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenAITokenLogProb type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenAITokenLogProb{}

// OpenAITokenLogProb The log probability for a token from an OpenAI-compatible chat completion response.
type OpenAITokenLogProb struct {
	Token string `json:"token"`
	Bytes []int32 `json:"bytes,omitempty"`
	Logprob float32 `json:"logprob"`
	TopLogprobs []OpenAITopLogProb `json:"top_logprobs"`
}

type _OpenAITokenLogProb OpenAITokenLogProb

// NewOpenAITokenLogProb instantiates a new OpenAITokenLogProb object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAITokenLogProb(token string, logprob float32, topLogprobs []OpenAITopLogProb) *OpenAITokenLogProb {
	this := OpenAITokenLogProb{}
	this.Token = token
	this.Logprob = logprob
	this.TopLogprobs = topLogprobs
	return &this
}

// NewOpenAITokenLogProbWithDefaults instantiates a new OpenAITokenLogProb object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAITokenLogProbWithDefaults() *OpenAITokenLogProb {
	this := OpenAITokenLogProb{}
	return &this
}

// GetToken returns the Token field value
func (o *OpenAITokenLogProb) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *OpenAITokenLogProb) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *OpenAITokenLogProb) SetToken(v string) {
	o.Token = v
}

// GetBytes returns the Bytes field value if set, zero value otherwise.
func (o *OpenAITokenLogProb) GetBytes() []int32 {
	if o == nil || IsNil(o.Bytes) {
		var ret []int32
		return ret
	}
	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAITokenLogProb) GetBytesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Bytes) {
		return nil, false
	}
	return o.Bytes, true
}

// HasBytes returns a boolean if a field has been set.
func (o *OpenAITokenLogProb) HasBytes() bool {
	if o != nil && !IsNil(o.Bytes) {
		return true
	}

	return false
}

// SetBytes gets a reference to the given []int32 and assigns it to the Bytes field.
func (o *OpenAITokenLogProb) SetBytes(v []int32) {
	o.Bytes = v
}

// GetLogprob returns the Logprob field value
func (o *OpenAITokenLogProb) GetLogprob() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Logprob
}

// GetLogprobOk returns a tuple with the Logprob field value
// and a boolean to check if the value has been set.
func (o *OpenAITokenLogProb) GetLogprobOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logprob, true
}

// SetLogprob sets field value
func (o *OpenAITokenLogProb) SetLogprob(v float32) {
	o.Logprob = v
}

// GetTopLogprobs returns the TopLogprobs field value
func (o *OpenAITokenLogProb) GetTopLogprobs() []OpenAITopLogProb {
	if o == nil {
		var ret []OpenAITopLogProb
		return ret
	}

	return o.TopLogprobs
}

// GetTopLogprobsOk returns a tuple with the TopLogprobs field value
// and a boolean to check if the value has been set.
func (o *OpenAITokenLogProb) GetTopLogprobsOk() ([]OpenAITopLogProb, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopLogprobs, true
}

// SetTopLogprobs sets field value
func (o *OpenAITokenLogProb) SetTopLogprobs(v []OpenAITopLogProb) {
	o.TopLogprobs = v
}

func (o OpenAITokenLogProb) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenAITokenLogProb) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["token"] = o.Token
	if !IsNil(o.Bytes) {
		toSerialize["bytes"] = o.Bytes
	}
	toSerialize["logprob"] = o.Logprob
	toSerialize["top_logprobs"] = o.TopLogprobs
	return toSerialize, nil
}

func (o *OpenAITokenLogProb) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"token",
		"logprob",
		"top_logprobs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenAITokenLogProb := _OpenAITokenLogProb{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenAITokenLogProb)

	if err != nil {
		return err
	}

	*o = OpenAITokenLogProb(varOpenAITokenLogProb)

	return err
}

type NullableOpenAITokenLogProb struct {
	value *OpenAITokenLogProb
	isSet bool
}

func (v NullableOpenAITokenLogProb) Get() *OpenAITokenLogProb {
	return v.value
}

func (v *NullableOpenAITokenLogProb) Set(val *OpenAITokenLogProb) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAITokenLogProb) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAITokenLogProb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAITokenLogProb(val *OpenAITokenLogProb) *NullableOpenAITokenLogProb {
	return &NullableOpenAITokenLogProb{value: val, isSet: true}
}

func (v NullableOpenAITokenLogProb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAITokenLogProb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


