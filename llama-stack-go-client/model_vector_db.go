/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VectorDB type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VectorDB{}

// VectorDB struct for VectorDB
type VectorDB struct {
	Identifier string `json:"identifier"`
	ProviderResourceId string `json:"provider_resource_id"`
	ProviderId string `json:"provider_id"`
	Type string `json:"type"`
	EmbeddingModel string `json:"embedding_model"`
	EmbeddingDimension int32 `json:"embedding_dimension"`
}

type _VectorDB VectorDB

// NewVectorDB instantiates a new VectorDB object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVectorDB(identifier string, providerResourceId string, providerId string, type_ string, embeddingModel string, embeddingDimension int32) *VectorDB {
	this := VectorDB{}
	this.Identifier = identifier
	this.ProviderResourceId = providerResourceId
	this.ProviderId = providerId
	this.Type = type_
	this.EmbeddingModel = embeddingModel
	this.EmbeddingDimension = embeddingDimension
	return &this
}

// NewVectorDBWithDefaults instantiates a new VectorDB object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVectorDBWithDefaults() *VectorDB {
	this := VectorDB{}
	var type_ string = "vector_db"
	this.Type = type_
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *VectorDB) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *VectorDB) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *VectorDB) SetIdentifier(v string) {
	o.Identifier = v
}

// GetProviderResourceId returns the ProviderResourceId field value
func (o *VectorDB) GetProviderResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderResourceId
}

// GetProviderResourceIdOk returns a tuple with the ProviderResourceId field value
// and a boolean to check if the value has been set.
func (o *VectorDB) GetProviderResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderResourceId, true
}

// SetProviderResourceId sets field value
func (o *VectorDB) SetProviderResourceId(v string) {
	o.ProviderResourceId = v
}

// GetProviderId returns the ProviderId field value
func (o *VectorDB) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *VectorDB) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *VectorDB) SetProviderId(v string) {
	o.ProviderId = v
}

// GetType returns the Type field value
func (o *VectorDB) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VectorDB) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VectorDB) SetType(v string) {
	o.Type = v
}

// GetEmbeddingModel returns the EmbeddingModel field value
func (o *VectorDB) GetEmbeddingModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmbeddingModel
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value
// and a boolean to check if the value has been set.
func (o *VectorDB) GetEmbeddingModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmbeddingModel, true
}

// SetEmbeddingModel sets field value
func (o *VectorDB) SetEmbeddingModel(v string) {
	o.EmbeddingModel = v
}

// GetEmbeddingDimension returns the EmbeddingDimension field value
func (o *VectorDB) GetEmbeddingDimension() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EmbeddingDimension
}

// GetEmbeddingDimensionOk returns a tuple with the EmbeddingDimension field value
// and a boolean to check if the value has been set.
func (o *VectorDB) GetEmbeddingDimensionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmbeddingDimension, true
}

// SetEmbeddingDimension sets field value
func (o *VectorDB) SetEmbeddingDimension(v int32) {
	o.EmbeddingDimension = v
}

func (o VectorDB) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VectorDB) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["provider_resource_id"] = o.ProviderResourceId
	toSerialize["provider_id"] = o.ProviderId
	toSerialize["type"] = o.Type
	toSerialize["embedding_model"] = o.EmbeddingModel
	toSerialize["embedding_dimension"] = o.EmbeddingDimension
	return toSerialize, nil
}

func (o *VectorDB) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"provider_resource_id",
		"provider_id",
		"type",
		"embedding_model",
		"embedding_dimension",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVectorDB := _VectorDB{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVectorDB)

	if err != nil {
		return err
	}

	*o = VectorDB(varVectorDB)

	return err
}

type NullableVectorDB struct {
	value *VectorDB
	isSet bool
}

func (v NullableVectorDB) Get() *VectorDB {
	return v.value
}

func (v *NullableVectorDB) Set(val *VectorDB) {
	v.value = val
	v.isSet = true
}

func (v NullableVectorDB) IsSet() bool {
	return v.isSet
}

func (v *NullableVectorDB) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVectorDB(val *VectorDB) *NullableVectorDB {
	return &NullableVectorDB{value: val, isSet: true}
}

func (v NullableVectorDB) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVectorDB) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


