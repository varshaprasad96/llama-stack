/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ShieldCallStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShieldCallStep{}

// ShieldCallStep A shield call step in an agent turn.
type ShieldCallStep struct {
	// The ID of the turn.
	TurnId string `json:"turn_id"`
	// The ID of the step.
	StepId string `json:"step_id"`
	// The time the step started.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// The time the step completed.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	StepType string `json:"step_type"`
	// The violation from the shield call.
	Violation *SafetyViolation `json:"violation,omitempty"`
}

type _ShieldCallStep ShieldCallStep

// NewShieldCallStep instantiates a new ShieldCallStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShieldCallStep(turnId string, stepId string, stepType string) *ShieldCallStep {
	this := ShieldCallStep{}
	this.TurnId = turnId
	this.StepId = stepId
	this.StepType = stepType
	return &this
}

// NewShieldCallStepWithDefaults instantiates a new ShieldCallStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShieldCallStepWithDefaults() *ShieldCallStep {
	this := ShieldCallStep{}
	var stepType string = "shield_call"
	this.StepType = stepType
	return &this
}

// GetTurnId returns the TurnId field value
func (o *ShieldCallStep) GetTurnId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TurnId
}

// GetTurnIdOk returns a tuple with the TurnId field value
// and a boolean to check if the value has been set.
func (o *ShieldCallStep) GetTurnIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TurnId, true
}

// SetTurnId sets field value
func (o *ShieldCallStep) SetTurnId(v string) {
	o.TurnId = v
}

// GetStepId returns the StepId field value
func (o *ShieldCallStep) GetStepId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StepId
}

// GetStepIdOk returns a tuple with the StepId field value
// and a boolean to check if the value has been set.
func (o *ShieldCallStep) GetStepIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepId, true
}

// SetStepId sets field value
func (o *ShieldCallStep) SetStepId(v string) {
	o.StepId = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *ShieldCallStep) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShieldCallStep) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *ShieldCallStep) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *ShieldCallStep) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *ShieldCallStep) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShieldCallStep) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *ShieldCallStep) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *ShieldCallStep) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetStepType returns the StepType field value
func (o *ShieldCallStep) GetStepType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StepType
}

// GetStepTypeOk returns a tuple with the StepType field value
// and a boolean to check if the value has been set.
func (o *ShieldCallStep) GetStepTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepType, true
}

// SetStepType sets field value
func (o *ShieldCallStep) SetStepType(v string) {
	o.StepType = v
}

// GetViolation returns the Violation field value if set, zero value otherwise.
func (o *ShieldCallStep) GetViolation() SafetyViolation {
	if o == nil || IsNil(o.Violation) {
		var ret SafetyViolation
		return ret
	}
	return *o.Violation
}

// GetViolationOk returns a tuple with the Violation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShieldCallStep) GetViolationOk() (*SafetyViolation, bool) {
	if o == nil || IsNil(o.Violation) {
		return nil, false
	}
	return o.Violation, true
}

// HasViolation returns a boolean if a field has been set.
func (o *ShieldCallStep) HasViolation() bool {
	if o != nil && !IsNil(o.Violation) {
		return true
	}

	return false
}

// SetViolation gets a reference to the given SafetyViolation and assigns it to the Violation field.
func (o *ShieldCallStep) SetViolation(v SafetyViolation) {
	o.Violation = &v
}

func (o ShieldCallStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShieldCallStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["turn_id"] = o.TurnId
	toSerialize["step_id"] = o.StepId
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completed_at"] = o.CompletedAt
	}
	toSerialize["step_type"] = o.StepType
	if !IsNil(o.Violation) {
		toSerialize["violation"] = o.Violation
	}
	return toSerialize, nil
}

func (o *ShieldCallStep) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"turn_id",
		"step_id",
		"step_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShieldCallStep := _ShieldCallStep{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShieldCallStep)

	if err != nil {
		return err
	}

	*o = ShieldCallStep(varShieldCallStep)

	return err
}

type NullableShieldCallStep struct {
	value *ShieldCallStep
	isSet bool
}

func (v NullableShieldCallStep) Get() *ShieldCallStep {
	return v.value
}

func (v *NullableShieldCallStep) Set(val *ShieldCallStep) {
	v.value = val
	v.isSet = true
}

func (v NullableShieldCallStep) IsSet() bool {
	return v.isSet
}

func (v *NullableShieldCallStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShieldCallStep(val *ShieldCallStep) *NullableShieldCallStep {
	return &NullableShieldCallStep{value: val, isSet: true}
}

func (v NullableShieldCallStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShieldCallStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


