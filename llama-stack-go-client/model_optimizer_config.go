/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OptimizerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptimizerConfig{}

// OptimizerConfig struct for OptimizerConfig
type OptimizerConfig struct {
	OptimizerType OptimizerType `json:"optimizer_type"`
	Lr float32 `json:"lr"`
	WeightDecay float32 `json:"weight_decay"`
	NumWarmupSteps int32 `json:"num_warmup_steps"`
}

type _OptimizerConfig OptimizerConfig

// NewOptimizerConfig instantiates a new OptimizerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptimizerConfig(optimizerType OptimizerType, lr float32, weightDecay float32, numWarmupSteps int32) *OptimizerConfig {
	this := OptimizerConfig{}
	this.OptimizerType = optimizerType
	this.Lr = lr
	this.WeightDecay = weightDecay
	this.NumWarmupSteps = numWarmupSteps
	return &this
}

// NewOptimizerConfigWithDefaults instantiates a new OptimizerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptimizerConfigWithDefaults() *OptimizerConfig {
	this := OptimizerConfig{}
	return &this
}

// GetOptimizerType returns the OptimizerType field value
func (o *OptimizerConfig) GetOptimizerType() OptimizerType {
	if o == nil {
		var ret OptimizerType
		return ret
	}

	return o.OptimizerType
}

// GetOptimizerTypeOk returns a tuple with the OptimizerType field value
// and a boolean to check if the value has been set.
func (o *OptimizerConfig) GetOptimizerTypeOk() (*OptimizerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OptimizerType, true
}

// SetOptimizerType sets field value
func (o *OptimizerConfig) SetOptimizerType(v OptimizerType) {
	o.OptimizerType = v
}

// GetLr returns the Lr field value
func (o *OptimizerConfig) GetLr() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Lr
}

// GetLrOk returns a tuple with the Lr field value
// and a boolean to check if the value has been set.
func (o *OptimizerConfig) GetLrOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lr, true
}

// SetLr sets field value
func (o *OptimizerConfig) SetLr(v float32) {
	o.Lr = v
}

// GetWeightDecay returns the WeightDecay field value
func (o *OptimizerConfig) GetWeightDecay() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WeightDecay
}

// GetWeightDecayOk returns a tuple with the WeightDecay field value
// and a boolean to check if the value has been set.
func (o *OptimizerConfig) GetWeightDecayOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeightDecay, true
}

// SetWeightDecay sets field value
func (o *OptimizerConfig) SetWeightDecay(v float32) {
	o.WeightDecay = v
}

// GetNumWarmupSteps returns the NumWarmupSteps field value
func (o *OptimizerConfig) GetNumWarmupSteps() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumWarmupSteps
}

// GetNumWarmupStepsOk returns a tuple with the NumWarmupSteps field value
// and a boolean to check if the value has been set.
func (o *OptimizerConfig) GetNumWarmupStepsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumWarmupSteps, true
}

// SetNumWarmupSteps sets field value
func (o *OptimizerConfig) SetNumWarmupSteps(v int32) {
	o.NumWarmupSteps = v
}

func (o OptimizerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptimizerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["optimizer_type"] = o.OptimizerType
	toSerialize["lr"] = o.Lr
	toSerialize["weight_decay"] = o.WeightDecay
	toSerialize["num_warmup_steps"] = o.NumWarmupSteps
	return toSerialize, nil
}

func (o *OptimizerConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"optimizer_type",
		"lr",
		"weight_decay",
		"num_warmup_steps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOptimizerConfig := _OptimizerConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOptimizerConfig)

	if err != nil {
		return err
	}

	*o = OptimizerConfig(varOptimizerConfig)

	return err
}

type NullableOptimizerConfig struct {
	value *OptimizerConfig
	isSet bool
}

func (v NullableOptimizerConfig) Get() *OptimizerConfig {
	return v.value
}

func (v *NullableOptimizerConfig) Set(val *OptimizerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimizerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimizerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimizerConfig(val *OptimizerConfig) *NullableOptimizerConfig {
	return &NullableOptimizerConfig{value: val, isSet: true}
}

func (v NullableOptimizerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimizerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


