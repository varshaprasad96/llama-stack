/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// OpenAIMessageParam - struct for OpenAIMessageParam
type OpenAIMessageParam struct {
	OpenAIAssistantMessageParam *OpenAIAssistantMessageParam
	OpenAIDeveloperMessageParam *OpenAIDeveloperMessageParam
	OpenAISystemMessageParam *OpenAISystemMessageParam
	OpenAIToolMessageParam *OpenAIToolMessageParam
	OpenAIUserMessageParam *OpenAIUserMessageParam
}

// OpenAIAssistantMessageParamAsOpenAIMessageParam is a convenience function that returns OpenAIAssistantMessageParam wrapped in OpenAIMessageParam
func OpenAIAssistantMessageParamAsOpenAIMessageParam(v *OpenAIAssistantMessageParam) OpenAIMessageParam {
	return OpenAIMessageParam{
		OpenAIAssistantMessageParam: v,
	}
}

// OpenAIDeveloperMessageParamAsOpenAIMessageParam is a convenience function that returns OpenAIDeveloperMessageParam wrapped in OpenAIMessageParam
func OpenAIDeveloperMessageParamAsOpenAIMessageParam(v *OpenAIDeveloperMessageParam) OpenAIMessageParam {
	return OpenAIMessageParam{
		OpenAIDeveloperMessageParam: v,
	}
}

// OpenAISystemMessageParamAsOpenAIMessageParam is a convenience function that returns OpenAISystemMessageParam wrapped in OpenAIMessageParam
func OpenAISystemMessageParamAsOpenAIMessageParam(v *OpenAISystemMessageParam) OpenAIMessageParam {
	return OpenAIMessageParam{
		OpenAISystemMessageParam: v,
	}
}

// OpenAIToolMessageParamAsOpenAIMessageParam is a convenience function that returns OpenAIToolMessageParam wrapped in OpenAIMessageParam
func OpenAIToolMessageParamAsOpenAIMessageParam(v *OpenAIToolMessageParam) OpenAIMessageParam {
	return OpenAIMessageParam{
		OpenAIToolMessageParam: v,
	}
}

// OpenAIUserMessageParamAsOpenAIMessageParam is a convenience function that returns OpenAIUserMessageParam wrapped in OpenAIMessageParam
func OpenAIUserMessageParamAsOpenAIMessageParam(v *OpenAIUserMessageParam) OpenAIMessageParam {
	return OpenAIMessageParam{
		OpenAIUserMessageParam: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OpenAIMessageParam) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OpenAIAssistantMessageParam
	err = newStrictDecoder(data).Decode(&dst.OpenAIAssistantMessageParam)
	if err == nil {
		jsonOpenAIAssistantMessageParam, _ := json.Marshal(dst.OpenAIAssistantMessageParam)
		if string(jsonOpenAIAssistantMessageParam) == "{}" { // empty struct
			dst.OpenAIAssistantMessageParam = nil
		} else {
			if err = validator.Validate(dst.OpenAIAssistantMessageParam); err != nil {
				dst.OpenAIAssistantMessageParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAIAssistantMessageParam = nil
	}

	// try to unmarshal data into OpenAIDeveloperMessageParam
	err = newStrictDecoder(data).Decode(&dst.OpenAIDeveloperMessageParam)
	if err == nil {
		jsonOpenAIDeveloperMessageParam, _ := json.Marshal(dst.OpenAIDeveloperMessageParam)
		if string(jsonOpenAIDeveloperMessageParam) == "{}" { // empty struct
			dst.OpenAIDeveloperMessageParam = nil
		} else {
			if err = validator.Validate(dst.OpenAIDeveloperMessageParam); err != nil {
				dst.OpenAIDeveloperMessageParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAIDeveloperMessageParam = nil
	}

	// try to unmarshal data into OpenAISystemMessageParam
	err = newStrictDecoder(data).Decode(&dst.OpenAISystemMessageParam)
	if err == nil {
		jsonOpenAISystemMessageParam, _ := json.Marshal(dst.OpenAISystemMessageParam)
		if string(jsonOpenAISystemMessageParam) == "{}" { // empty struct
			dst.OpenAISystemMessageParam = nil
		} else {
			if err = validator.Validate(dst.OpenAISystemMessageParam); err != nil {
				dst.OpenAISystemMessageParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAISystemMessageParam = nil
	}

	// try to unmarshal data into OpenAIToolMessageParam
	err = newStrictDecoder(data).Decode(&dst.OpenAIToolMessageParam)
	if err == nil {
		jsonOpenAIToolMessageParam, _ := json.Marshal(dst.OpenAIToolMessageParam)
		if string(jsonOpenAIToolMessageParam) == "{}" { // empty struct
			dst.OpenAIToolMessageParam = nil
		} else {
			if err = validator.Validate(dst.OpenAIToolMessageParam); err != nil {
				dst.OpenAIToolMessageParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAIToolMessageParam = nil
	}

	// try to unmarshal data into OpenAIUserMessageParam
	err = newStrictDecoder(data).Decode(&dst.OpenAIUserMessageParam)
	if err == nil {
		jsonOpenAIUserMessageParam, _ := json.Marshal(dst.OpenAIUserMessageParam)
		if string(jsonOpenAIUserMessageParam) == "{}" { // empty struct
			dst.OpenAIUserMessageParam = nil
		} else {
			if err = validator.Validate(dst.OpenAIUserMessageParam); err != nil {
				dst.OpenAIUserMessageParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAIUserMessageParam = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OpenAIAssistantMessageParam = nil
		dst.OpenAIDeveloperMessageParam = nil
		dst.OpenAISystemMessageParam = nil
		dst.OpenAIToolMessageParam = nil
		dst.OpenAIUserMessageParam = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OpenAIMessageParam)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OpenAIMessageParam)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OpenAIMessageParam) MarshalJSON() ([]byte, error) {
	if src.OpenAIAssistantMessageParam != nil {
		return json.Marshal(&src.OpenAIAssistantMessageParam)
	}

	if src.OpenAIDeveloperMessageParam != nil {
		return json.Marshal(&src.OpenAIDeveloperMessageParam)
	}

	if src.OpenAISystemMessageParam != nil {
		return json.Marshal(&src.OpenAISystemMessageParam)
	}

	if src.OpenAIToolMessageParam != nil {
		return json.Marshal(&src.OpenAIToolMessageParam)
	}

	if src.OpenAIUserMessageParam != nil {
		return json.Marshal(&src.OpenAIUserMessageParam)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OpenAIMessageParam) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OpenAIAssistantMessageParam != nil {
		return obj.OpenAIAssistantMessageParam
	}

	if obj.OpenAIDeveloperMessageParam != nil {
		return obj.OpenAIDeveloperMessageParam
	}

	if obj.OpenAISystemMessageParam != nil {
		return obj.OpenAISystemMessageParam
	}

	if obj.OpenAIToolMessageParam != nil {
		return obj.OpenAIToolMessageParam
	}

	if obj.OpenAIUserMessageParam != nil {
		return obj.OpenAIUserMessageParam
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj OpenAIMessageParam) GetActualInstanceValue() (interface{}) {
	if obj.OpenAIAssistantMessageParam != nil {
		return *obj.OpenAIAssistantMessageParam
	}

	if obj.OpenAIDeveloperMessageParam != nil {
		return *obj.OpenAIDeveloperMessageParam
	}

	if obj.OpenAISystemMessageParam != nil {
		return *obj.OpenAISystemMessageParam
	}

	if obj.OpenAIToolMessageParam != nil {
		return *obj.OpenAIToolMessageParam
	}

	if obj.OpenAIUserMessageParam != nil {
		return *obj.OpenAIUserMessageParam
	}

	// all schemas are nil
	return nil
}

type NullableOpenAIMessageParam struct {
	value *OpenAIMessageParam
	isSet bool
}

func (v NullableOpenAIMessageParam) Get() *OpenAIMessageParam {
	return v.value
}

func (v *NullableOpenAIMessageParam) Set(val *OpenAIMessageParam) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIMessageParam) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIMessageParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIMessageParam(val *OpenAIMessageParam) *NullableOpenAIMessageParam {
	return &NullableOpenAIMessageParam{value: val, isSet: true}
}

func (v NullableOpenAIMessageParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIMessageParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


