/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompletionMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletionMessage{}

// CompletionMessage A message containing the model's (assistant) response in a chat conversation.
type CompletionMessage struct {
	// Must be \"assistant\" to identify this as the model's response
	Role string `json:"role"`
	// The content of the model's response
	Content InterleavedContent `json:"content"`
	// Reason why the model stopped generating. Options are: - `StopReason.end_of_turn`: The model finished generating the entire response. - `StopReason.end_of_message`: The model finished generating but generated a partial response -- usually, a tool call. The user may call the tool and continue the conversation with the tool's response. - `StopReason.out_of_tokens`: The model ran out of token budget.
	StopReason string `json:"stop_reason"`
	// List of tool calls. Each tool call is a ToolCall object.
	ToolCalls []ToolCall `json:"tool_calls,omitempty"`
}

type _CompletionMessage CompletionMessage

// NewCompletionMessage instantiates a new CompletionMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletionMessage(role string, content InterleavedContent, stopReason string) *CompletionMessage {
	this := CompletionMessage{}
	this.Role = role
	this.Content = content
	this.StopReason = stopReason
	return &this
}

// NewCompletionMessageWithDefaults instantiates a new CompletionMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletionMessageWithDefaults() *CompletionMessage {
	this := CompletionMessage{}
	var role string = "assistant"
	this.Role = role
	return &this
}

// GetRole returns the Role field value
func (o *CompletionMessage) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *CompletionMessage) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *CompletionMessage) SetRole(v string) {
	o.Role = v
}

// GetContent returns the Content field value
func (o *CompletionMessage) GetContent() InterleavedContent {
	if o == nil {
		var ret InterleavedContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CompletionMessage) GetContentOk() (*InterleavedContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CompletionMessage) SetContent(v InterleavedContent) {
	o.Content = v
}

// GetStopReason returns the StopReason field value
func (o *CompletionMessage) GetStopReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StopReason
}

// GetStopReasonOk returns a tuple with the StopReason field value
// and a boolean to check if the value has been set.
func (o *CompletionMessage) GetStopReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StopReason, true
}

// SetStopReason sets field value
func (o *CompletionMessage) SetStopReason(v string) {
	o.StopReason = v
}

// GetToolCalls returns the ToolCalls field value if set, zero value otherwise.
func (o *CompletionMessage) GetToolCalls() []ToolCall {
	if o == nil || IsNil(o.ToolCalls) {
		var ret []ToolCall
		return ret
	}
	return o.ToolCalls
}

// GetToolCallsOk returns a tuple with the ToolCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletionMessage) GetToolCallsOk() ([]ToolCall, bool) {
	if o == nil || IsNil(o.ToolCalls) {
		return nil, false
	}
	return o.ToolCalls, true
}

// HasToolCalls returns a boolean if a field has been set.
func (o *CompletionMessage) HasToolCalls() bool {
	if o != nil && !IsNil(o.ToolCalls) {
		return true
	}

	return false
}

// SetToolCalls gets a reference to the given []ToolCall and assigns it to the ToolCalls field.
func (o *CompletionMessage) SetToolCalls(v []ToolCall) {
	o.ToolCalls = v
}

func (o CompletionMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletionMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["content"] = o.Content
	toSerialize["stop_reason"] = o.StopReason
	if !IsNil(o.ToolCalls) {
		toSerialize["tool_calls"] = o.ToolCalls
	}
	return toSerialize, nil
}

func (o *CompletionMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"content",
		"stop_reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompletionMessage := _CompletionMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompletionMessage)

	if err != nil {
		return err
	}

	*o = CompletionMessage(varCompletionMessage)

	return err
}

type NullableCompletionMessage struct {
	value *CompletionMessage
	isSet bool
}

func (v NullableCompletionMessage) Get() *CompletionMessage {
	return v.value
}

func (v *NullableCompletionMessage) Set(val *CompletionMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletionMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletionMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletionMessage(val *CompletionMessage) *NullableCompletionMessage {
	return &NullableCompletionMessage{value: val, isSet: true}
}

func (v NullableCompletionMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletionMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


