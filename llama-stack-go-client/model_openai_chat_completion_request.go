/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenaiChatCompletionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenaiChatCompletionRequest{}

// OpenaiChatCompletionRequest struct for OpenaiChatCompletionRequest
type OpenaiChatCompletionRequest struct {
	// The identifier of the model to use. The model must be registered with Llama Stack and available via the /models endpoint.
	Model string `json:"model"`
	// List of messages in the conversation
	Messages []OpenAIMessageParam `json:"messages"`
	// (Optional) The penalty for repeated tokens
	FrequencyPenalty *float32 `json:"frequency_penalty,omitempty"`
	FunctionCall *OpenaiChatCompletionRequestFunctionCall `json:"function_call,omitempty"`
	// (Optional) List of functions to use
	Functions []map[string]AppendRowsRequestRowsInnerValue `json:"functions,omitempty"`
	// (Optional) The logit bias to use
	LogitBias map[string]float32 `json:"logit_bias,omitempty"`
	// (Optional) The log probabilities to use
	Logprobs *bool `json:"logprobs,omitempty"`
	// (Optional) The maximum number of tokens to generate
	MaxCompletionTokens *int32 `json:"max_completion_tokens,omitempty"`
	// (Optional) The maximum number of tokens to generate
	MaxTokens *int32 `json:"max_tokens,omitempty"`
	// (Optional) The number of completions to generate
	N *int32 `json:"n,omitempty"`
	// (Optional) Whether to parallelize tool calls
	ParallelToolCalls *bool `json:"parallel_tool_calls,omitempty"`
	// (Optional) The penalty for repeated tokens
	PresencePenalty *float32 `json:"presence_penalty,omitempty"`
	// (Optional) The response format to use
	ResponseFormat *OpenAIResponseFormatParam `json:"response_format,omitempty"`
	// (Optional) The seed to use
	Seed *int32 `json:"seed,omitempty"`
	Stop *OpenaiChatCompletionRequestStop `json:"stop,omitempty"`
	// (Optional) Whether to stream the response
	Stream *bool `json:"stream,omitempty"`
	// (Optional) The stream options to use
	StreamOptions map[string]AppendRowsRequestRowsInnerValue `json:"stream_options,omitempty"`
	// (Optional) The temperature to use
	Temperature *float32 `json:"temperature,omitempty"`
	ToolChoice *OpenaiChatCompletionRequestToolChoice `json:"tool_choice,omitempty"`
	// (Optional) The tools to use
	Tools []map[string]AppendRowsRequestRowsInnerValue `json:"tools,omitempty"`
	// (Optional) The top log probabilities to use
	TopLogprobs *int32 `json:"top_logprobs,omitempty"`
	// (Optional) The top p to use
	TopP *float32 `json:"top_p,omitempty"`
	// (Optional) The user to use
	User *string `json:"user,omitempty"`
}

type _OpenaiChatCompletionRequest OpenaiChatCompletionRequest

// NewOpenaiChatCompletionRequest instantiates a new OpenaiChatCompletionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenaiChatCompletionRequest(model string, messages []OpenAIMessageParam) *OpenaiChatCompletionRequest {
	this := OpenaiChatCompletionRequest{}
	this.Model = model
	this.Messages = messages
	return &this
}

// NewOpenaiChatCompletionRequestWithDefaults instantiates a new OpenaiChatCompletionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenaiChatCompletionRequestWithDefaults() *OpenaiChatCompletionRequest {
	this := OpenaiChatCompletionRequest{}
	return &this
}

// GetModel returns the Model field value
func (o *OpenaiChatCompletionRequest) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *OpenaiChatCompletionRequest) SetModel(v string) {
	o.Model = v
}

// GetMessages returns the Messages field value
func (o *OpenaiChatCompletionRequest) GetMessages() []OpenAIMessageParam {
	if o == nil {
		var ret []OpenAIMessageParam
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetMessagesOk() ([]OpenAIMessageParam, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *OpenaiChatCompletionRequest) SetMessages(v []OpenAIMessageParam) {
	o.Messages = v
}

// GetFrequencyPenalty returns the FrequencyPenalty field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetFrequencyPenalty() float32 {
	if o == nil || IsNil(o.FrequencyPenalty) {
		var ret float32
		return ret
	}
	return *o.FrequencyPenalty
}

// GetFrequencyPenaltyOk returns a tuple with the FrequencyPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetFrequencyPenaltyOk() (*float32, bool) {
	if o == nil || IsNil(o.FrequencyPenalty) {
		return nil, false
	}
	return o.FrequencyPenalty, true
}

// HasFrequencyPenalty returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasFrequencyPenalty() bool {
	if o != nil && !IsNil(o.FrequencyPenalty) {
		return true
	}

	return false
}

// SetFrequencyPenalty gets a reference to the given float32 and assigns it to the FrequencyPenalty field.
func (o *OpenaiChatCompletionRequest) SetFrequencyPenalty(v float32) {
	o.FrequencyPenalty = &v
}

// GetFunctionCall returns the FunctionCall field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetFunctionCall() OpenaiChatCompletionRequestFunctionCall {
	if o == nil || IsNil(o.FunctionCall) {
		var ret OpenaiChatCompletionRequestFunctionCall
		return ret
	}
	return *o.FunctionCall
}

// GetFunctionCallOk returns a tuple with the FunctionCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetFunctionCallOk() (*OpenaiChatCompletionRequestFunctionCall, bool) {
	if o == nil || IsNil(o.FunctionCall) {
		return nil, false
	}
	return o.FunctionCall, true
}

// HasFunctionCall returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasFunctionCall() bool {
	if o != nil && !IsNil(o.FunctionCall) {
		return true
	}

	return false
}

// SetFunctionCall gets a reference to the given OpenaiChatCompletionRequestFunctionCall and assigns it to the FunctionCall field.
func (o *OpenaiChatCompletionRequest) SetFunctionCall(v OpenaiChatCompletionRequestFunctionCall) {
	o.FunctionCall = &v
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetFunctions() []map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Functions) {
		var ret []map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetFunctionsOk() ([]map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Functions) {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasFunctions() bool {
	if o != nil && !IsNil(o.Functions) {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given []map[string]AppendRowsRequestRowsInnerValue and assigns it to the Functions field.
func (o *OpenaiChatCompletionRequest) SetFunctions(v []map[string]AppendRowsRequestRowsInnerValue) {
	o.Functions = v
}

// GetLogitBias returns the LogitBias field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetLogitBias() map[string]float32 {
	if o == nil || IsNil(o.LogitBias) {
		var ret map[string]float32
		return ret
	}
	return o.LogitBias
}

// GetLogitBiasOk returns a tuple with the LogitBias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetLogitBiasOk() (map[string]float32, bool) {
	if o == nil || IsNil(o.LogitBias) {
		return map[string]float32{}, false
	}
	return o.LogitBias, true
}

// HasLogitBias returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasLogitBias() bool {
	if o != nil && !IsNil(o.LogitBias) {
		return true
	}

	return false
}

// SetLogitBias gets a reference to the given map[string]float32 and assigns it to the LogitBias field.
func (o *OpenaiChatCompletionRequest) SetLogitBias(v map[string]float32) {
	o.LogitBias = v
}

// GetLogprobs returns the Logprobs field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetLogprobs() bool {
	if o == nil || IsNil(o.Logprobs) {
		var ret bool
		return ret
	}
	return *o.Logprobs
}

// GetLogprobsOk returns a tuple with the Logprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetLogprobsOk() (*bool, bool) {
	if o == nil || IsNil(o.Logprobs) {
		return nil, false
	}
	return o.Logprobs, true
}

// HasLogprobs returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasLogprobs() bool {
	if o != nil && !IsNil(o.Logprobs) {
		return true
	}

	return false
}

// SetLogprobs gets a reference to the given bool and assigns it to the Logprobs field.
func (o *OpenaiChatCompletionRequest) SetLogprobs(v bool) {
	o.Logprobs = &v
}

// GetMaxCompletionTokens returns the MaxCompletionTokens field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetMaxCompletionTokens() int32 {
	if o == nil || IsNil(o.MaxCompletionTokens) {
		var ret int32
		return ret
	}
	return *o.MaxCompletionTokens
}

// GetMaxCompletionTokensOk returns a tuple with the MaxCompletionTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetMaxCompletionTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxCompletionTokens) {
		return nil, false
	}
	return o.MaxCompletionTokens, true
}

// HasMaxCompletionTokens returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasMaxCompletionTokens() bool {
	if o != nil && !IsNil(o.MaxCompletionTokens) {
		return true
	}

	return false
}

// SetMaxCompletionTokens gets a reference to the given int32 and assigns it to the MaxCompletionTokens field.
func (o *OpenaiChatCompletionRequest) SetMaxCompletionTokens(v int32) {
	o.MaxCompletionTokens = &v
}

// GetMaxTokens returns the MaxTokens field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetMaxTokens() int32 {
	if o == nil || IsNil(o.MaxTokens) {
		var ret int32
		return ret
	}
	return *o.MaxTokens
}

// GetMaxTokensOk returns a tuple with the MaxTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetMaxTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTokens) {
		return nil, false
	}
	return o.MaxTokens, true
}

// HasMaxTokens returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasMaxTokens() bool {
	if o != nil && !IsNil(o.MaxTokens) {
		return true
	}

	return false
}

// SetMaxTokens gets a reference to the given int32 and assigns it to the MaxTokens field.
func (o *OpenaiChatCompletionRequest) SetMaxTokens(v int32) {
	o.MaxTokens = &v
}

// GetN returns the N field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetN() int32 {
	if o == nil || IsNil(o.N) {
		var ret int32
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetNOk() (*int32, bool) {
	if o == nil || IsNil(o.N) {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasN() bool {
	if o != nil && !IsNil(o.N) {
		return true
	}

	return false
}

// SetN gets a reference to the given int32 and assigns it to the N field.
func (o *OpenaiChatCompletionRequest) SetN(v int32) {
	o.N = &v
}

// GetParallelToolCalls returns the ParallelToolCalls field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetParallelToolCalls() bool {
	if o == nil || IsNil(o.ParallelToolCalls) {
		var ret bool
		return ret
	}
	return *o.ParallelToolCalls
}

// GetParallelToolCallsOk returns a tuple with the ParallelToolCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetParallelToolCallsOk() (*bool, bool) {
	if o == nil || IsNil(o.ParallelToolCalls) {
		return nil, false
	}
	return o.ParallelToolCalls, true
}

// HasParallelToolCalls returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasParallelToolCalls() bool {
	if o != nil && !IsNil(o.ParallelToolCalls) {
		return true
	}

	return false
}

// SetParallelToolCalls gets a reference to the given bool and assigns it to the ParallelToolCalls field.
func (o *OpenaiChatCompletionRequest) SetParallelToolCalls(v bool) {
	o.ParallelToolCalls = &v
}

// GetPresencePenalty returns the PresencePenalty field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetPresencePenalty() float32 {
	if o == nil || IsNil(o.PresencePenalty) {
		var ret float32
		return ret
	}
	return *o.PresencePenalty
}

// GetPresencePenaltyOk returns a tuple with the PresencePenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetPresencePenaltyOk() (*float32, bool) {
	if o == nil || IsNil(o.PresencePenalty) {
		return nil, false
	}
	return o.PresencePenalty, true
}

// HasPresencePenalty returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasPresencePenalty() bool {
	if o != nil && !IsNil(o.PresencePenalty) {
		return true
	}

	return false
}

// SetPresencePenalty gets a reference to the given float32 and assigns it to the PresencePenalty field.
func (o *OpenaiChatCompletionRequest) SetPresencePenalty(v float32) {
	o.PresencePenalty = &v
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetResponseFormat() OpenAIResponseFormatParam {
	if o == nil || IsNil(o.ResponseFormat) {
		var ret OpenAIResponseFormatParam
		return ret
	}
	return *o.ResponseFormat
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetResponseFormatOk() (*OpenAIResponseFormatParam, bool) {
	if o == nil || IsNil(o.ResponseFormat) {
		return nil, false
	}
	return o.ResponseFormat, true
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasResponseFormat() bool {
	if o != nil && !IsNil(o.ResponseFormat) {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given OpenAIResponseFormatParam and assigns it to the ResponseFormat field.
func (o *OpenaiChatCompletionRequest) SetResponseFormat(v OpenAIResponseFormatParam) {
	o.ResponseFormat = &v
}

// GetSeed returns the Seed field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetSeed() int32 {
	if o == nil || IsNil(o.Seed) {
		var ret int32
		return ret
	}
	return *o.Seed
}

// GetSeedOk returns a tuple with the Seed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetSeedOk() (*int32, bool) {
	if o == nil || IsNil(o.Seed) {
		return nil, false
	}
	return o.Seed, true
}

// HasSeed returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasSeed() bool {
	if o != nil && !IsNil(o.Seed) {
		return true
	}

	return false
}

// SetSeed gets a reference to the given int32 and assigns it to the Seed field.
func (o *OpenaiChatCompletionRequest) SetSeed(v int32) {
	o.Seed = &v
}

// GetStop returns the Stop field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetStop() OpenaiChatCompletionRequestStop {
	if o == nil || IsNil(o.Stop) {
		var ret OpenaiChatCompletionRequestStop
		return ret
	}
	return *o.Stop
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetStopOk() (*OpenaiChatCompletionRequestStop, bool) {
	if o == nil || IsNil(o.Stop) {
		return nil, false
	}
	return o.Stop, true
}

// HasStop returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasStop() bool {
	if o != nil && !IsNil(o.Stop) {
		return true
	}

	return false
}

// SetStop gets a reference to the given OpenaiChatCompletionRequestStop and assigns it to the Stop field.
func (o *OpenaiChatCompletionRequest) SetStop(v OpenaiChatCompletionRequestStop) {
	o.Stop = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *OpenaiChatCompletionRequest) SetStream(v bool) {
	o.Stream = &v
}

// GetStreamOptions returns the StreamOptions field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetStreamOptions() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.StreamOptions) {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.StreamOptions
}

// GetStreamOptionsOk returns a tuple with the StreamOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetStreamOptionsOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.StreamOptions) {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.StreamOptions, true
}

// HasStreamOptions returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasStreamOptions() bool {
	if o != nil && !IsNil(o.StreamOptions) {
		return true
	}

	return false
}

// SetStreamOptions gets a reference to the given map[string]AppendRowsRequestRowsInnerValue and assigns it to the StreamOptions field.
func (o *OpenaiChatCompletionRequest) SetStreamOptions(v map[string]AppendRowsRequestRowsInnerValue) {
	o.StreamOptions = v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *OpenaiChatCompletionRequest) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetToolChoice returns the ToolChoice field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetToolChoice() OpenaiChatCompletionRequestToolChoice {
	if o == nil || IsNil(o.ToolChoice) {
		var ret OpenaiChatCompletionRequestToolChoice
		return ret
	}
	return *o.ToolChoice
}

// GetToolChoiceOk returns a tuple with the ToolChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetToolChoiceOk() (*OpenaiChatCompletionRequestToolChoice, bool) {
	if o == nil || IsNil(o.ToolChoice) {
		return nil, false
	}
	return o.ToolChoice, true
}

// HasToolChoice returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasToolChoice() bool {
	if o != nil && !IsNil(o.ToolChoice) {
		return true
	}

	return false
}

// SetToolChoice gets a reference to the given OpenaiChatCompletionRequestToolChoice and assigns it to the ToolChoice field.
func (o *OpenaiChatCompletionRequest) SetToolChoice(v OpenaiChatCompletionRequestToolChoice) {
	o.ToolChoice = &v
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetTools() []map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Tools) {
		var ret []map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetToolsOk() ([]map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []map[string]AppendRowsRequestRowsInnerValue and assigns it to the Tools field.
func (o *OpenaiChatCompletionRequest) SetTools(v []map[string]AppendRowsRequestRowsInnerValue) {
	o.Tools = v
}

// GetTopLogprobs returns the TopLogprobs field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetTopLogprobs() int32 {
	if o == nil || IsNil(o.TopLogprobs) {
		var ret int32
		return ret
	}
	return *o.TopLogprobs
}

// GetTopLogprobsOk returns a tuple with the TopLogprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetTopLogprobsOk() (*int32, bool) {
	if o == nil || IsNil(o.TopLogprobs) {
		return nil, false
	}
	return o.TopLogprobs, true
}

// HasTopLogprobs returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasTopLogprobs() bool {
	if o != nil && !IsNil(o.TopLogprobs) {
		return true
	}

	return false
}

// SetTopLogprobs gets a reference to the given int32 and assigns it to the TopLogprobs field.
func (o *OpenaiChatCompletionRequest) SetTopLogprobs(v int32) {
	o.TopLogprobs = &v
}

// GetTopP returns the TopP field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetTopP() float32 {
	if o == nil || IsNil(o.TopP) {
		var ret float32
		return ret
	}
	return *o.TopP
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetTopPOk() (*float32, bool) {
	if o == nil || IsNil(o.TopP) {
		return nil, false
	}
	return o.TopP, true
}

// HasTopP returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasTopP() bool {
	if o != nil && !IsNil(o.TopP) {
		return true
	}

	return false
}

// SetTopP gets a reference to the given float32 and assigns it to the TopP field.
func (o *OpenaiChatCompletionRequest) SetTopP(v float32) {
	o.TopP = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *OpenaiChatCompletionRequest) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenaiChatCompletionRequest) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *OpenaiChatCompletionRequest) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *OpenaiChatCompletionRequest) SetUser(v string) {
	o.User = &v
}

func (o OpenaiChatCompletionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenaiChatCompletionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model
	toSerialize["messages"] = o.Messages
	if !IsNil(o.FrequencyPenalty) {
		toSerialize["frequency_penalty"] = o.FrequencyPenalty
	}
	if !IsNil(o.FunctionCall) {
		toSerialize["function_call"] = o.FunctionCall
	}
	if !IsNil(o.Functions) {
		toSerialize["functions"] = o.Functions
	}
	if !IsNil(o.LogitBias) {
		toSerialize["logit_bias"] = o.LogitBias
	}
	if !IsNil(o.Logprobs) {
		toSerialize["logprobs"] = o.Logprobs
	}
	if !IsNil(o.MaxCompletionTokens) {
		toSerialize["max_completion_tokens"] = o.MaxCompletionTokens
	}
	if !IsNil(o.MaxTokens) {
		toSerialize["max_tokens"] = o.MaxTokens
	}
	if !IsNil(o.N) {
		toSerialize["n"] = o.N
	}
	if !IsNil(o.ParallelToolCalls) {
		toSerialize["parallel_tool_calls"] = o.ParallelToolCalls
	}
	if !IsNil(o.PresencePenalty) {
		toSerialize["presence_penalty"] = o.PresencePenalty
	}
	if !IsNil(o.ResponseFormat) {
		toSerialize["response_format"] = o.ResponseFormat
	}
	if !IsNil(o.Seed) {
		toSerialize["seed"] = o.Seed
	}
	if !IsNil(o.Stop) {
		toSerialize["stop"] = o.Stop
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.StreamOptions) {
		toSerialize["stream_options"] = o.StreamOptions
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.ToolChoice) {
		toSerialize["tool_choice"] = o.ToolChoice
	}
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	if !IsNil(o.TopLogprobs) {
		toSerialize["top_logprobs"] = o.TopLogprobs
	}
	if !IsNil(o.TopP) {
		toSerialize["top_p"] = o.TopP
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

func (o *OpenaiChatCompletionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenaiChatCompletionRequest := _OpenaiChatCompletionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenaiChatCompletionRequest)

	if err != nil {
		return err
	}

	*o = OpenaiChatCompletionRequest(varOpenaiChatCompletionRequest)

	return err
}

type NullableOpenaiChatCompletionRequest struct {
	value *OpenaiChatCompletionRequest
	isSet bool
}

func (v NullableOpenaiChatCompletionRequest) Get() *OpenaiChatCompletionRequest {
	return v.value
}

func (v *NullableOpenaiChatCompletionRequest) Set(val *OpenaiChatCompletionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenaiChatCompletionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenaiChatCompletionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenaiChatCompletionRequest(val *OpenaiChatCompletionRequest) *NullableOpenaiChatCompletionRequest {
	return &NullableOpenaiChatCompletionRequest{value: val, isSet: true}
}

func (v NullableOpenaiChatCompletionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenaiChatCompletionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


