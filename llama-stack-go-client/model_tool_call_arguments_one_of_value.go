/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ToolCallArgumentsOneOfValue - struct for ToolCallArgumentsOneOfValue
type ToolCallArgumentsOneOfValue struct {
	ArrayOfToolCallArgumentsOneOfValueOneOfInner *[]ToolCallArgumentsOneOfValueOneOfInner
	Bool *bool
	Float32 *float32
	Int32 *int32
	MapmapOfStringToolCallArgumentsOneOfValueOneOfInner *map[string]ToolCallArgumentsOneOfValueOneOfInner
	String *string
}

// []ToolCallArgumentsOneOfValueOneOfInnerAsToolCallArgumentsOneOfValue is a convenience function that returns []ToolCallArgumentsOneOfValueOneOfInner wrapped in ToolCallArgumentsOneOfValue
func ArrayOfToolCallArgumentsOneOfValueOneOfInnerAsToolCallArgumentsOneOfValue(v *[]ToolCallArgumentsOneOfValueOneOfInner) ToolCallArgumentsOneOfValue {
	return ToolCallArgumentsOneOfValue{
		ArrayOfToolCallArgumentsOneOfValueOneOfInner: v,
	}
}

// boolAsToolCallArgumentsOneOfValue is a convenience function that returns bool wrapped in ToolCallArgumentsOneOfValue
func BoolAsToolCallArgumentsOneOfValue(v *bool) ToolCallArgumentsOneOfValue {
	return ToolCallArgumentsOneOfValue{
		Bool: v,
	}
}

// float32AsToolCallArgumentsOneOfValue is a convenience function that returns float32 wrapped in ToolCallArgumentsOneOfValue
func Float32AsToolCallArgumentsOneOfValue(v *float32) ToolCallArgumentsOneOfValue {
	return ToolCallArgumentsOneOfValue{
		Float32: v,
	}
}

// int32AsToolCallArgumentsOneOfValue is a convenience function that returns int32 wrapped in ToolCallArgumentsOneOfValue
func Int32AsToolCallArgumentsOneOfValue(v *int32) ToolCallArgumentsOneOfValue {
	return ToolCallArgumentsOneOfValue{
		Int32: v,
	}
}

// map[string]ToolCallArgumentsOneOfValueOneOfInnerAsToolCallArgumentsOneOfValue is a convenience function that returns map[string]ToolCallArgumentsOneOfValueOneOfInner wrapped in ToolCallArgumentsOneOfValue
func MapmapOfStringToolCallArgumentsOneOfValueOneOfInnerAsToolCallArgumentsOneOfValue(v *map[string]ToolCallArgumentsOneOfValueOneOfInner) ToolCallArgumentsOneOfValue {
	return ToolCallArgumentsOneOfValue{
		MapmapOfStringToolCallArgumentsOneOfValueOneOfInner: v,
	}
}

// stringAsToolCallArgumentsOneOfValue is a convenience function that returns string wrapped in ToolCallArgumentsOneOfValue
func StringAsToolCallArgumentsOneOfValue(v *string) ToolCallArgumentsOneOfValue {
	return ToolCallArgumentsOneOfValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ToolCallArgumentsOneOfValue) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into ArrayOfToolCallArgumentsOneOfValueOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfToolCallArgumentsOneOfValueOneOfInner)
	if err == nil {
		jsonArrayOfToolCallArgumentsOneOfValueOneOfInner, _ := json.Marshal(dst.ArrayOfToolCallArgumentsOneOfValueOneOfInner)
		if string(jsonArrayOfToolCallArgumentsOneOfValueOneOfInner) == "{}" { // empty struct
			dst.ArrayOfToolCallArgumentsOneOfValueOneOfInner = nil
		} else {
			if err = validator.Validate(dst.ArrayOfToolCallArgumentsOneOfValueOneOfInner); err != nil {
				dst.ArrayOfToolCallArgumentsOneOfValueOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfToolCallArgumentsOneOfValueOneOfInner = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			if err = validator.Validate(dst.Bool); err != nil {
				dst.Bool = nil
			} else {
				match++
			}
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			if err = validator.Validate(dst.Float32); err != nil {
				dst.Float32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into Int32
	err = newStrictDecoder(data).Decode(&dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			if err = validator.Validate(dst.Int32); err != nil {
				dst.Int32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal data into MapmapOfStringToolCallArgumentsOneOfValueOneOfInner
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner)
	if err == nil {
		jsonMapmapOfStringToolCallArgumentsOneOfValueOneOfInner, _ := json.Marshal(dst.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner)
		if string(jsonMapmapOfStringToolCallArgumentsOneOfValueOneOfInner) == "{}" { // empty struct
			dst.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner); err != nil {
				dst.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfToolCallArgumentsOneOfValueOneOfInner = nil
		dst.Bool = nil
		dst.Float32 = nil
		dst.Int32 = nil
		dst.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ToolCallArgumentsOneOfValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ToolCallArgumentsOneOfValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ToolCallArgumentsOneOfValue) MarshalJSON() ([]byte, error) {
	if src.ArrayOfToolCallArgumentsOneOfValueOneOfInner != nil {
		return json.Marshal(&src.ArrayOfToolCallArgumentsOneOfValueOneOfInner)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner != nil {
		return json.Marshal(&src.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ToolCallArgumentsOneOfValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfToolCallArgumentsOneOfValueOneOfInner != nil {
		return obj.ArrayOfToolCallArgumentsOneOfValueOneOfInner
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.Int32 != nil {
		return obj.Int32
	}

	if obj.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner != nil {
		return obj.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ToolCallArgumentsOneOfValue) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfToolCallArgumentsOneOfValueOneOfInner != nil {
		return *obj.ArrayOfToolCallArgumentsOneOfValueOneOfInner
	}

	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Float32 != nil {
		return *obj.Float32
	}

	if obj.Int32 != nil {
		return *obj.Int32
	}

	if obj.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner != nil {
		return *obj.MapmapOfStringToolCallArgumentsOneOfValueOneOfInner
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableToolCallArgumentsOneOfValue struct {
	value *ToolCallArgumentsOneOfValue
	isSet bool
}

func (v NullableToolCallArgumentsOneOfValue) Get() *ToolCallArgumentsOneOfValue {
	return v.value
}

func (v *NullableToolCallArgumentsOneOfValue) Set(val *ToolCallArgumentsOneOfValue) {
	v.value = val
	v.isSet = true
}

func (v NullableToolCallArgumentsOneOfValue) IsSet() bool {
	return v.isSet
}

func (v *NullableToolCallArgumentsOneOfValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolCallArgumentsOneOfValue(val *ToolCallArgumentsOneOfValue) *NullableToolCallArgumentsOneOfValue {
	return &NullableToolCallArgumentsOneOfValue{value: val, isSet: true}
}

func (v NullableToolCallArgumentsOneOfValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolCallArgumentsOneOfValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


