/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ViolationLevel the model 'ViolationLevel'
type ViolationLevel string

// List of ViolationLevel
const (
	INFO ViolationLevel = "info"
	WARN ViolationLevel = "warn"
	ERROR ViolationLevel = "error"
)

// All allowed values of ViolationLevel enum
var AllowedViolationLevelEnumValues = []ViolationLevel{
	"info",
	"warn",
	"error",
}

func (v *ViolationLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ViolationLevel(value)
	for _, existing := range AllowedViolationLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ViolationLevel", value)
}

// NewViolationLevelFromValue returns a pointer to a valid ViolationLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewViolationLevelFromValue(v string) (*ViolationLevel, error) {
	ev := ViolationLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ViolationLevel: valid values are %v", v, AllowedViolationLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ViolationLevel) IsValid() bool {
	for _, existing := range AllowedViolationLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ViolationLevel value
func (v ViolationLevel) Ptr() *ViolationLevel {
	return &v
}

type NullableViolationLevel struct {
	value *ViolationLevel
	isSet bool
}

func (v NullableViolationLevel) Get() *ViolationLevel {
	return v.value
}

func (v *NullableViolationLevel) Set(val *ViolationLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableViolationLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableViolationLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViolationLevel(val *ViolationLevel) *NullableViolationLevel {
	return &NullableViolationLevel{value: val, isSet: true}
}

func (v NullableViolationLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViolationLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

