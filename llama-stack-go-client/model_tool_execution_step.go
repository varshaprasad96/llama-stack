/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ToolExecutionStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolExecutionStep{}

// ToolExecutionStep A tool execution step in an agent turn.
type ToolExecutionStep struct {
	// The ID of the turn.
	TurnId string `json:"turn_id"`
	// The ID of the step.
	StepId string `json:"step_id"`
	// The time the step started.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// The time the step completed.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	StepType string `json:"step_type"`
	// The tool calls to execute.
	ToolCalls []ToolCall `json:"tool_calls"`
	// The tool responses from the tool calls.
	ToolResponses []ToolResponse `json:"tool_responses"`
}

type _ToolExecutionStep ToolExecutionStep

// NewToolExecutionStep instantiates a new ToolExecutionStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolExecutionStep(turnId string, stepId string, stepType string, toolCalls []ToolCall, toolResponses []ToolResponse) *ToolExecutionStep {
	this := ToolExecutionStep{}
	this.TurnId = turnId
	this.StepId = stepId
	this.StepType = stepType
	this.ToolCalls = toolCalls
	this.ToolResponses = toolResponses
	return &this
}

// NewToolExecutionStepWithDefaults instantiates a new ToolExecutionStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolExecutionStepWithDefaults() *ToolExecutionStep {
	this := ToolExecutionStep{}
	var stepType string = "tool_execution"
	this.StepType = stepType
	return &this
}

// GetTurnId returns the TurnId field value
func (o *ToolExecutionStep) GetTurnId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TurnId
}

// GetTurnIdOk returns a tuple with the TurnId field value
// and a boolean to check if the value has been set.
func (o *ToolExecutionStep) GetTurnIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TurnId, true
}

// SetTurnId sets field value
func (o *ToolExecutionStep) SetTurnId(v string) {
	o.TurnId = v
}

// GetStepId returns the StepId field value
func (o *ToolExecutionStep) GetStepId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StepId
}

// GetStepIdOk returns a tuple with the StepId field value
// and a boolean to check if the value has been set.
func (o *ToolExecutionStep) GetStepIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepId, true
}

// SetStepId sets field value
func (o *ToolExecutionStep) SetStepId(v string) {
	o.StepId = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *ToolExecutionStep) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolExecutionStep) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedAt) {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *ToolExecutionStep) HasStartedAt() bool {
	if o != nil && !IsNil(o.StartedAt) {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *ToolExecutionStep) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *ToolExecutionStep) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolExecutionStep) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *ToolExecutionStep) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given time.Time and assigns it to the CompletedAt field.
func (o *ToolExecutionStep) SetCompletedAt(v time.Time) {
	o.CompletedAt = &v
}

// GetStepType returns the StepType field value
func (o *ToolExecutionStep) GetStepType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StepType
}

// GetStepTypeOk returns a tuple with the StepType field value
// and a boolean to check if the value has been set.
func (o *ToolExecutionStep) GetStepTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepType, true
}

// SetStepType sets field value
func (o *ToolExecutionStep) SetStepType(v string) {
	o.StepType = v
}

// GetToolCalls returns the ToolCalls field value
func (o *ToolExecutionStep) GetToolCalls() []ToolCall {
	if o == nil {
		var ret []ToolCall
		return ret
	}

	return o.ToolCalls
}

// GetToolCallsOk returns a tuple with the ToolCalls field value
// and a boolean to check if the value has been set.
func (o *ToolExecutionStep) GetToolCallsOk() ([]ToolCall, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToolCalls, true
}

// SetToolCalls sets field value
func (o *ToolExecutionStep) SetToolCalls(v []ToolCall) {
	o.ToolCalls = v
}

// GetToolResponses returns the ToolResponses field value
func (o *ToolExecutionStep) GetToolResponses() []ToolResponse {
	if o == nil {
		var ret []ToolResponse
		return ret
	}

	return o.ToolResponses
}

// GetToolResponsesOk returns a tuple with the ToolResponses field value
// and a boolean to check if the value has been set.
func (o *ToolExecutionStep) GetToolResponsesOk() ([]ToolResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToolResponses, true
}

// SetToolResponses sets field value
func (o *ToolExecutionStep) SetToolResponses(v []ToolResponse) {
	o.ToolResponses = v
}

func (o ToolExecutionStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolExecutionStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["turn_id"] = o.TurnId
	toSerialize["step_id"] = o.StepId
	if !IsNil(o.StartedAt) {
		toSerialize["started_at"] = o.StartedAt
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completed_at"] = o.CompletedAt
	}
	toSerialize["step_type"] = o.StepType
	toSerialize["tool_calls"] = o.ToolCalls
	toSerialize["tool_responses"] = o.ToolResponses
	return toSerialize, nil
}

func (o *ToolExecutionStep) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"turn_id",
		"step_id",
		"step_type",
		"tool_calls",
		"tool_responses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolExecutionStep := _ToolExecutionStep{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolExecutionStep)

	if err != nil {
		return err
	}

	*o = ToolExecutionStep(varToolExecutionStep)

	return err
}

type NullableToolExecutionStep struct {
	value *ToolExecutionStep
	isSet bool
}

func (v NullableToolExecutionStep) Get() *ToolExecutionStep {
	return v.value
}

func (v *NullableToolExecutionStep) Set(val *ToolExecutionStep) {
	v.value = val
	v.isSet = true
}

func (v NullableToolExecutionStep) IsSet() bool {
	return v.isSet
}

func (v *NullableToolExecutionStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolExecutionStep(val *ToolExecutionStep) *NullableToolExecutionStep {
	return &NullableToolExecutionStep{value: val, isSet: true}
}

func (v NullableToolExecutionStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolExecutionStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


