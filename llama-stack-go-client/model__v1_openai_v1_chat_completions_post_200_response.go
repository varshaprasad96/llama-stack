/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// V1OpenaiV1ChatCompletionsPost200Response - struct for V1OpenaiV1ChatCompletionsPost200Response
type V1OpenaiV1ChatCompletionsPost200Response struct {
	OpenAIChatCompletion *OpenAIChatCompletion
	OpenAIChatCompletionChunk *OpenAIChatCompletionChunk
}

// OpenAIChatCompletionAsV1OpenaiV1ChatCompletionsPost200Response is a convenience function that returns OpenAIChatCompletion wrapped in V1OpenaiV1ChatCompletionsPost200Response
func OpenAIChatCompletionAsV1OpenaiV1ChatCompletionsPost200Response(v *OpenAIChatCompletion) V1OpenaiV1ChatCompletionsPost200Response {
	return V1OpenaiV1ChatCompletionsPost200Response{
		OpenAIChatCompletion: v,
	}
}

// OpenAIChatCompletionChunkAsV1OpenaiV1ChatCompletionsPost200Response is a convenience function that returns OpenAIChatCompletionChunk wrapped in V1OpenaiV1ChatCompletionsPost200Response
func OpenAIChatCompletionChunkAsV1OpenaiV1ChatCompletionsPost200Response(v *OpenAIChatCompletionChunk) V1OpenaiV1ChatCompletionsPost200Response {
	return V1OpenaiV1ChatCompletionsPost200Response{
		OpenAIChatCompletionChunk: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *V1OpenaiV1ChatCompletionsPost200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OpenAIChatCompletion
	err = newStrictDecoder(data).Decode(&dst.OpenAIChatCompletion)
	if err == nil {
		jsonOpenAIChatCompletion, _ := json.Marshal(dst.OpenAIChatCompletion)
		if string(jsonOpenAIChatCompletion) == "{}" { // empty struct
			dst.OpenAIChatCompletion = nil
		} else {
			if err = validator.Validate(dst.OpenAIChatCompletion); err != nil {
				dst.OpenAIChatCompletion = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAIChatCompletion = nil
	}

	// try to unmarshal data into OpenAIChatCompletionChunk
	err = newStrictDecoder(data).Decode(&dst.OpenAIChatCompletionChunk)
	if err == nil {
		jsonOpenAIChatCompletionChunk, _ := json.Marshal(dst.OpenAIChatCompletionChunk)
		if string(jsonOpenAIChatCompletionChunk) == "{}" { // empty struct
			dst.OpenAIChatCompletionChunk = nil
		} else {
			if err = validator.Validate(dst.OpenAIChatCompletionChunk); err != nil {
				dst.OpenAIChatCompletionChunk = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAIChatCompletionChunk = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OpenAIChatCompletion = nil
		dst.OpenAIChatCompletionChunk = nil

		return fmt.Errorf("data matches more than one schema in oneOf(V1OpenaiV1ChatCompletionsPost200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(V1OpenaiV1ChatCompletionsPost200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src V1OpenaiV1ChatCompletionsPost200Response) MarshalJSON() ([]byte, error) {
	if src.OpenAIChatCompletion != nil {
		return json.Marshal(&src.OpenAIChatCompletion)
	}

	if src.OpenAIChatCompletionChunk != nil {
		return json.Marshal(&src.OpenAIChatCompletionChunk)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *V1OpenaiV1ChatCompletionsPost200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OpenAIChatCompletion != nil {
		return obj.OpenAIChatCompletion
	}

	if obj.OpenAIChatCompletionChunk != nil {
		return obj.OpenAIChatCompletionChunk
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj V1OpenaiV1ChatCompletionsPost200Response) GetActualInstanceValue() (interface{}) {
	if obj.OpenAIChatCompletion != nil {
		return *obj.OpenAIChatCompletion
	}

	if obj.OpenAIChatCompletionChunk != nil {
		return *obj.OpenAIChatCompletionChunk
	}

	// all schemas are nil
	return nil
}

type NullableV1OpenaiV1ChatCompletionsPost200Response struct {
	value *V1OpenaiV1ChatCompletionsPost200Response
	isSet bool
}

func (v NullableV1OpenaiV1ChatCompletionsPost200Response) Get() *V1OpenaiV1ChatCompletionsPost200Response {
	return v.value
}

func (v *NullableV1OpenaiV1ChatCompletionsPost200Response) Set(val *V1OpenaiV1ChatCompletionsPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV1OpenaiV1ChatCompletionsPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV1OpenaiV1ChatCompletionsPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1OpenaiV1ChatCompletionsPost200Response(val *V1OpenaiV1ChatCompletionsPost200Response) *NullableV1OpenaiV1ChatCompletionsPost200Response {
	return &NullableV1OpenaiV1ChatCompletionsPost200Response{value: val, isSet: true}
}

func (v NullableV1OpenaiV1ChatCompletionsPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1OpenaiV1ChatCompletionsPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


