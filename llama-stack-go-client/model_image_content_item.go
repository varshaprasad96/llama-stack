/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ImageContentItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageContentItem{}

// ImageContentItem A image content item
type ImageContentItem struct {
	// Discriminator type of the content item. Always \"image\"
	Type string `json:"type"`
	Image ImageContentItemImage `json:"image"`
	AdditionalProperties map[string]interface{}
}

type _ImageContentItem ImageContentItem

// NewImageContentItem instantiates a new ImageContentItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageContentItem(type_ string, image ImageContentItemImage) *ImageContentItem {
	this := ImageContentItem{}
	this.Type = type_
	this.Image = image
	return &this
}

// NewImageContentItemWithDefaults instantiates a new ImageContentItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageContentItemWithDefaults() *ImageContentItem {
	this := ImageContentItem{}
	var type_ string = "image"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *ImageContentItem) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ImageContentItem) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ImageContentItem) SetType(v string) {
	o.Type = v
}

// GetImage returns the Image field value
func (o *ImageContentItem) GetImage() ImageContentItemImage {
	if o == nil {
		var ret ImageContentItemImage
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ImageContentItem) GetImageOk() (*ImageContentItemImage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *ImageContentItem) SetImage(v ImageContentItemImage) {
	o.Image = v
}

func (o ImageContentItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageContentItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["image"] = o.Image

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImageContentItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"image",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImageContentItem := _ImageContentItem{}

	err = json.Unmarshal(data, &varImageContentItem)

	if err != nil {
		return err
	}

	*o = ImageContentItem(varImageContentItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "image")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImageContentItem struct {
	value *ImageContentItem
	isSet bool
}

func (v NullableImageContentItem) Get() *ImageContentItem {
	return v.value
}

func (v *NullableImageContentItem) Set(val *ImageContentItem) {
	v.value = val
	v.isSet = true
}

func (v NullableImageContentItem) IsSet() bool {
	return v.isSet
}

func (v *NullableImageContentItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageContentItem(val *ImageContentItem) *NullableImageContentItem {
	return &NullableImageContentItem{value: val, isSet: true}
}

func (v NullableImageContentItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageContentItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


