/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Span type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Span{}

// Span struct for Span
type Span struct {
	SpanId string `json:"span_id"`
	TraceId string `json:"trace_id"`
	ParentSpanId *string `json:"parent_span_id,omitempty"`
	Name string `json:"name"`
	StartTime time.Time `json:"start_time"`
	EndTime *time.Time `json:"end_time,omitempty"`
	Attributes map[string]AppendRowsRequestRowsInnerValue `json:"attributes,omitempty"`
}

type _Span Span

// NewSpan instantiates a new Span object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpan(spanId string, traceId string, name string, startTime time.Time) *Span {
	this := Span{}
	this.SpanId = spanId
	this.TraceId = traceId
	this.Name = name
	this.StartTime = startTime
	return &this
}

// NewSpanWithDefaults instantiates a new Span object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanWithDefaults() *Span {
	this := Span{}
	return &this
}

// GetSpanId returns the SpanId field value
func (o *Span) GetSpanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value
// and a boolean to check if the value has been set.
func (o *Span) GetSpanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpanId, true
}

// SetSpanId sets field value
func (o *Span) SetSpanId(v string) {
	o.SpanId = v
}

// GetTraceId returns the TraceId field value
func (o *Span) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *Span) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *Span) SetTraceId(v string) {
	o.TraceId = v
}

// GetParentSpanId returns the ParentSpanId field value if set, zero value otherwise.
func (o *Span) GetParentSpanId() string {
	if o == nil || IsNil(o.ParentSpanId) {
		var ret string
		return ret
	}
	return *o.ParentSpanId
}

// GetParentSpanIdOk returns a tuple with the ParentSpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetParentSpanIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentSpanId) {
		return nil, false
	}
	return o.ParentSpanId, true
}

// HasParentSpanId returns a boolean if a field has been set.
func (o *Span) HasParentSpanId() bool {
	if o != nil && !IsNil(o.ParentSpanId) {
		return true
	}

	return false
}

// SetParentSpanId gets a reference to the given string and assigns it to the ParentSpanId field.
func (o *Span) SetParentSpanId(v string) {
	o.ParentSpanId = &v
}

// GetName returns the Name field value
func (o *Span) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Span) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Span) SetName(v string) {
	o.Name = v
}

// GetStartTime returns the StartTime field value
func (o *Span) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Span) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Span) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *Span) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *Span) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *Span) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *Span) GetAttributes() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Span) GetAttributesOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *Span) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]AppendRowsRequestRowsInnerValue and assigns it to the Attributes field.
func (o *Span) SetAttributes(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Attributes = v
}

func (o Span) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Span) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["span_id"] = o.SpanId
	toSerialize["trace_id"] = o.TraceId
	if !IsNil(o.ParentSpanId) {
		toSerialize["parent_span_id"] = o.ParentSpanId
	}
	toSerialize["name"] = o.Name
	toSerialize["start_time"] = o.StartTime
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	return toSerialize, nil
}

func (o *Span) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"span_id",
		"trace_id",
		"name",
		"start_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpan := _Span{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpan)

	if err != nil {
		return err
	}

	*o = Span(varSpan)

	return err
}

type NullableSpan struct {
	value *Span
	isSet bool
}

func (v NullableSpan) Get() *Span {
	return v.value
}

func (v *NullableSpan) Set(val *Span) {
	v.value = val
	v.isSet = true
}

func (v NullableSpan) IsSet() bool {
	return v.isSet
}

func (v *NullableSpan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpan(val *Span) *NullableSpan {
	return &NullableSpan{value: val, isSet: true}
}

func (v NullableSpan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


