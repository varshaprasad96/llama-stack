/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolDefinition{}

// ToolDefinition struct for ToolDefinition
type ToolDefinition struct {
	ToolName ToolCallToolName `json:"tool_name"`
	Description *string `json:"description,omitempty"`
	Parameters map[string]ToolParamDefinition `json:"parameters,omitempty"`
}

type _ToolDefinition ToolDefinition

// NewToolDefinition instantiates a new ToolDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolDefinition(toolName ToolCallToolName) *ToolDefinition {
	this := ToolDefinition{}
	this.ToolName = toolName
	return &this
}

// NewToolDefinitionWithDefaults instantiates a new ToolDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolDefinitionWithDefaults() *ToolDefinition {
	this := ToolDefinition{}
	return &this
}

// GetToolName returns the ToolName field value
func (o *ToolDefinition) GetToolName() ToolCallToolName {
	if o == nil {
		var ret ToolCallToolName
		return ret
	}

	return o.ToolName
}

// GetToolNameOk returns a tuple with the ToolName field value
// and a boolean to check if the value has been set.
func (o *ToolDefinition) GetToolNameOk() (*ToolCallToolName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolName, true
}

// SetToolName sets field value
func (o *ToolDefinition) SetToolName(v ToolCallToolName) {
	o.ToolName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ToolDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ToolDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ToolDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ToolDefinition) GetParameters() map[string]ToolParamDefinition {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]ToolParamDefinition
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolDefinition) GetParametersOk() (map[string]ToolParamDefinition, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]ToolParamDefinition{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ToolDefinition) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]ToolParamDefinition and assigns it to the Parameters field.
func (o *ToolDefinition) SetParameters(v map[string]ToolParamDefinition) {
	o.Parameters = v
}

func (o ToolDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tool_name"] = o.ToolName
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

func (o *ToolDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolDefinition := _ToolDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolDefinition)

	if err != nil {
		return err
	}

	*o = ToolDefinition(varToolDefinition)

	return err
}

type NullableToolDefinition struct {
	value *ToolDefinition
	isSet bool
}

func (v NullableToolDefinition) Get() *ToolDefinition {
	return v.value
}

func (v *NullableToolDefinition) Set(val *ToolDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableToolDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableToolDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolDefinition(val *ToolDefinition) *NullableToolDefinition {
	return &NullableToolDefinition{value: val, isSet: true}
}

func (v NullableToolDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


