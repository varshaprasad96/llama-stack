/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BenchmarkConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BenchmarkConfig{}

// BenchmarkConfig A benchmark configuration for evaluation.
type BenchmarkConfig struct {
	// The candidate to evaluate.
	EvalCandidate EvalCandidate `json:"eval_candidate"`
	// Map between scoring function id and parameters for each scoring function you want to run
	ScoringParams map[string]ScoringFnParams `json:"scoring_params"`
	// (Optional) The number of examples to evaluate. If not provided, all examples in the dataset will be evaluated
	NumExamples *int32 `json:"num_examples,omitempty"`
}

type _BenchmarkConfig BenchmarkConfig

// NewBenchmarkConfig instantiates a new BenchmarkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBenchmarkConfig(evalCandidate EvalCandidate, scoringParams map[string]ScoringFnParams) *BenchmarkConfig {
	this := BenchmarkConfig{}
	this.EvalCandidate = evalCandidate
	this.ScoringParams = scoringParams
	return &this
}

// NewBenchmarkConfigWithDefaults instantiates a new BenchmarkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBenchmarkConfigWithDefaults() *BenchmarkConfig {
	this := BenchmarkConfig{}
	return &this
}

// GetEvalCandidate returns the EvalCandidate field value
func (o *BenchmarkConfig) GetEvalCandidate() EvalCandidate {
	if o == nil {
		var ret EvalCandidate
		return ret
	}

	return o.EvalCandidate
}

// GetEvalCandidateOk returns a tuple with the EvalCandidate field value
// and a boolean to check if the value has been set.
func (o *BenchmarkConfig) GetEvalCandidateOk() (*EvalCandidate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EvalCandidate, true
}

// SetEvalCandidate sets field value
func (o *BenchmarkConfig) SetEvalCandidate(v EvalCandidate) {
	o.EvalCandidate = v
}

// GetScoringParams returns the ScoringParams field value
func (o *BenchmarkConfig) GetScoringParams() map[string]ScoringFnParams {
	if o == nil {
		var ret map[string]ScoringFnParams
		return ret
	}

	return o.ScoringParams
}

// GetScoringParamsOk returns a tuple with the ScoringParams field value
// and a boolean to check if the value has been set.
func (o *BenchmarkConfig) GetScoringParamsOk() (map[string]ScoringFnParams, bool) {
	if o == nil {
		return map[string]ScoringFnParams{}, false
	}
	return o.ScoringParams, true
}

// SetScoringParams sets field value
func (o *BenchmarkConfig) SetScoringParams(v map[string]ScoringFnParams) {
	o.ScoringParams = v
}

// GetNumExamples returns the NumExamples field value if set, zero value otherwise.
func (o *BenchmarkConfig) GetNumExamples() int32 {
	if o == nil || IsNil(o.NumExamples) {
		var ret int32
		return ret
	}
	return *o.NumExamples
}

// GetNumExamplesOk returns a tuple with the NumExamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchmarkConfig) GetNumExamplesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumExamples) {
		return nil, false
	}
	return o.NumExamples, true
}

// HasNumExamples returns a boolean if a field has been set.
func (o *BenchmarkConfig) HasNumExamples() bool {
	if o != nil && !IsNil(o.NumExamples) {
		return true
	}

	return false
}

// SetNumExamples gets a reference to the given int32 and assigns it to the NumExamples field.
func (o *BenchmarkConfig) SetNumExamples(v int32) {
	o.NumExamples = &v
}

func (o BenchmarkConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BenchmarkConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eval_candidate"] = o.EvalCandidate
	toSerialize["scoring_params"] = o.ScoringParams
	if !IsNil(o.NumExamples) {
		toSerialize["num_examples"] = o.NumExamples
	}
	return toSerialize, nil
}

func (o *BenchmarkConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eval_candidate",
		"scoring_params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBenchmarkConfig := _BenchmarkConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBenchmarkConfig)

	if err != nil {
		return err
	}

	*o = BenchmarkConfig(varBenchmarkConfig)

	return err
}

type NullableBenchmarkConfig struct {
	value *BenchmarkConfig
	isSet bool
}

func (v NullableBenchmarkConfig) Get() *BenchmarkConfig {
	return v.value
}

func (v *NullableBenchmarkConfig) Set(val *BenchmarkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBenchmarkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBenchmarkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenchmarkConfig(val *BenchmarkConfig) *NullableBenchmarkConfig {
	return &NullableBenchmarkConfig{value: val, isSet: true}
}

func (v NullableBenchmarkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenchmarkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


