/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ToolConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolConfig{}

// ToolConfig Configuration for tool use.
type ToolConfig struct {
	ToolChoice *ToolConfigToolChoice `json:"tool_choice,omitempty"`
	// (Optional) Instructs the model how to format tool calls. By default, Llama Stack will attempt to use a format that is best adapted to the model. - `ToolPromptFormat.json`: The tool calls are formatted as a JSON object. - `ToolPromptFormat.function_tag`: The tool calls are enclosed in a <function=function_name> tag. - `ToolPromptFormat.python_list`: The tool calls are output as Python syntax -- a list of function calls.
	ToolPromptFormat *string `json:"tool_prompt_format,omitempty"`
	// (Optional) Config for how to override the default system prompt. - `SystemMessageBehavior.append`: Appends the provided system message to the default system prompt. - `SystemMessageBehavior.replace`: Replaces the default system prompt with the provided system message. The system message can include the string '{{function_definitions}}' to indicate where the function definitions should be inserted.
	SystemMessageBehavior *string `json:"system_message_behavior,omitempty"`
}

// NewToolConfig instantiates a new ToolConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolConfig() *ToolConfig {
	this := ToolConfig{}
	var toolChoice ToolConfigToolChoice = auto
	this.ToolChoice = &toolChoice
	var systemMessageBehavior string = "append"
	this.SystemMessageBehavior = &systemMessageBehavior
	return &this
}

// NewToolConfigWithDefaults instantiates a new ToolConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolConfigWithDefaults() *ToolConfig {
	this := ToolConfig{}
	var toolChoice ToolConfigToolChoice = auto
	this.ToolChoice = &toolChoice
	var systemMessageBehavior string = "append"
	this.SystemMessageBehavior = &systemMessageBehavior
	return &this
}

// GetToolChoice returns the ToolChoice field value if set, zero value otherwise.
func (o *ToolConfig) GetToolChoice() ToolConfigToolChoice {
	if o == nil || IsNil(o.ToolChoice) {
		var ret ToolConfigToolChoice
		return ret
	}
	return *o.ToolChoice
}

// GetToolChoiceOk returns a tuple with the ToolChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolConfig) GetToolChoiceOk() (*ToolConfigToolChoice, bool) {
	if o == nil || IsNil(o.ToolChoice) {
		return nil, false
	}
	return o.ToolChoice, true
}

// HasToolChoice returns a boolean if a field has been set.
func (o *ToolConfig) HasToolChoice() bool {
	if o != nil && !IsNil(o.ToolChoice) {
		return true
	}

	return false
}

// SetToolChoice gets a reference to the given ToolConfigToolChoice and assigns it to the ToolChoice field.
func (o *ToolConfig) SetToolChoice(v ToolConfigToolChoice) {
	o.ToolChoice = &v
}

// GetToolPromptFormat returns the ToolPromptFormat field value if set, zero value otherwise.
func (o *ToolConfig) GetToolPromptFormat() string {
	if o == nil || IsNil(o.ToolPromptFormat) {
		var ret string
		return ret
	}
	return *o.ToolPromptFormat
}

// GetToolPromptFormatOk returns a tuple with the ToolPromptFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolConfig) GetToolPromptFormatOk() (*string, bool) {
	if o == nil || IsNil(o.ToolPromptFormat) {
		return nil, false
	}
	return o.ToolPromptFormat, true
}

// HasToolPromptFormat returns a boolean if a field has been set.
func (o *ToolConfig) HasToolPromptFormat() bool {
	if o != nil && !IsNil(o.ToolPromptFormat) {
		return true
	}

	return false
}

// SetToolPromptFormat gets a reference to the given string and assigns it to the ToolPromptFormat field.
func (o *ToolConfig) SetToolPromptFormat(v string) {
	o.ToolPromptFormat = &v
}

// GetSystemMessageBehavior returns the SystemMessageBehavior field value if set, zero value otherwise.
func (o *ToolConfig) GetSystemMessageBehavior() string {
	if o == nil || IsNil(o.SystemMessageBehavior) {
		var ret string
		return ret
	}
	return *o.SystemMessageBehavior
}

// GetSystemMessageBehaviorOk returns a tuple with the SystemMessageBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolConfig) GetSystemMessageBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.SystemMessageBehavior) {
		return nil, false
	}
	return o.SystemMessageBehavior, true
}

// HasSystemMessageBehavior returns a boolean if a field has been set.
func (o *ToolConfig) HasSystemMessageBehavior() bool {
	if o != nil && !IsNil(o.SystemMessageBehavior) {
		return true
	}

	return false
}

// SetSystemMessageBehavior gets a reference to the given string and assigns it to the SystemMessageBehavior field.
func (o *ToolConfig) SetSystemMessageBehavior(v string) {
	o.SystemMessageBehavior = &v
}

func (o ToolConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ToolChoice) {
		toSerialize["tool_choice"] = o.ToolChoice
	}
	if !IsNil(o.ToolPromptFormat) {
		toSerialize["tool_prompt_format"] = o.ToolPromptFormat
	}
	if !IsNil(o.SystemMessageBehavior) {
		toSerialize["system_message_behavior"] = o.SystemMessageBehavior
	}
	return toSerialize, nil
}

type NullableToolConfig struct {
	value *ToolConfig
	isSet bool
}

func (v NullableToolConfig) Get() *ToolConfig {
	return v.value
}

func (v *NullableToolConfig) Set(val *ToolConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableToolConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableToolConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolConfig(val *ToolConfig) *NullableToolConfig {
	return &NullableToolConfig{value: val, isSet: true}
}

func (v NullableToolConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


