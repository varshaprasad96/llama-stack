/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// OpenAIDeveloperMessageParamContent - The content of the developer message
type OpenAIDeveloperMessageParamContent struct {
	ArrayOfOpenAIChatCompletionContentPartParam *[]OpenAIChatCompletionContentPartParam
	String *string
}

// []OpenAIChatCompletionContentPartParamAsOpenAIDeveloperMessageParamContent is a convenience function that returns []OpenAIChatCompletionContentPartParam wrapped in OpenAIDeveloperMessageParamContent
func ArrayOfOpenAIChatCompletionContentPartParamAsOpenAIDeveloperMessageParamContent(v *[]OpenAIChatCompletionContentPartParam) OpenAIDeveloperMessageParamContent {
	return OpenAIDeveloperMessageParamContent{
		ArrayOfOpenAIChatCompletionContentPartParam: v,
	}
}

// stringAsOpenAIDeveloperMessageParamContent is a convenience function that returns string wrapped in OpenAIDeveloperMessageParamContent
func StringAsOpenAIDeveloperMessageParamContent(v *string) OpenAIDeveloperMessageParamContent {
	return OpenAIDeveloperMessageParamContent{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OpenAIDeveloperMessageParamContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfOpenAIChatCompletionContentPartParam
	err = newStrictDecoder(data).Decode(&dst.ArrayOfOpenAIChatCompletionContentPartParam)
	if err == nil {
		jsonArrayOfOpenAIChatCompletionContentPartParam, _ := json.Marshal(dst.ArrayOfOpenAIChatCompletionContentPartParam)
		if string(jsonArrayOfOpenAIChatCompletionContentPartParam) == "{}" { // empty struct
			dst.ArrayOfOpenAIChatCompletionContentPartParam = nil
		} else {
			if err = validator.Validate(dst.ArrayOfOpenAIChatCompletionContentPartParam); err != nil {
				dst.ArrayOfOpenAIChatCompletionContentPartParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfOpenAIChatCompletionContentPartParam = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfOpenAIChatCompletionContentPartParam = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OpenAIDeveloperMessageParamContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OpenAIDeveloperMessageParamContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OpenAIDeveloperMessageParamContent) MarshalJSON() ([]byte, error) {
	if src.ArrayOfOpenAIChatCompletionContentPartParam != nil {
		return json.Marshal(&src.ArrayOfOpenAIChatCompletionContentPartParam)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OpenAIDeveloperMessageParamContent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfOpenAIChatCompletionContentPartParam != nil {
		return obj.ArrayOfOpenAIChatCompletionContentPartParam
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj OpenAIDeveloperMessageParamContent) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfOpenAIChatCompletionContentPartParam != nil {
		return *obj.ArrayOfOpenAIChatCompletionContentPartParam
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableOpenAIDeveloperMessageParamContent struct {
	value *OpenAIDeveloperMessageParamContent
	isSet bool
}

func (v NullableOpenAIDeveloperMessageParamContent) Get() *OpenAIDeveloperMessageParamContent {
	return v.value
}

func (v *NullableOpenAIDeveloperMessageParamContent) Set(val *OpenAIDeveloperMessageParamContent) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIDeveloperMessageParamContent) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIDeveloperMessageParamContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIDeveloperMessageParamContent(val *OpenAIDeveloperMessageParamContent) *NullableOpenAIDeveloperMessageParamContent {
	return &NullableOpenAIDeveloperMessageParamContent{value: val, isSet: true}
}

func (v NullableOpenAIDeveloperMessageParamContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIDeveloperMessageParamContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


