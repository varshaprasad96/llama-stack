/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// OpenaiChatCompletionRequestToolChoice - (Optional) The tool choice to use
type OpenaiChatCompletionRequestToolChoice struct {
	MapmapOfStringAppendRowsRequestRowsInnerValue *map[string]AppendRowsRequestRowsInnerValue
	String *string
}

// map[string]AppendRowsRequestRowsInnerValueAsOpenaiChatCompletionRequestToolChoice is a convenience function that returns map[string]AppendRowsRequestRowsInnerValue wrapped in OpenaiChatCompletionRequestToolChoice
func MapmapOfStringAppendRowsRequestRowsInnerValueAsOpenaiChatCompletionRequestToolChoice(v *map[string]AppendRowsRequestRowsInnerValue) OpenaiChatCompletionRequestToolChoice {
	return OpenaiChatCompletionRequestToolChoice{
		MapmapOfStringAppendRowsRequestRowsInnerValue: v,
	}
}

// stringAsOpenaiChatCompletionRequestToolChoice is a convenience function that returns string wrapped in OpenaiChatCompletionRequestToolChoice
func StringAsOpenaiChatCompletionRequestToolChoice(v *string) OpenaiChatCompletionRequestToolChoice {
	return OpenaiChatCompletionRequestToolChoice{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OpenaiChatCompletionRequestToolChoice) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MapmapOfStringAppendRowsRequestRowsInnerValue
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAppendRowsRequestRowsInnerValue)
	if err == nil {
		jsonMapmapOfStringAppendRowsRequestRowsInnerValue, _ := json.Marshal(dst.MapmapOfStringAppendRowsRequestRowsInnerValue)
		if string(jsonMapmapOfStringAppendRowsRequestRowsInnerValue) == "{}" { // empty struct
			dst.MapmapOfStringAppendRowsRequestRowsInnerValue = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringAppendRowsRequestRowsInnerValue); err != nil {
				dst.MapmapOfStringAppendRowsRequestRowsInnerValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringAppendRowsRequestRowsInnerValue = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MapmapOfStringAppendRowsRequestRowsInnerValue = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OpenaiChatCompletionRequestToolChoice)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OpenaiChatCompletionRequestToolChoice)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OpenaiChatCompletionRequestToolChoice) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringAppendRowsRequestRowsInnerValue != nil {
		return json.Marshal(&src.MapmapOfStringAppendRowsRequestRowsInnerValue)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OpenaiChatCompletionRequestToolChoice) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MapmapOfStringAppendRowsRequestRowsInnerValue != nil {
		return obj.MapmapOfStringAppendRowsRequestRowsInnerValue
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj OpenaiChatCompletionRequestToolChoice) GetActualInstanceValue() (interface{}) {
	if obj.MapmapOfStringAppendRowsRequestRowsInnerValue != nil {
		return *obj.MapmapOfStringAppendRowsRequestRowsInnerValue
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableOpenaiChatCompletionRequestToolChoice struct {
	value *OpenaiChatCompletionRequestToolChoice
	isSet bool
}

func (v NullableOpenaiChatCompletionRequestToolChoice) Get() *OpenaiChatCompletionRequestToolChoice {
	return v.value
}

func (v *NullableOpenaiChatCompletionRequestToolChoice) Set(val *OpenaiChatCompletionRequestToolChoice) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenaiChatCompletionRequestToolChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenaiChatCompletionRequestToolChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenaiChatCompletionRequestToolChoice(val *OpenaiChatCompletionRequestToolChoice) *NullableOpenaiChatCompletionRequestToolChoice {
	return &NullableOpenaiChatCompletionRequestToolChoice{value: val, isSet: true}
}

func (v NullableOpenaiChatCompletionRequestToolChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenaiChatCompletionRequestToolChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


