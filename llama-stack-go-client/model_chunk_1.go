/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Chunk1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Chunk1{}

// Chunk1 struct for Chunk1
type Chunk1 struct {
	Content InterleavedContent `json:"content"`
	Metadata map[string]Chunk1MetadataValue `json:"metadata"`
}

type _Chunk1 Chunk1

// NewChunk1 instantiates a new Chunk1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChunk1(content InterleavedContent, metadata map[string]Chunk1MetadataValue) *Chunk1 {
	this := Chunk1{}
	this.Content = content
	this.Metadata = metadata
	return &this
}

// NewChunk1WithDefaults instantiates a new Chunk1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChunk1WithDefaults() *Chunk1 {
	this := Chunk1{}
	return &this
}

// GetContent returns the Content field value
func (o *Chunk1) GetContent() InterleavedContent {
	if o == nil {
		var ret InterleavedContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Chunk1) GetContentOk() (*InterleavedContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Chunk1) SetContent(v InterleavedContent) {
	o.Content = v
}

// GetMetadata returns the Metadata field value
func (o *Chunk1) GetMetadata() map[string]Chunk1MetadataValue {
	if o == nil {
		var ret map[string]Chunk1MetadataValue
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Chunk1) GetMetadataOk() (map[string]Chunk1MetadataValue, bool) {
	if o == nil {
		return map[string]Chunk1MetadataValue{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *Chunk1) SetMetadata(v map[string]Chunk1MetadataValue) {
	o.Metadata = v
}

func (o Chunk1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Chunk1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *Chunk1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChunk1 := _Chunk1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChunk1)

	if err != nil {
		return err
	}

	*o = Chunk1(varChunk1)

	return err
}

type NullableChunk1 struct {
	value *Chunk1
	isSet bool
}

func (v NullableChunk1) Get() *Chunk1 {
	return v.value
}

func (v *NullableChunk1) Set(val *Chunk1) {
	v.value = val
	v.isSet = true
}

func (v NullableChunk1) IsSet() bool {
	return v.isSet
}

func (v *NullableChunk1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChunk1(val *Chunk1) *NullableChunk1 {
	return &NullableChunk1{value: val, isSet: true}
}

func (v NullableChunk1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChunk1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


