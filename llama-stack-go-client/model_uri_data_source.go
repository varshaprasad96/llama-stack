/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the URIDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &URIDataSource{}

// URIDataSource A dataset that can be obtained from a URI.
type URIDataSource struct {
	Type string `json:"type"`
	// The dataset can be obtained from a URI. E.g. - \"https://mywebsite.com/mydata.jsonl\" - \"lsfs://mydata.jsonl\" - \"data:csv;base64,{base64_content}\"
	Uri string `json:"uri"`
}

type _URIDataSource URIDataSource

// NewURIDataSource instantiates a new URIDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewURIDataSource(type_ string, uri string) *URIDataSource {
	this := URIDataSource{}
	this.Type = type_
	this.Uri = uri
	return &this
}

// NewURIDataSourceWithDefaults instantiates a new URIDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewURIDataSourceWithDefaults() *URIDataSource {
	this := URIDataSource{}
	var type_ string = "uri"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *URIDataSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *URIDataSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *URIDataSource) SetType(v string) {
	o.Type = v
}

// GetUri returns the Uri field value
func (o *URIDataSource) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *URIDataSource) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *URIDataSource) SetUri(v string) {
	o.Uri = v
}

func (o URIDataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o URIDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *URIDataSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varURIDataSource := _URIDataSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varURIDataSource)

	if err != nil {
		return err
	}

	*o = URIDataSource(varURIDataSource)

	return err
}

type NullableURIDataSource struct {
	value *URIDataSource
	isSet bool
}

func (v NullableURIDataSource) Get() *URIDataSource {
	return v.value
}

func (v *NullableURIDataSource) Set(val *URIDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableURIDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableURIDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableURIDataSource(val *URIDataSource) *NullableURIDataSource {
	return &NullableURIDataSource{value: val, isSet: true}
}

func (v NullableURIDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableURIDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


