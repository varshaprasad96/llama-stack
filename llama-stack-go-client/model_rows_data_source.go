/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RowsDataSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RowsDataSource{}

// RowsDataSource A dataset stored in rows.
type RowsDataSource struct {
	Type string `json:"type"`
	// The dataset is stored in rows. E.g. - [ {\"messages\": [{\"role\": \"user\", \"content\": \"Hello, world!\"}, {\"role\": \"assistant\", \"content\": \"Hello, world!\"}]} ]
	Rows []map[string]AppendRowsRequestRowsInnerValue `json:"rows"`
}

type _RowsDataSource RowsDataSource

// NewRowsDataSource instantiates a new RowsDataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRowsDataSource(type_ string, rows []map[string]AppendRowsRequestRowsInnerValue) *RowsDataSource {
	this := RowsDataSource{}
	this.Type = type_
	this.Rows = rows
	return &this
}

// NewRowsDataSourceWithDefaults instantiates a new RowsDataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRowsDataSourceWithDefaults() *RowsDataSource {
	this := RowsDataSource{}
	var type_ string = "rows"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *RowsDataSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RowsDataSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RowsDataSource) SetType(v string) {
	o.Type = v
}

// GetRows returns the Rows field value
func (o *RowsDataSource) GetRows() []map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret []map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value
// and a boolean to check if the value has been set.
func (o *RowsDataSource) GetRowsOk() ([]map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rows, true
}

// SetRows sets field value
func (o *RowsDataSource) SetRows(v []map[string]AppendRowsRequestRowsInnerValue) {
	o.Rows = v
}

func (o RowsDataSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RowsDataSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["rows"] = o.Rows
	return toSerialize, nil
}

func (o *RowsDataSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"rows",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRowsDataSource := _RowsDataSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRowsDataSource)

	if err != nil {
		return err
	}

	*o = RowsDataSource(varRowsDataSource)

	return err
}

type NullableRowsDataSource struct {
	value *RowsDataSource
	isSet bool
}

func (v NullableRowsDataSource) Get() *RowsDataSource {
	return v.value
}

func (v *NullableRowsDataSource) Set(val *RowsDataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableRowsDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableRowsDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRowsDataSource(val *RowsDataSource) *NullableRowsDataSource {
	return &NullableRowsDataSource{value: val, isSet: true}
}

func (v NullableRowsDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRowsDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


