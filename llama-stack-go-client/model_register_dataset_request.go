/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterDatasetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterDatasetRequest{}

// RegisterDatasetRequest struct for RegisterDatasetRequest
type RegisterDatasetRequest struct {
	// The purpose of the dataset. One of - \"post-training/messages\": The dataset contains a messages column with list of messages for post-training. { \"messages\": [ {\"role\": \"user\", \"content\": \"Hello, world!\"}, {\"role\": \"assistant\", \"content\": \"Hello, world!\"}, ] } - \"eval/question-answer\": The dataset contains a question column and an answer column for evaluation. { \"question\": \"What is the capital of France?\", \"answer\": \"Paris\" } - \"eval/messages-answer\": The dataset contains a messages column with list of messages and an answer column for evaluation. { \"messages\": [ {\"role\": \"user\", \"content\": \"Hello, my name is John Doe.\"}, {\"role\": \"assistant\", \"content\": \"Hello, John Doe. How can I help you today?\"}, {\"role\": \"user\", \"content\": \"What's my name?\"}, ], \"answer\": \"John Doe\" }
	Purpose string `json:"purpose"`
	// The data source of the dataset. Ensure that the data source schema is compatible with the purpose of the dataset. Examples: - { \"type\": \"uri\", \"uri\": \"https://mywebsite.com/mydata.jsonl\" } - { \"type\": \"uri\", \"uri\": \"lsfs://mydata.jsonl\" } - { \"type\": \"uri\", \"uri\": \"data:csv;base64,{base64_content}\" } - { \"type\": \"uri\", \"uri\": \"huggingface://llamastack/simpleqa?split=train\" } - { \"type\": \"rows\", \"rows\": [ { \"messages\": [ {\"role\": \"user\", \"content\": \"Hello, world!\"}, {\"role\": \"assistant\", \"content\": \"Hello, world!\"}, ] } ] }
	Source DataSource `json:"source"`
	// The metadata for the dataset. - E.g. {\"description\": \"My dataset\"}
	Metadata map[string]AppendRowsRequestRowsInnerValue `json:"metadata,omitempty"`
	// The ID of the dataset. If not provided, an ID will be generated.
	DatasetId *string `json:"dataset_id,omitempty"`
}

type _RegisterDatasetRequest RegisterDatasetRequest

// NewRegisterDatasetRequest instantiates a new RegisterDatasetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterDatasetRequest(purpose string, source DataSource) *RegisterDatasetRequest {
	this := RegisterDatasetRequest{}
	this.Purpose = purpose
	this.Source = source
	return &this
}

// NewRegisterDatasetRequestWithDefaults instantiates a new RegisterDatasetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterDatasetRequestWithDefaults() *RegisterDatasetRequest {
	this := RegisterDatasetRequest{}
	return &this
}

// GetPurpose returns the Purpose field value
func (o *RegisterDatasetRequest) GetPurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *RegisterDatasetRequest) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *RegisterDatasetRequest) SetPurpose(v string) {
	o.Purpose = v
}

// GetSource returns the Source field value
func (o *RegisterDatasetRequest) GetSource() DataSource {
	if o == nil {
		var ret DataSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *RegisterDatasetRequest) GetSourceOk() (*DataSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *RegisterDatasetRequest) SetSource(v DataSource) {
	o.Source = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *RegisterDatasetRequest) GetMetadata() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterDatasetRequest) GetMetadataOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RegisterDatasetRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]AppendRowsRequestRowsInnerValue and assigns it to the Metadata field.
func (o *RegisterDatasetRequest) SetMetadata(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Metadata = v
}

// GetDatasetId returns the DatasetId field value if set, zero value otherwise.
func (o *RegisterDatasetRequest) GetDatasetId() string {
	if o == nil || IsNil(o.DatasetId) {
		var ret string
		return ret
	}
	return *o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterDatasetRequest) GetDatasetIdOk() (*string, bool) {
	if o == nil || IsNil(o.DatasetId) {
		return nil, false
	}
	return o.DatasetId, true
}

// HasDatasetId returns a boolean if a field has been set.
func (o *RegisterDatasetRequest) HasDatasetId() bool {
	if o != nil && !IsNil(o.DatasetId) {
		return true
	}

	return false
}

// SetDatasetId gets a reference to the given string and assigns it to the DatasetId field.
func (o *RegisterDatasetRequest) SetDatasetId(v string) {
	o.DatasetId = &v
}

func (o RegisterDatasetRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterDatasetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["purpose"] = o.Purpose
	toSerialize["source"] = o.Source
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.DatasetId) {
		toSerialize["dataset_id"] = o.DatasetId
	}
	return toSerialize, nil
}

func (o *RegisterDatasetRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"purpose",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterDatasetRequest := _RegisterDatasetRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterDatasetRequest)

	if err != nil {
		return err
	}

	*o = RegisterDatasetRequest(varRegisterDatasetRequest)

	return err
}

type NullableRegisterDatasetRequest struct {
	value *RegisterDatasetRequest
	isSet bool
}

func (v NullableRegisterDatasetRequest) Get() *RegisterDatasetRequest {
	return v.value
}

func (v *NullableRegisterDatasetRequest) Set(val *RegisterDatasetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterDatasetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterDatasetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterDatasetRequest(val *RegisterDatasetRequest) *NullableRegisterDatasetRequest {
	return &NullableRegisterDatasetRequest{value: val, isSet: true}
}

func (v NullableRegisterDatasetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterDatasetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


