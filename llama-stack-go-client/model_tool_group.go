/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolGroup{}

// ToolGroup struct for ToolGroup
type ToolGroup struct {
	Identifier string `json:"identifier"`
	ProviderResourceId string `json:"provider_resource_id"`
	ProviderId string `json:"provider_id"`
	Type string `json:"type"`
	McpEndpoint *URL `json:"mcp_endpoint,omitempty"`
	Args map[string]AppendRowsRequestRowsInnerValue `json:"args,omitempty"`
}

type _ToolGroup ToolGroup

// NewToolGroup instantiates a new ToolGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolGroup(identifier string, providerResourceId string, providerId string, type_ string) *ToolGroup {
	this := ToolGroup{}
	this.Identifier = identifier
	this.ProviderResourceId = providerResourceId
	this.ProviderId = providerId
	this.Type = type_
	return &this
}

// NewToolGroupWithDefaults instantiates a new ToolGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolGroupWithDefaults() *ToolGroup {
	this := ToolGroup{}
	var type_ string = "tool_group"
	this.Type = type_
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *ToolGroup) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *ToolGroup) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *ToolGroup) SetIdentifier(v string) {
	o.Identifier = v
}

// GetProviderResourceId returns the ProviderResourceId field value
func (o *ToolGroup) GetProviderResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderResourceId
}

// GetProviderResourceIdOk returns a tuple with the ProviderResourceId field value
// and a boolean to check if the value has been set.
func (o *ToolGroup) GetProviderResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderResourceId, true
}

// SetProviderResourceId sets field value
func (o *ToolGroup) SetProviderResourceId(v string) {
	o.ProviderResourceId = v
}

// GetProviderId returns the ProviderId field value
func (o *ToolGroup) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *ToolGroup) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *ToolGroup) SetProviderId(v string) {
	o.ProviderId = v
}

// GetType returns the Type field value
func (o *ToolGroup) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ToolGroup) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ToolGroup) SetType(v string) {
	o.Type = v
}

// GetMcpEndpoint returns the McpEndpoint field value if set, zero value otherwise.
func (o *ToolGroup) GetMcpEndpoint() URL {
	if o == nil || IsNil(o.McpEndpoint) {
		var ret URL
		return ret
	}
	return *o.McpEndpoint
}

// GetMcpEndpointOk returns a tuple with the McpEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolGroup) GetMcpEndpointOk() (*URL, bool) {
	if o == nil || IsNil(o.McpEndpoint) {
		return nil, false
	}
	return o.McpEndpoint, true
}

// HasMcpEndpoint returns a boolean if a field has been set.
func (o *ToolGroup) HasMcpEndpoint() bool {
	if o != nil && !IsNil(o.McpEndpoint) {
		return true
	}

	return false
}

// SetMcpEndpoint gets a reference to the given URL and assigns it to the McpEndpoint field.
func (o *ToolGroup) SetMcpEndpoint(v URL) {
	o.McpEndpoint = &v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *ToolGroup) GetArgs() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Args) {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolGroup) GetArgsOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Args) {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *ToolGroup) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]AppendRowsRequestRowsInnerValue and assigns it to the Args field.
func (o *ToolGroup) SetArgs(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Args = v
}

func (o ToolGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["provider_resource_id"] = o.ProviderResourceId
	toSerialize["provider_id"] = o.ProviderId
	toSerialize["type"] = o.Type
	if !IsNil(o.McpEndpoint) {
		toSerialize["mcp_endpoint"] = o.McpEndpoint
	}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	return toSerialize, nil
}

func (o *ToolGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"provider_resource_id",
		"provider_id",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolGroup := _ToolGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolGroup)

	if err != nil {
		return err
	}

	*o = ToolGroup(varToolGroup)

	return err
}

type NullableToolGroup struct {
	value *ToolGroup
	isSet bool
}

func (v NullableToolGroup) Get() *ToolGroup {
	return v.value
}

func (v *NullableToolGroup) Set(val *ToolGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableToolGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableToolGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolGroup(val *ToolGroup) *NullableToolGroup {
	return &NullableToolGroup{value: val, isSet: true}
}

func (v NullableToolGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


