/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EmbeddingsRequestContents - List of contents to generate embeddings for. Each content can be a string or an InterleavedContentItem (and hence can be multimodal). The behavior depends on the model and provider. Some models may only support text.
type EmbeddingsRequestContents struct {
	ArrayOfInterleavedContentItem *[]InterleavedContentItem
	ArrayOfString *[]string
}

// []InterleavedContentItemAsEmbeddingsRequestContents is a convenience function that returns []InterleavedContentItem wrapped in EmbeddingsRequestContents
func ArrayOfInterleavedContentItemAsEmbeddingsRequestContents(v *[]InterleavedContentItem) EmbeddingsRequestContents {
	return EmbeddingsRequestContents{
		ArrayOfInterleavedContentItem: v,
	}
}

// []stringAsEmbeddingsRequestContents is a convenience function that returns []string wrapped in EmbeddingsRequestContents
func ArrayOfStringAsEmbeddingsRequestContents(v *[]string) EmbeddingsRequestContents {
	return EmbeddingsRequestContents{
		ArrayOfString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EmbeddingsRequestContents) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfInterleavedContentItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfInterleavedContentItem)
	if err == nil {
		jsonArrayOfInterleavedContentItem, _ := json.Marshal(dst.ArrayOfInterleavedContentItem)
		if string(jsonArrayOfInterleavedContentItem) == "{}" { // empty struct
			dst.ArrayOfInterleavedContentItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfInterleavedContentItem); err != nil {
				dst.ArrayOfInterleavedContentItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfInterleavedContentItem = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfInterleavedContentItem = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EmbeddingsRequestContents)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EmbeddingsRequestContents)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EmbeddingsRequestContents) MarshalJSON() ([]byte, error) {
	if src.ArrayOfInterleavedContentItem != nil {
		return json.Marshal(&src.ArrayOfInterleavedContentItem)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EmbeddingsRequestContents) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfInterleavedContentItem != nil {
		return obj.ArrayOfInterleavedContentItem
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EmbeddingsRequestContents) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfInterleavedContentItem != nil {
		return *obj.ArrayOfInterleavedContentItem
	}

	if obj.ArrayOfString != nil {
		return *obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableEmbeddingsRequestContents struct {
	value *EmbeddingsRequestContents
	isSet bool
}

func (v NullableEmbeddingsRequestContents) Get() *EmbeddingsRequestContents {
	return v.value
}

func (v *NullableEmbeddingsRequestContents) Set(val *EmbeddingsRequestContents) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingsRequestContents) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingsRequestContents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingsRequestContents(val *EmbeddingsRequestContents) *NullableEmbeddingsRequestContents {
	return &NullableEmbeddingsRequestContents{value: val, isSet: true}
}

func (v NullableEmbeddingsRequestContents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingsRequestContents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


