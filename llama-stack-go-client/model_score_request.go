/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScoreRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScoreRequest{}

// ScoreRequest struct for ScoreRequest
type ScoreRequest struct {
	// The rows to score.
	InputRows []map[string]AppendRowsRequestRowsInnerValue `json:"input_rows"`
	// The scoring functions to use for the scoring.
	ScoringFunctions map[string]ScoreRequestScoringFunctionsValue `json:"scoring_functions"`
}

type _ScoreRequest ScoreRequest

// NewScoreRequest instantiates a new ScoreRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScoreRequest(inputRows []map[string]AppendRowsRequestRowsInnerValue, scoringFunctions map[string]ScoreRequestScoringFunctionsValue) *ScoreRequest {
	this := ScoreRequest{}
	this.InputRows = inputRows
	this.ScoringFunctions = scoringFunctions
	return &this
}

// NewScoreRequestWithDefaults instantiates a new ScoreRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoreRequestWithDefaults() *ScoreRequest {
	this := ScoreRequest{}
	return &this
}

// GetInputRows returns the InputRows field value
func (o *ScoreRequest) GetInputRows() []map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret []map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.InputRows
}

// GetInputRowsOk returns a tuple with the InputRows field value
// and a boolean to check if the value has been set.
func (o *ScoreRequest) GetInputRowsOk() ([]map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.InputRows, true
}

// SetInputRows sets field value
func (o *ScoreRequest) SetInputRows(v []map[string]AppendRowsRequestRowsInnerValue) {
	o.InputRows = v
}

// GetScoringFunctions returns the ScoringFunctions field value
func (o *ScoreRequest) GetScoringFunctions() map[string]ScoreRequestScoringFunctionsValue {
	if o == nil {
		var ret map[string]ScoreRequestScoringFunctionsValue
		return ret
	}

	return o.ScoringFunctions
}

// GetScoringFunctionsOk returns a tuple with the ScoringFunctions field value
// and a boolean to check if the value has been set.
func (o *ScoreRequest) GetScoringFunctionsOk() (map[string]ScoreRequestScoringFunctionsValue, bool) {
	if o == nil {
		return map[string]ScoreRequestScoringFunctionsValue{}, false
	}
	return o.ScoringFunctions, true
}

// SetScoringFunctions sets field value
func (o *ScoreRequest) SetScoringFunctions(v map[string]ScoreRequestScoringFunctionsValue) {
	o.ScoringFunctions = v
}

func (o ScoreRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScoreRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["input_rows"] = o.InputRows
	toSerialize["scoring_functions"] = o.ScoringFunctions
	return toSerialize, nil
}

func (o *ScoreRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"input_rows",
		"scoring_functions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScoreRequest := _ScoreRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScoreRequest)

	if err != nil {
		return err
	}

	*o = ScoreRequest(varScoreRequest)

	return err
}

type NullableScoreRequest struct {
	value *ScoreRequest
	isSet bool
}

func (v NullableScoreRequest) Get() *ScoreRequest {
	return v.value
}

func (v *NullableScoreRequest) Set(val *ScoreRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableScoreRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableScoreRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoreRequest(val *ScoreRequest) *NullableScoreRequest {
	return &NullableScoreRequest{value: val, isSet: true}
}

func (v NullableScoreRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoreRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


