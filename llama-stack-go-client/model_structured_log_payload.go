/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// StructuredLogPayload - struct for StructuredLogPayload
type StructuredLogPayload struct {
	SpanEndPayload *SpanEndPayload
	SpanStartPayload *SpanStartPayload
}

// SpanEndPayloadAsStructuredLogPayload is a convenience function that returns SpanEndPayload wrapped in StructuredLogPayload
func SpanEndPayloadAsStructuredLogPayload(v *SpanEndPayload) StructuredLogPayload {
	return StructuredLogPayload{
		SpanEndPayload: v,
	}
}

// SpanStartPayloadAsStructuredLogPayload is a convenience function that returns SpanStartPayload wrapped in StructuredLogPayload
func SpanStartPayloadAsStructuredLogPayload(v *SpanStartPayload) StructuredLogPayload {
	return StructuredLogPayload{
		SpanStartPayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *StructuredLogPayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpanEndPayload
	err = newStrictDecoder(data).Decode(&dst.SpanEndPayload)
	if err == nil {
		jsonSpanEndPayload, _ := json.Marshal(dst.SpanEndPayload)
		if string(jsonSpanEndPayload) == "{}" { // empty struct
			dst.SpanEndPayload = nil
		} else {
			if err = validator.Validate(dst.SpanEndPayload); err != nil {
				dst.SpanEndPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpanEndPayload = nil
	}

	// try to unmarshal data into SpanStartPayload
	err = newStrictDecoder(data).Decode(&dst.SpanStartPayload)
	if err == nil {
		jsonSpanStartPayload, _ := json.Marshal(dst.SpanStartPayload)
		if string(jsonSpanStartPayload) == "{}" { // empty struct
			dst.SpanStartPayload = nil
		} else {
			if err = validator.Validate(dst.SpanStartPayload); err != nil {
				dst.SpanStartPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.SpanStartPayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpanEndPayload = nil
		dst.SpanStartPayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(StructuredLogPayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(StructuredLogPayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StructuredLogPayload) MarshalJSON() ([]byte, error) {
	if src.SpanEndPayload != nil {
		return json.Marshal(&src.SpanEndPayload)
	}

	if src.SpanStartPayload != nil {
		return json.Marshal(&src.SpanStartPayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StructuredLogPayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SpanEndPayload != nil {
		return obj.SpanEndPayload
	}

	if obj.SpanStartPayload != nil {
		return obj.SpanStartPayload
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj StructuredLogPayload) GetActualInstanceValue() (interface{}) {
	if obj.SpanEndPayload != nil {
		return *obj.SpanEndPayload
	}

	if obj.SpanStartPayload != nil {
		return *obj.SpanStartPayload
	}

	// all schemas are nil
	return nil
}

type NullableStructuredLogPayload struct {
	value *StructuredLogPayload
	isSet bool
}

func (v NullableStructuredLogPayload) Get() *StructuredLogPayload {
	return v.value
}

func (v *NullableStructuredLogPayload) Set(val *StructuredLogPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableStructuredLogPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableStructuredLogPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructuredLogPayload(val *StructuredLogPayload) *NullableStructuredLogPayload {
	return &NullableStructuredLogPayload{value: val, isSet: true}
}

func (v NullableStructuredLogPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructuredLogPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


