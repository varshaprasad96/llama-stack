/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolCallDelta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolCallDelta{}

// ToolCallDelta struct for ToolCallDelta
type ToolCallDelta struct {
	Type string `json:"type"`
	ToolCall ToolCallDeltaToolCall `json:"tool_call"`
	ParseStatus string `json:"parse_status"`
}

type _ToolCallDelta ToolCallDelta

// NewToolCallDelta instantiates a new ToolCallDelta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolCallDelta(type_ string, toolCall ToolCallDeltaToolCall, parseStatus string) *ToolCallDelta {
	this := ToolCallDelta{}
	this.Type = type_
	this.ToolCall = toolCall
	this.ParseStatus = parseStatus
	return &this
}

// NewToolCallDeltaWithDefaults instantiates a new ToolCallDelta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolCallDeltaWithDefaults() *ToolCallDelta {
	this := ToolCallDelta{}
	var type_ string = "tool_call"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *ToolCallDelta) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ToolCallDelta) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ToolCallDelta) SetType(v string) {
	o.Type = v
}

// GetToolCall returns the ToolCall field value
func (o *ToolCallDelta) GetToolCall() ToolCallDeltaToolCall {
	if o == nil {
		var ret ToolCallDeltaToolCall
		return ret
	}

	return o.ToolCall
}

// GetToolCallOk returns a tuple with the ToolCall field value
// and a boolean to check if the value has been set.
func (o *ToolCallDelta) GetToolCallOk() (*ToolCallDeltaToolCall, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolCall, true
}

// SetToolCall sets field value
func (o *ToolCallDelta) SetToolCall(v ToolCallDeltaToolCall) {
	o.ToolCall = v
}

// GetParseStatus returns the ParseStatus field value
func (o *ToolCallDelta) GetParseStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParseStatus
}

// GetParseStatusOk returns a tuple with the ParseStatus field value
// and a boolean to check if the value has been set.
func (o *ToolCallDelta) GetParseStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParseStatus, true
}

// SetParseStatus sets field value
func (o *ToolCallDelta) SetParseStatus(v string) {
	o.ParseStatus = v
}

func (o ToolCallDelta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolCallDelta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["tool_call"] = o.ToolCall
	toSerialize["parse_status"] = o.ParseStatus
	return toSerialize, nil
}

func (o *ToolCallDelta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"tool_call",
		"parse_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolCallDelta := _ToolCallDelta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolCallDelta)

	if err != nil {
		return err
	}

	*o = ToolCallDelta(varToolCallDelta)

	return err
}

type NullableToolCallDelta struct {
	value *ToolCallDelta
	isSet bool
}

func (v NullableToolCallDelta) Get() *ToolCallDelta {
	return v.value
}

func (v *NullableToolCallDelta) Set(val *ToolCallDelta) {
	v.value = val
	v.isSet = true
}

func (v NullableToolCallDelta) IsSet() bool {
	return v.isSet
}

func (v *NullableToolCallDelta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolCallDelta(val *ToolCallDelta) *NullableToolCallDelta {
	return &NullableToolCallDelta{value: val, isSet: true}
}

func (v NullableToolCallDelta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolCallDelta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


