/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunShieldRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunShieldRequest{}

// RunShieldRequest struct for RunShieldRequest
type RunShieldRequest struct {
	ShieldId string `json:"shield_id"`
	Messages []Message `json:"messages"`
	Params map[string]AppendRowsRequestRowsInnerValue `json:"params"`
}

type _RunShieldRequest RunShieldRequest

// NewRunShieldRequest instantiates a new RunShieldRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunShieldRequest(shieldId string, messages []Message, params map[string]AppendRowsRequestRowsInnerValue) *RunShieldRequest {
	this := RunShieldRequest{}
	this.ShieldId = shieldId
	this.Messages = messages
	this.Params = params
	return &this
}

// NewRunShieldRequestWithDefaults instantiates a new RunShieldRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunShieldRequestWithDefaults() *RunShieldRequest {
	this := RunShieldRequest{}
	return &this
}

// GetShieldId returns the ShieldId field value
func (o *RunShieldRequest) GetShieldId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShieldId
}

// GetShieldIdOk returns a tuple with the ShieldId field value
// and a boolean to check if the value has been set.
func (o *RunShieldRequest) GetShieldIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShieldId, true
}

// SetShieldId sets field value
func (o *RunShieldRequest) SetShieldId(v string) {
	o.ShieldId = v
}

// GetMessages returns the Messages field value
func (o *RunShieldRequest) GetMessages() []Message {
	if o == nil {
		var ret []Message
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *RunShieldRequest) GetMessagesOk() ([]Message, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *RunShieldRequest) SetMessages(v []Message) {
	o.Messages = v
}

// GetParams returns the Params field value
func (o *RunShieldRequest) GetParams() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *RunShieldRequest) GetParamsOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *RunShieldRequest) SetParams(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Params = v
}

func (o RunShieldRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunShieldRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["shield_id"] = o.ShieldId
	toSerialize["messages"] = o.Messages
	toSerialize["params"] = o.Params
	return toSerialize, nil
}

func (o *RunShieldRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"shield_id",
		"messages",
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunShieldRequest := _RunShieldRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunShieldRequest)

	if err != nil {
		return err
	}

	*o = RunShieldRequest(varRunShieldRequest)

	return err
}

type NullableRunShieldRequest struct {
	value *RunShieldRequest
	isSet bool
}

func (v NullableRunShieldRequest) Get() *RunShieldRequest {
	return v.value
}

func (v *NullableRunShieldRequest) Set(val *RunShieldRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRunShieldRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRunShieldRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunShieldRequest(val *RunShieldRequest) *NullableRunShieldRequest {
	return &NullableRunShieldRequest{value: val, isSet: true}
}

func (v NullableRunShieldRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunShieldRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


