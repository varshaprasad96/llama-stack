/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoraFinetuningConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoraFinetuningConfig{}

// LoraFinetuningConfig struct for LoraFinetuningConfig
type LoraFinetuningConfig struct {
	Type string `json:"type"`
	LoraAttnModules []string `json:"lora_attn_modules"`
	ApplyLoraToMlp bool `json:"apply_lora_to_mlp"`
	ApplyLoraToOutput bool `json:"apply_lora_to_output"`
	Rank int32 `json:"rank"`
	Alpha int32 `json:"alpha"`
	UseDora *bool `json:"use_dora,omitempty"`
	QuantizeBase *bool `json:"quantize_base,omitempty"`
}

type _LoraFinetuningConfig LoraFinetuningConfig

// NewLoraFinetuningConfig instantiates a new LoraFinetuningConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoraFinetuningConfig(type_ string, loraAttnModules []string, applyLoraToMlp bool, applyLoraToOutput bool, rank int32, alpha int32) *LoraFinetuningConfig {
	this := LoraFinetuningConfig{}
	this.Type = type_
	this.LoraAttnModules = loraAttnModules
	this.ApplyLoraToMlp = applyLoraToMlp
	this.ApplyLoraToOutput = applyLoraToOutput
	this.Rank = rank
	this.Alpha = alpha
	var useDora bool = false
	this.UseDora = &useDora
	var quantizeBase bool = false
	this.QuantizeBase = &quantizeBase
	return &this
}

// NewLoraFinetuningConfigWithDefaults instantiates a new LoraFinetuningConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoraFinetuningConfigWithDefaults() *LoraFinetuningConfig {
	this := LoraFinetuningConfig{}
	var type_ string = "LoRA"
	this.Type = type_
	var useDora bool = false
	this.UseDora = &useDora
	var quantizeBase bool = false
	this.QuantizeBase = &quantizeBase
	return &this
}

// GetType returns the Type field value
func (o *LoraFinetuningConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LoraFinetuningConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LoraFinetuningConfig) SetType(v string) {
	o.Type = v
}

// GetLoraAttnModules returns the LoraAttnModules field value
func (o *LoraFinetuningConfig) GetLoraAttnModules() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LoraAttnModules
}

// GetLoraAttnModulesOk returns a tuple with the LoraAttnModules field value
// and a boolean to check if the value has been set.
func (o *LoraFinetuningConfig) GetLoraAttnModulesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LoraAttnModules, true
}

// SetLoraAttnModules sets field value
func (o *LoraFinetuningConfig) SetLoraAttnModules(v []string) {
	o.LoraAttnModules = v
}

// GetApplyLoraToMlp returns the ApplyLoraToMlp field value
func (o *LoraFinetuningConfig) GetApplyLoraToMlp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ApplyLoraToMlp
}

// GetApplyLoraToMlpOk returns a tuple with the ApplyLoraToMlp field value
// and a boolean to check if the value has been set.
func (o *LoraFinetuningConfig) GetApplyLoraToMlpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplyLoraToMlp, true
}

// SetApplyLoraToMlp sets field value
func (o *LoraFinetuningConfig) SetApplyLoraToMlp(v bool) {
	o.ApplyLoraToMlp = v
}

// GetApplyLoraToOutput returns the ApplyLoraToOutput field value
func (o *LoraFinetuningConfig) GetApplyLoraToOutput() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ApplyLoraToOutput
}

// GetApplyLoraToOutputOk returns a tuple with the ApplyLoraToOutput field value
// and a boolean to check if the value has been set.
func (o *LoraFinetuningConfig) GetApplyLoraToOutputOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplyLoraToOutput, true
}

// SetApplyLoraToOutput sets field value
func (o *LoraFinetuningConfig) SetApplyLoraToOutput(v bool) {
	o.ApplyLoraToOutput = v
}

// GetRank returns the Rank field value
func (o *LoraFinetuningConfig) GetRank() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rank
}

// GetRankOk returns a tuple with the Rank field value
// and a boolean to check if the value has been set.
func (o *LoraFinetuningConfig) GetRankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rank, true
}

// SetRank sets field value
func (o *LoraFinetuningConfig) SetRank(v int32) {
	o.Rank = v
}

// GetAlpha returns the Alpha field value
func (o *LoraFinetuningConfig) GetAlpha() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Alpha
}

// GetAlphaOk returns a tuple with the Alpha field value
// and a boolean to check if the value has been set.
func (o *LoraFinetuningConfig) GetAlphaOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alpha, true
}

// SetAlpha sets field value
func (o *LoraFinetuningConfig) SetAlpha(v int32) {
	o.Alpha = v
}

// GetUseDora returns the UseDora field value if set, zero value otherwise.
func (o *LoraFinetuningConfig) GetUseDora() bool {
	if o == nil || IsNil(o.UseDora) {
		var ret bool
		return ret
	}
	return *o.UseDora
}

// GetUseDoraOk returns a tuple with the UseDora field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoraFinetuningConfig) GetUseDoraOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDora) {
		return nil, false
	}
	return o.UseDora, true
}

// HasUseDora returns a boolean if a field has been set.
func (o *LoraFinetuningConfig) HasUseDora() bool {
	if o != nil && !IsNil(o.UseDora) {
		return true
	}

	return false
}

// SetUseDora gets a reference to the given bool and assigns it to the UseDora field.
func (o *LoraFinetuningConfig) SetUseDora(v bool) {
	o.UseDora = &v
}

// GetQuantizeBase returns the QuantizeBase field value if set, zero value otherwise.
func (o *LoraFinetuningConfig) GetQuantizeBase() bool {
	if o == nil || IsNil(o.QuantizeBase) {
		var ret bool
		return ret
	}
	return *o.QuantizeBase
}

// GetQuantizeBaseOk returns a tuple with the QuantizeBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoraFinetuningConfig) GetQuantizeBaseOk() (*bool, bool) {
	if o == nil || IsNil(o.QuantizeBase) {
		return nil, false
	}
	return o.QuantizeBase, true
}

// HasQuantizeBase returns a boolean if a field has been set.
func (o *LoraFinetuningConfig) HasQuantizeBase() bool {
	if o != nil && !IsNil(o.QuantizeBase) {
		return true
	}

	return false
}

// SetQuantizeBase gets a reference to the given bool and assigns it to the QuantizeBase field.
func (o *LoraFinetuningConfig) SetQuantizeBase(v bool) {
	o.QuantizeBase = &v
}

func (o LoraFinetuningConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoraFinetuningConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["lora_attn_modules"] = o.LoraAttnModules
	toSerialize["apply_lora_to_mlp"] = o.ApplyLoraToMlp
	toSerialize["apply_lora_to_output"] = o.ApplyLoraToOutput
	toSerialize["rank"] = o.Rank
	toSerialize["alpha"] = o.Alpha
	if !IsNil(o.UseDora) {
		toSerialize["use_dora"] = o.UseDora
	}
	if !IsNil(o.QuantizeBase) {
		toSerialize["quantize_base"] = o.QuantizeBase
	}
	return toSerialize, nil
}

func (o *LoraFinetuningConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"lora_attn_modules",
		"apply_lora_to_mlp",
		"apply_lora_to_output",
		"rank",
		"alpha",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoraFinetuningConfig := _LoraFinetuningConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoraFinetuningConfig)

	if err != nil {
		return err
	}

	*o = LoraFinetuningConfig(varLoraFinetuningConfig)

	return err
}

type NullableLoraFinetuningConfig struct {
	value *LoraFinetuningConfig
	isSet bool
}

func (v NullableLoraFinetuningConfig) Get() *LoraFinetuningConfig {
	return v.value
}

func (v *NullableLoraFinetuningConfig) Set(val *LoraFinetuningConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLoraFinetuningConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLoraFinetuningConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoraFinetuningConfig(val *LoraFinetuningConfig) *NullableLoraFinetuningConfig {
	return &NullableLoraFinetuningConfig{value: val, isSet: true}
}

func (v NullableLoraFinetuningConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoraFinetuningConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


