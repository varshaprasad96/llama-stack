/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SpanStatus the model 'SpanStatus'
type SpanStatus string

// List of SpanStatus
const (
	OK SpanStatus = "ok"
	ERROR SpanStatus = "error"
)

// All allowed values of SpanStatus enum
var AllowedSpanStatusEnumValues = []SpanStatus{
	"ok",
	"error",
}

func (v *SpanStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpanStatus(value)
	for _, existing := range AllowedSpanStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpanStatus", value)
}

// NewSpanStatusFromValue returns a pointer to a valid SpanStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpanStatusFromValue(v string) (*SpanStatus, error) {
	ev := SpanStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpanStatus: valid values are %v", v, AllowedSpanStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpanStatus) IsValid() bool {
	for _, existing := range AllowedSpanStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpanStatus value
func (v SpanStatus) Ptr() *SpanStatus {
	return &v
}

type NullableSpanStatus struct {
	value *SpanStatus
	isSet bool
}

func (v NullableSpanStatus) Get() *SpanStatus {
	return v.value
}

func (v *NullableSpanStatus) Set(val *SpanStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanStatus(val *SpanStatus) *NullableSpanStatus {
	return &NullableSpanStatus{value: val, isSet: true}
}

func (v NullableSpanStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

