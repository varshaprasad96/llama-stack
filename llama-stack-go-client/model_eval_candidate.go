/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// EvalCandidate - struct for EvalCandidate
type EvalCandidate struct {
	AgentCandidate *AgentCandidate
	ModelCandidate *ModelCandidate
}

// AgentCandidateAsEvalCandidate is a convenience function that returns AgentCandidate wrapped in EvalCandidate
func AgentCandidateAsEvalCandidate(v *AgentCandidate) EvalCandidate {
	return EvalCandidate{
		AgentCandidate: v,
	}
}

// ModelCandidateAsEvalCandidate is a convenience function that returns ModelCandidate wrapped in EvalCandidate
func ModelCandidateAsEvalCandidate(v *ModelCandidate) EvalCandidate {
	return EvalCandidate{
		ModelCandidate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EvalCandidate) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AgentCandidate
	err = newStrictDecoder(data).Decode(&dst.AgentCandidate)
	if err == nil {
		jsonAgentCandidate, _ := json.Marshal(dst.AgentCandidate)
		if string(jsonAgentCandidate) == "{}" { // empty struct
			dst.AgentCandidate = nil
		} else {
			if err = validator.Validate(dst.AgentCandidate); err != nil {
				dst.AgentCandidate = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentCandidate = nil
	}

	// try to unmarshal data into ModelCandidate
	err = newStrictDecoder(data).Decode(&dst.ModelCandidate)
	if err == nil {
		jsonModelCandidate, _ := json.Marshal(dst.ModelCandidate)
		if string(jsonModelCandidate) == "{}" { // empty struct
			dst.ModelCandidate = nil
		} else {
			if err = validator.Validate(dst.ModelCandidate); err != nil {
				dst.ModelCandidate = nil
			} else {
				match++
			}
		}
	} else {
		dst.ModelCandidate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AgentCandidate = nil
		dst.ModelCandidate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EvalCandidate)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EvalCandidate)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EvalCandidate) MarshalJSON() ([]byte, error) {
	if src.AgentCandidate != nil {
		return json.Marshal(&src.AgentCandidate)
	}

	if src.ModelCandidate != nil {
		return json.Marshal(&src.ModelCandidate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EvalCandidate) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AgentCandidate != nil {
		return obj.AgentCandidate
	}

	if obj.ModelCandidate != nil {
		return obj.ModelCandidate
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj EvalCandidate) GetActualInstanceValue() (interface{}) {
	if obj.AgentCandidate != nil {
		return *obj.AgentCandidate
	}

	if obj.ModelCandidate != nil {
		return *obj.ModelCandidate
	}

	// all schemas are nil
	return nil
}

type NullableEvalCandidate struct {
	value *EvalCandidate
	isSet bool
}

func (v NullableEvalCandidate) Get() *EvalCandidate {
	return v.value
}

func (v *NullableEvalCandidate) Set(val *EvalCandidate) {
	v.value = val
	v.isSet = true
}

func (v NullableEvalCandidate) IsSet() bool {
	return v.isSet
}

func (v *NullableEvalCandidate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvalCandidate(val *EvalCandidate) *NullableEvalCandidate {
	return &NullableEvalCandidate{value: val, isSet: true}
}

func (v NullableEvalCandidate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvalCandidate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


