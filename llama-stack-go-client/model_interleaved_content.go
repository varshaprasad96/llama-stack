/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// InterleavedContent - struct for InterleavedContent
type InterleavedContent struct {
	InterleavedContentItem *InterleavedContentItem
	ArrayOfInterleavedContentItem *[]InterleavedContentItem
	String *string
}

// InterleavedContentItemAsInterleavedContent is a convenience function that returns InterleavedContentItem wrapped in InterleavedContent
func InterleavedContentItemAsInterleavedContent(v *InterleavedContentItem) InterleavedContent {
	return InterleavedContent{
		InterleavedContentItem: v,
	}
}

// []InterleavedContentItemAsInterleavedContent is a convenience function that returns []InterleavedContentItem wrapped in InterleavedContent
func ArrayOfInterleavedContentItemAsInterleavedContent(v *[]InterleavedContentItem) InterleavedContent {
	return InterleavedContent{
		ArrayOfInterleavedContentItem: v,
	}
}

// stringAsInterleavedContent is a convenience function that returns string wrapped in InterleavedContent
func StringAsInterleavedContent(v *string) InterleavedContent {
	return InterleavedContent{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *InterleavedContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InterleavedContentItem
	err = newStrictDecoder(data).Decode(&dst.InterleavedContentItem)
	if err == nil {
		jsonInterleavedContentItem, _ := json.Marshal(dst.InterleavedContentItem)
		if string(jsonInterleavedContentItem) == "{}" { // empty struct
			dst.InterleavedContentItem = nil
		} else {
			if err = validator.Validate(dst.InterleavedContentItem); err != nil {
				dst.InterleavedContentItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.InterleavedContentItem = nil
	}

	// try to unmarshal data into ArrayOfInterleavedContentItem
	err = newStrictDecoder(data).Decode(&dst.ArrayOfInterleavedContentItem)
	if err == nil {
		jsonArrayOfInterleavedContentItem, _ := json.Marshal(dst.ArrayOfInterleavedContentItem)
		if string(jsonArrayOfInterleavedContentItem) == "{}" { // empty struct
			dst.ArrayOfInterleavedContentItem = nil
		} else {
			if err = validator.Validate(dst.ArrayOfInterleavedContentItem); err != nil {
				dst.ArrayOfInterleavedContentItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfInterleavedContentItem = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InterleavedContentItem = nil
		dst.ArrayOfInterleavedContentItem = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(InterleavedContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(InterleavedContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InterleavedContent) MarshalJSON() ([]byte, error) {
	if src.InterleavedContentItem != nil {
		return json.Marshal(&src.InterleavedContentItem)
	}

	if src.ArrayOfInterleavedContentItem != nil {
		return json.Marshal(&src.ArrayOfInterleavedContentItem)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InterleavedContent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InterleavedContentItem != nil {
		return obj.InterleavedContentItem
	}

	if obj.ArrayOfInterleavedContentItem != nil {
		return obj.ArrayOfInterleavedContentItem
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj InterleavedContent) GetActualInstanceValue() (interface{}) {
	if obj.InterleavedContentItem != nil {
		return *obj.InterleavedContentItem
	}

	if obj.ArrayOfInterleavedContentItem != nil {
		return *obj.ArrayOfInterleavedContentItem
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableInterleavedContent struct {
	value *InterleavedContent
	isSet bool
}

func (v NullableInterleavedContent) Get() *InterleavedContent {
	return v.value
}

func (v *NullableInterleavedContent) Set(val *InterleavedContent) {
	v.value = val
	v.isSet = true
}

func (v NullableInterleavedContent) IsSet() bool {
	return v.isSet
}

func (v *NullableInterleavedContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterleavedContent(val *InterleavedContent) *NullableInterleavedContent {
	return &NullableInterleavedContent{value: val, isSet: true}
}

func (v NullableInterleavedContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterleavedContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


