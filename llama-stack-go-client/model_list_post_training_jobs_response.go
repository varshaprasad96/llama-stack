/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ListPostTrainingJobsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPostTrainingJobsResponse{}

// ListPostTrainingJobsResponse struct for ListPostTrainingJobsResponse
type ListPostTrainingJobsResponse struct {
	Data []PostTrainingJob1 `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _ListPostTrainingJobsResponse ListPostTrainingJobsResponse

// NewListPostTrainingJobsResponse instantiates a new ListPostTrainingJobsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPostTrainingJobsResponse(data []PostTrainingJob1) *ListPostTrainingJobsResponse {
	this := ListPostTrainingJobsResponse{}
	this.Data = data
	return &this
}

// NewListPostTrainingJobsResponseWithDefaults instantiates a new ListPostTrainingJobsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPostTrainingJobsResponseWithDefaults() *ListPostTrainingJobsResponse {
	this := ListPostTrainingJobsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListPostTrainingJobsResponse) GetData() []PostTrainingJob1 {
	if o == nil {
		var ret []PostTrainingJob1
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListPostTrainingJobsResponse) GetDataOk() ([]PostTrainingJob1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListPostTrainingJobsResponse) SetData(v []PostTrainingJob1) {
	o.Data = v
}

func (o ListPostTrainingJobsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPostTrainingJobsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListPostTrainingJobsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListPostTrainingJobsResponse := _ListPostTrainingJobsResponse{}

	err = json.Unmarshal(data, &varListPostTrainingJobsResponse)

	if err != nil {
		return err
	}

	*o = ListPostTrainingJobsResponse(varListPostTrainingJobsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListPostTrainingJobsResponse struct {
	value *ListPostTrainingJobsResponse
	isSet bool
}

func (v NullableListPostTrainingJobsResponse) Get() *ListPostTrainingJobsResponse {
	return v.value
}

func (v *NullableListPostTrainingJobsResponse) Set(val *ListPostTrainingJobsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListPostTrainingJobsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListPostTrainingJobsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPostTrainingJobsResponse(val *ListPostTrainingJobsResponse) *NullableListPostTrainingJobsResponse {
	return &NullableListPostTrainingJobsResponse{value: val, isSet: true}
}

func (v NullableListPostTrainingJobsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPostTrainingJobsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


