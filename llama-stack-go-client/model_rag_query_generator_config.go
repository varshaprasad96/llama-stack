/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RAGQueryGeneratorConfig - struct for RAGQueryGeneratorConfig
type RAGQueryGeneratorConfig struct {
	DefaultRAGQueryGeneratorConfig *DefaultRAGQueryGeneratorConfig
	LLMRAGQueryGeneratorConfig *LLMRAGQueryGeneratorConfig
}

// DefaultRAGQueryGeneratorConfigAsRAGQueryGeneratorConfig is a convenience function that returns DefaultRAGQueryGeneratorConfig wrapped in RAGQueryGeneratorConfig
func DefaultRAGQueryGeneratorConfigAsRAGQueryGeneratorConfig(v *DefaultRAGQueryGeneratorConfig) RAGQueryGeneratorConfig {
	return RAGQueryGeneratorConfig{
		DefaultRAGQueryGeneratorConfig: v,
	}
}

// LLMRAGQueryGeneratorConfigAsRAGQueryGeneratorConfig is a convenience function that returns LLMRAGQueryGeneratorConfig wrapped in RAGQueryGeneratorConfig
func LLMRAGQueryGeneratorConfigAsRAGQueryGeneratorConfig(v *LLMRAGQueryGeneratorConfig) RAGQueryGeneratorConfig {
	return RAGQueryGeneratorConfig{
		LLMRAGQueryGeneratorConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RAGQueryGeneratorConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DefaultRAGQueryGeneratorConfig
	err = newStrictDecoder(data).Decode(&dst.DefaultRAGQueryGeneratorConfig)
	if err == nil {
		jsonDefaultRAGQueryGeneratorConfig, _ := json.Marshal(dst.DefaultRAGQueryGeneratorConfig)
		if string(jsonDefaultRAGQueryGeneratorConfig) == "{}" { // empty struct
			dst.DefaultRAGQueryGeneratorConfig = nil
		} else {
			if err = validator.Validate(dst.DefaultRAGQueryGeneratorConfig); err != nil {
				dst.DefaultRAGQueryGeneratorConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultRAGQueryGeneratorConfig = nil
	}

	// try to unmarshal data into LLMRAGQueryGeneratorConfig
	err = newStrictDecoder(data).Decode(&dst.LLMRAGQueryGeneratorConfig)
	if err == nil {
		jsonLLMRAGQueryGeneratorConfig, _ := json.Marshal(dst.LLMRAGQueryGeneratorConfig)
		if string(jsonLLMRAGQueryGeneratorConfig) == "{}" { // empty struct
			dst.LLMRAGQueryGeneratorConfig = nil
		} else {
			if err = validator.Validate(dst.LLMRAGQueryGeneratorConfig); err != nil {
				dst.LLMRAGQueryGeneratorConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.LLMRAGQueryGeneratorConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DefaultRAGQueryGeneratorConfig = nil
		dst.LLMRAGQueryGeneratorConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RAGQueryGeneratorConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RAGQueryGeneratorConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RAGQueryGeneratorConfig) MarshalJSON() ([]byte, error) {
	if src.DefaultRAGQueryGeneratorConfig != nil {
		return json.Marshal(&src.DefaultRAGQueryGeneratorConfig)
	}

	if src.LLMRAGQueryGeneratorConfig != nil {
		return json.Marshal(&src.LLMRAGQueryGeneratorConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RAGQueryGeneratorConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DefaultRAGQueryGeneratorConfig != nil {
		return obj.DefaultRAGQueryGeneratorConfig
	}

	if obj.LLMRAGQueryGeneratorConfig != nil {
		return obj.LLMRAGQueryGeneratorConfig
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RAGQueryGeneratorConfig) GetActualInstanceValue() (interface{}) {
	if obj.DefaultRAGQueryGeneratorConfig != nil {
		return *obj.DefaultRAGQueryGeneratorConfig
	}

	if obj.LLMRAGQueryGeneratorConfig != nil {
		return *obj.LLMRAGQueryGeneratorConfig
	}

	// all schemas are nil
	return nil
}

type NullableRAGQueryGeneratorConfig struct {
	value *RAGQueryGeneratorConfig
	isSet bool
}

func (v NullableRAGQueryGeneratorConfig) Get() *RAGQueryGeneratorConfig {
	return v.value
}

func (v *NullableRAGQueryGeneratorConfig) Set(val *RAGQueryGeneratorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRAGQueryGeneratorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRAGQueryGeneratorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRAGQueryGeneratorConfig(val *RAGQueryGeneratorConfig) *NullableRAGQueryGeneratorConfig {
	return &NullableRAGQueryGeneratorConfig{value: val, isSet: true}
}

func (v NullableRAGQueryGeneratorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRAGQueryGeneratorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


