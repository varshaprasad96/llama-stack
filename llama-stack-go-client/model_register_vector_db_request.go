/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterVectorDbRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterVectorDbRequest{}

// RegisterVectorDbRequest struct for RegisterVectorDbRequest
type RegisterVectorDbRequest struct {
	VectorDbId string `json:"vector_db_id"`
	EmbeddingModel string `json:"embedding_model"`
	EmbeddingDimension *int32 `json:"embedding_dimension,omitempty"`
	ProviderId *string `json:"provider_id,omitempty"`
	ProviderVectorDbId *string `json:"provider_vector_db_id,omitempty"`
}

type _RegisterVectorDbRequest RegisterVectorDbRequest

// NewRegisterVectorDbRequest instantiates a new RegisterVectorDbRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterVectorDbRequest(vectorDbId string, embeddingModel string) *RegisterVectorDbRequest {
	this := RegisterVectorDbRequest{}
	this.VectorDbId = vectorDbId
	this.EmbeddingModel = embeddingModel
	return &this
}

// NewRegisterVectorDbRequestWithDefaults instantiates a new RegisterVectorDbRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterVectorDbRequestWithDefaults() *RegisterVectorDbRequest {
	this := RegisterVectorDbRequest{}
	return &this
}

// GetVectorDbId returns the VectorDbId field value
func (o *RegisterVectorDbRequest) GetVectorDbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VectorDbId
}

// GetVectorDbIdOk returns a tuple with the VectorDbId field value
// and a boolean to check if the value has been set.
func (o *RegisterVectorDbRequest) GetVectorDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VectorDbId, true
}

// SetVectorDbId sets field value
func (o *RegisterVectorDbRequest) SetVectorDbId(v string) {
	o.VectorDbId = v
}

// GetEmbeddingModel returns the EmbeddingModel field value
func (o *RegisterVectorDbRequest) GetEmbeddingModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmbeddingModel
}

// GetEmbeddingModelOk returns a tuple with the EmbeddingModel field value
// and a boolean to check if the value has been set.
func (o *RegisterVectorDbRequest) GetEmbeddingModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmbeddingModel, true
}

// SetEmbeddingModel sets field value
func (o *RegisterVectorDbRequest) SetEmbeddingModel(v string) {
	o.EmbeddingModel = v
}

// GetEmbeddingDimension returns the EmbeddingDimension field value if set, zero value otherwise.
func (o *RegisterVectorDbRequest) GetEmbeddingDimension() int32 {
	if o == nil || IsNil(o.EmbeddingDimension) {
		var ret int32
		return ret
	}
	return *o.EmbeddingDimension
}

// GetEmbeddingDimensionOk returns a tuple with the EmbeddingDimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterVectorDbRequest) GetEmbeddingDimensionOk() (*int32, bool) {
	if o == nil || IsNil(o.EmbeddingDimension) {
		return nil, false
	}
	return o.EmbeddingDimension, true
}

// HasEmbeddingDimension returns a boolean if a field has been set.
func (o *RegisterVectorDbRequest) HasEmbeddingDimension() bool {
	if o != nil && !IsNil(o.EmbeddingDimension) {
		return true
	}

	return false
}

// SetEmbeddingDimension gets a reference to the given int32 and assigns it to the EmbeddingDimension field.
func (o *RegisterVectorDbRequest) SetEmbeddingDimension(v int32) {
	o.EmbeddingDimension = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *RegisterVectorDbRequest) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterVectorDbRequest) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *RegisterVectorDbRequest) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *RegisterVectorDbRequest) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetProviderVectorDbId returns the ProviderVectorDbId field value if set, zero value otherwise.
func (o *RegisterVectorDbRequest) GetProviderVectorDbId() string {
	if o == nil || IsNil(o.ProviderVectorDbId) {
		var ret string
		return ret
	}
	return *o.ProviderVectorDbId
}

// GetProviderVectorDbIdOk returns a tuple with the ProviderVectorDbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterVectorDbRequest) GetProviderVectorDbIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderVectorDbId) {
		return nil, false
	}
	return o.ProviderVectorDbId, true
}

// HasProviderVectorDbId returns a boolean if a field has been set.
func (o *RegisterVectorDbRequest) HasProviderVectorDbId() bool {
	if o != nil && !IsNil(o.ProviderVectorDbId) {
		return true
	}

	return false
}

// SetProviderVectorDbId gets a reference to the given string and assigns it to the ProviderVectorDbId field.
func (o *RegisterVectorDbRequest) SetProviderVectorDbId(v string) {
	o.ProviderVectorDbId = &v
}

func (o RegisterVectorDbRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterVectorDbRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vector_db_id"] = o.VectorDbId
	toSerialize["embedding_model"] = o.EmbeddingModel
	if !IsNil(o.EmbeddingDimension) {
		toSerialize["embedding_dimension"] = o.EmbeddingDimension
	}
	if !IsNil(o.ProviderId) {
		toSerialize["provider_id"] = o.ProviderId
	}
	if !IsNil(o.ProviderVectorDbId) {
		toSerialize["provider_vector_db_id"] = o.ProviderVectorDbId
	}
	return toSerialize, nil
}

func (o *RegisterVectorDbRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vector_db_id",
		"embedding_model",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterVectorDbRequest := _RegisterVectorDbRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterVectorDbRequest)

	if err != nil {
		return err
	}

	*o = RegisterVectorDbRequest(varRegisterVectorDbRequest)

	return err
}

type NullableRegisterVectorDbRequest struct {
	value *RegisterVectorDbRequest
	isSet bool
}

func (v NullableRegisterVectorDbRequest) Get() *RegisterVectorDbRequest {
	return v.value
}

func (v *NullableRegisterVectorDbRequest) Set(val *RegisterVectorDbRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterVectorDbRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterVectorDbRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterVectorDbRequest(val *RegisterVectorDbRequest) *NullableRegisterVectorDbRequest {
	return &NullableRegisterVectorDbRequest{value: val, isSet: true}
}

func (v NullableRegisterVectorDbRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterVectorDbRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


