/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatCompletionResponseEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionResponseEvent{}

// ChatCompletionResponseEvent An event during chat completion generation.
type ChatCompletionResponseEvent struct {
	// Type of the event
	EventType string `json:"event_type"`
	// Content generated since last event. This can be one or more tokens, or a tool call.
	Delta ContentDelta `json:"delta"`
	// Optional log probabilities for generated tokens
	Logprobs []TokenLogProbs `json:"logprobs,omitempty"`
	// Optional reason why generation stopped, if complete
	StopReason *string `json:"stop_reason,omitempty"`
}

type _ChatCompletionResponseEvent ChatCompletionResponseEvent

// NewChatCompletionResponseEvent instantiates a new ChatCompletionResponseEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionResponseEvent(eventType string, delta ContentDelta) *ChatCompletionResponseEvent {
	this := ChatCompletionResponseEvent{}
	this.EventType = eventType
	this.Delta = delta
	return &this
}

// NewChatCompletionResponseEventWithDefaults instantiates a new ChatCompletionResponseEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionResponseEventWithDefaults() *ChatCompletionResponseEvent {
	this := ChatCompletionResponseEvent{}
	return &this
}

// GetEventType returns the EventType field value
func (o *ChatCompletionResponseEvent) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionResponseEvent) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *ChatCompletionResponseEvent) SetEventType(v string) {
	o.EventType = v
}

// GetDelta returns the Delta field value
func (o *ChatCompletionResponseEvent) GetDelta() ContentDelta {
	if o == nil {
		var ret ContentDelta
		return ret
	}

	return o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionResponseEvent) GetDeltaOk() (*ContentDelta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delta, true
}

// SetDelta sets field value
func (o *ChatCompletionResponseEvent) SetDelta(v ContentDelta) {
	o.Delta = v
}

// GetLogprobs returns the Logprobs field value if set, zero value otherwise.
func (o *ChatCompletionResponseEvent) GetLogprobs() []TokenLogProbs {
	if o == nil || IsNil(o.Logprobs) {
		var ret []TokenLogProbs
		return ret
	}
	return o.Logprobs
}

// GetLogprobsOk returns a tuple with the Logprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionResponseEvent) GetLogprobsOk() ([]TokenLogProbs, bool) {
	if o == nil || IsNil(o.Logprobs) {
		return nil, false
	}
	return o.Logprobs, true
}

// HasLogprobs returns a boolean if a field has been set.
func (o *ChatCompletionResponseEvent) HasLogprobs() bool {
	if o != nil && !IsNil(o.Logprobs) {
		return true
	}

	return false
}

// SetLogprobs gets a reference to the given []TokenLogProbs and assigns it to the Logprobs field.
func (o *ChatCompletionResponseEvent) SetLogprobs(v []TokenLogProbs) {
	o.Logprobs = v
}

// GetStopReason returns the StopReason field value if set, zero value otherwise.
func (o *ChatCompletionResponseEvent) GetStopReason() string {
	if o == nil || IsNil(o.StopReason) {
		var ret string
		return ret
	}
	return *o.StopReason
}

// GetStopReasonOk returns a tuple with the StopReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionResponseEvent) GetStopReasonOk() (*string, bool) {
	if o == nil || IsNil(o.StopReason) {
		return nil, false
	}
	return o.StopReason, true
}

// HasStopReason returns a boolean if a field has been set.
func (o *ChatCompletionResponseEvent) HasStopReason() bool {
	if o != nil && !IsNil(o.StopReason) {
		return true
	}

	return false
}

// SetStopReason gets a reference to the given string and assigns it to the StopReason field.
func (o *ChatCompletionResponseEvent) SetStopReason(v string) {
	o.StopReason = &v
}

func (o ChatCompletionResponseEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionResponseEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_type"] = o.EventType
	toSerialize["delta"] = o.Delta
	if !IsNil(o.Logprobs) {
		toSerialize["logprobs"] = o.Logprobs
	}
	if !IsNil(o.StopReason) {
		toSerialize["stop_reason"] = o.StopReason
	}
	return toSerialize, nil
}

func (o *ChatCompletionResponseEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_type",
		"delta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatCompletionResponseEvent := _ChatCompletionResponseEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatCompletionResponseEvent)

	if err != nil {
		return err
	}

	*o = ChatCompletionResponseEvent(varChatCompletionResponseEvent)

	return err
}

type NullableChatCompletionResponseEvent struct {
	value *ChatCompletionResponseEvent
	isSet bool
}

func (v NullableChatCompletionResponseEvent) Get() *ChatCompletionResponseEvent {
	return v.value
}

func (v *NullableChatCompletionResponseEvent) Set(val *ChatCompletionResponseEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionResponseEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionResponseEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionResponseEvent(val *ChatCompletionResponseEvent) *NullableChatCompletionResponseEvent {
	return &NullableChatCompletionResponseEvent{value: val, isSet: true}
}

func (v NullableChatCompletionResponseEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionResponseEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


