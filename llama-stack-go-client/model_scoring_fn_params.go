/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ScoringFnParams - struct for ScoringFnParams
type ScoringFnParams struct {
	BasicScoringFnParams *BasicScoringFnParams
	LLMAsJudgeScoringFnParams *LLMAsJudgeScoringFnParams
	RegexParserScoringFnParams *RegexParserScoringFnParams
}

// BasicScoringFnParamsAsScoringFnParams is a convenience function that returns BasicScoringFnParams wrapped in ScoringFnParams
func BasicScoringFnParamsAsScoringFnParams(v *BasicScoringFnParams) ScoringFnParams {
	return ScoringFnParams{
		BasicScoringFnParams: v,
	}
}

// LLMAsJudgeScoringFnParamsAsScoringFnParams is a convenience function that returns LLMAsJudgeScoringFnParams wrapped in ScoringFnParams
func LLMAsJudgeScoringFnParamsAsScoringFnParams(v *LLMAsJudgeScoringFnParams) ScoringFnParams {
	return ScoringFnParams{
		LLMAsJudgeScoringFnParams: v,
	}
}

// RegexParserScoringFnParamsAsScoringFnParams is a convenience function that returns RegexParserScoringFnParams wrapped in ScoringFnParams
func RegexParserScoringFnParamsAsScoringFnParams(v *RegexParserScoringFnParams) ScoringFnParams {
	return ScoringFnParams{
		RegexParserScoringFnParams: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ScoringFnParams) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BasicScoringFnParams
	err = newStrictDecoder(data).Decode(&dst.BasicScoringFnParams)
	if err == nil {
		jsonBasicScoringFnParams, _ := json.Marshal(dst.BasicScoringFnParams)
		if string(jsonBasicScoringFnParams) == "{}" { // empty struct
			dst.BasicScoringFnParams = nil
		} else {
			if err = validator.Validate(dst.BasicScoringFnParams); err != nil {
				dst.BasicScoringFnParams = nil
			} else {
				match++
			}
		}
	} else {
		dst.BasicScoringFnParams = nil
	}

	// try to unmarshal data into LLMAsJudgeScoringFnParams
	err = newStrictDecoder(data).Decode(&dst.LLMAsJudgeScoringFnParams)
	if err == nil {
		jsonLLMAsJudgeScoringFnParams, _ := json.Marshal(dst.LLMAsJudgeScoringFnParams)
		if string(jsonLLMAsJudgeScoringFnParams) == "{}" { // empty struct
			dst.LLMAsJudgeScoringFnParams = nil
		} else {
			if err = validator.Validate(dst.LLMAsJudgeScoringFnParams); err != nil {
				dst.LLMAsJudgeScoringFnParams = nil
			} else {
				match++
			}
		}
	} else {
		dst.LLMAsJudgeScoringFnParams = nil
	}

	// try to unmarshal data into RegexParserScoringFnParams
	err = newStrictDecoder(data).Decode(&dst.RegexParserScoringFnParams)
	if err == nil {
		jsonRegexParserScoringFnParams, _ := json.Marshal(dst.RegexParserScoringFnParams)
		if string(jsonRegexParserScoringFnParams) == "{}" { // empty struct
			dst.RegexParserScoringFnParams = nil
		} else {
			if err = validator.Validate(dst.RegexParserScoringFnParams); err != nil {
				dst.RegexParserScoringFnParams = nil
			} else {
				match++
			}
		}
	} else {
		dst.RegexParserScoringFnParams = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BasicScoringFnParams = nil
		dst.LLMAsJudgeScoringFnParams = nil
		dst.RegexParserScoringFnParams = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ScoringFnParams)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ScoringFnParams)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ScoringFnParams) MarshalJSON() ([]byte, error) {
	if src.BasicScoringFnParams != nil {
		return json.Marshal(&src.BasicScoringFnParams)
	}

	if src.LLMAsJudgeScoringFnParams != nil {
		return json.Marshal(&src.LLMAsJudgeScoringFnParams)
	}

	if src.RegexParserScoringFnParams != nil {
		return json.Marshal(&src.RegexParserScoringFnParams)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ScoringFnParams) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BasicScoringFnParams != nil {
		return obj.BasicScoringFnParams
	}

	if obj.LLMAsJudgeScoringFnParams != nil {
		return obj.LLMAsJudgeScoringFnParams
	}

	if obj.RegexParserScoringFnParams != nil {
		return obj.RegexParserScoringFnParams
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ScoringFnParams) GetActualInstanceValue() (interface{}) {
	if obj.BasicScoringFnParams != nil {
		return *obj.BasicScoringFnParams
	}

	if obj.LLMAsJudgeScoringFnParams != nil {
		return *obj.LLMAsJudgeScoringFnParams
	}

	if obj.RegexParserScoringFnParams != nil {
		return *obj.RegexParserScoringFnParams
	}

	// all schemas are nil
	return nil
}

type NullableScoringFnParams struct {
	value *ScoringFnParams
	isSet bool
}

func (v NullableScoringFnParams) Get() *ScoringFnParams {
	return v.value
}

func (v *NullableScoringFnParams) Set(val *ScoringFnParams) {
	v.value = val
	v.isSet = true
}

func (v NullableScoringFnParams) IsSet() bool {
	return v.isSet
}

func (v *NullableScoringFnParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoringFnParams(val *ScoringFnParams) *NullableScoringFnParams {
	return &NullableScoringFnParams{value: val, isSet: true}
}

func (v NullableScoringFnParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoringFnParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


