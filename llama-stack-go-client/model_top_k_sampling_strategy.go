/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TopKSamplingStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopKSamplingStrategy{}

// TopKSamplingStrategy struct for TopKSamplingStrategy
type TopKSamplingStrategy struct {
	Type string `json:"type"`
	TopK int32 `json:"top_k"`
}

type _TopKSamplingStrategy TopKSamplingStrategy

// NewTopKSamplingStrategy instantiates a new TopKSamplingStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopKSamplingStrategy(type_ string, topK int32) *TopKSamplingStrategy {
	this := TopKSamplingStrategy{}
	this.Type = type_
	this.TopK = topK
	return &this
}

// NewTopKSamplingStrategyWithDefaults instantiates a new TopKSamplingStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopKSamplingStrategyWithDefaults() *TopKSamplingStrategy {
	this := TopKSamplingStrategy{}
	var type_ string = "top_k"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *TopKSamplingStrategy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TopKSamplingStrategy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TopKSamplingStrategy) SetType(v string) {
	o.Type = v
}

// GetTopK returns the TopK field value
func (o *TopKSamplingStrategy) GetTopK() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TopK
}

// GetTopKOk returns a tuple with the TopK field value
// and a boolean to check if the value has been set.
func (o *TopKSamplingStrategy) GetTopKOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopK, true
}

// SetTopK sets field value
func (o *TopKSamplingStrategy) SetTopK(v int32) {
	o.TopK = v
}

func (o TopKSamplingStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopKSamplingStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["top_k"] = o.TopK
	return toSerialize, nil
}

func (o *TopKSamplingStrategy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"top_k",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTopKSamplingStrategy := _TopKSamplingStrategy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTopKSamplingStrategy)

	if err != nil {
		return err
	}

	*o = TopKSamplingStrategy(varTopKSamplingStrategy)

	return err
}

type NullableTopKSamplingStrategy struct {
	value *TopKSamplingStrategy
	isSet bool
}

func (v NullableTopKSamplingStrategy) Get() *TopKSamplingStrategy {
	return v.value
}

func (v *NullableTopKSamplingStrategy) Set(val *TopKSamplingStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableTopKSamplingStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableTopKSamplingStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopKSamplingStrategy(val *TopKSamplingStrategy) *NullableTopKSamplingStrategy {
	return &NullableTopKSamplingStrategy{value: val, isSet: true}
}

func (v NullableTopKSamplingStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopKSamplingStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


