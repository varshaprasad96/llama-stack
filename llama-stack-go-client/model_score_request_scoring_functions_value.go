/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ScoreRequestScoringFunctionsValue - struct for ScoreRequestScoringFunctionsValue
type ScoreRequestScoringFunctionsValue struct {
	ScoringFnParams *ScoringFnParams
}

// ScoringFnParamsAsScoreRequestScoringFunctionsValue is a convenience function that returns ScoringFnParams wrapped in ScoreRequestScoringFunctionsValue
func ScoringFnParamsAsScoreRequestScoringFunctionsValue(v *ScoringFnParams) ScoreRequestScoringFunctionsValue {
	return ScoreRequestScoringFunctionsValue{
		ScoringFnParams: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ScoreRequestScoringFunctionsValue) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into ScoringFnParams
	err = newStrictDecoder(data).Decode(&dst.ScoringFnParams)
	if err == nil {
		jsonScoringFnParams, _ := json.Marshal(dst.ScoringFnParams)
		if string(jsonScoringFnParams) == "{}" { // empty struct
			dst.ScoringFnParams = nil
		} else {
			if err = validator.Validate(dst.ScoringFnParams); err != nil {
				dst.ScoringFnParams = nil
			} else {
				match++
			}
		}
	} else {
		dst.ScoringFnParams = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ScoringFnParams = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ScoreRequestScoringFunctionsValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ScoreRequestScoringFunctionsValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ScoreRequestScoringFunctionsValue) MarshalJSON() ([]byte, error) {
	if src.ScoringFnParams != nil {
		return json.Marshal(&src.ScoringFnParams)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ScoreRequestScoringFunctionsValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ScoringFnParams != nil {
		return obj.ScoringFnParams
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ScoreRequestScoringFunctionsValue) GetActualInstanceValue() (interface{}) {
	if obj.ScoringFnParams != nil {
		return *obj.ScoringFnParams
	}

	// all schemas are nil
	return nil
}

type NullableScoreRequestScoringFunctionsValue struct {
	value *ScoreRequestScoringFunctionsValue
	isSet bool
}

func (v NullableScoreRequestScoringFunctionsValue) Get() *ScoreRequestScoringFunctionsValue {
	return v.value
}

func (v *NullableScoreRequestScoringFunctionsValue) Set(val *ScoreRequestScoringFunctionsValue) {
	v.value = val
	v.isSet = true
}

func (v NullableScoreRequestScoringFunctionsValue) IsSet() bool {
	return v.isSet
}

func (v *NullableScoreRequestScoringFunctionsValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoreRequestScoringFunctionsValue(val *ScoreRequestScoringFunctionsValue) *NullableScoreRequestScoringFunctionsValue {
	return &NullableScoreRequestScoringFunctionsValue{value: val, isSet: true}
}

func (v NullableScoreRequestScoringFunctionsValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoreRequestScoringFunctionsValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


