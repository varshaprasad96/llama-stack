/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScoringResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScoringResult{}

// ScoringResult A scoring result for a single row.
type ScoringResult struct {
	// The scoring result for each row. Each row is a map of column name to value.
	ScoreRows []map[string]AppendRowsRequestRowsInnerValue `json:"score_rows"`
	// Map of metric name to aggregated value
	AggregatedResults map[string]AppendRowsRequestRowsInnerValue `json:"aggregated_results"`
}

type _ScoringResult ScoringResult

// NewScoringResult instantiates a new ScoringResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScoringResult(scoreRows []map[string]AppendRowsRequestRowsInnerValue, aggregatedResults map[string]AppendRowsRequestRowsInnerValue) *ScoringResult {
	this := ScoringResult{}
	this.ScoreRows = scoreRows
	this.AggregatedResults = aggregatedResults
	return &this
}

// NewScoringResultWithDefaults instantiates a new ScoringResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoringResultWithDefaults() *ScoringResult {
	this := ScoringResult{}
	return &this
}

// GetScoreRows returns the ScoreRows field value
func (o *ScoringResult) GetScoreRows() []map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret []map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.ScoreRows
}

// GetScoreRowsOk returns a tuple with the ScoreRows field value
// and a boolean to check if the value has been set.
func (o *ScoringResult) GetScoreRowsOk() ([]map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScoreRows, true
}

// SetScoreRows sets field value
func (o *ScoringResult) SetScoreRows(v []map[string]AppendRowsRequestRowsInnerValue) {
	o.ScoreRows = v
}

// GetAggregatedResults returns the AggregatedResults field value
func (o *ScoringResult) GetAggregatedResults() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.AggregatedResults
}

// GetAggregatedResultsOk returns a tuple with the AggregatedResults field value
// and a boolean to check if the value has been set.
func (o *ScoringResult) GetAggregatedResultsOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.AggregatedResults, true
}

// SetAggregatedResults sets field value
func (o *ScoringResult) SetAggregatedResults(v map[string]AppendRowsRequestRowsInnerValue) {
	o.AggregatedResults = v
}

func (o ScoringResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScoringResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["score_rows"] = o.ScoreRows
	toSerialize["aggregated_results"] = o.AggregatedResults
	return toSerialize, nil
}

func (o *ScoringResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"score_rows",
		"aggregated_results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScoringResult := _ScoringResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScoringResult)

	if err != nil {
		return err
	}

	*o = ScoringResult(varScoringResult)

	return err
}

type NullableScoringResult struct {
	value *ScoringResult
	isSet bool
}

func (v NullableScoringResult) Get() *ScoringResult {
	return v.value
}

func (v *NullableScoringResult) Set(val *ScoringResult) {
	v.value = val
	v.isSet = true
}

func (v NullableScoringResult) IsSet() bool {
	return v.isSet
}

func (v *NullableScoringResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoringResult(val *ScoringResult) *NullableScoringResult {
	return &NullableScoringResult{value: val, isSet: true}
}

func (v NullableScoringResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoringResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


