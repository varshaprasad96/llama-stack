/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RAGDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RAGDocument{}

// RAGDocument A document to be used for document ingestion in the RAG Tool.
type RAGDocument struct {
	// The unique identifier for the document.
	DocumentId string `json:"document_id"`
	Content RAGDocumentContent `json:"content"`
	// The MIME type of the document.
	MimeType *string `json:"mime_type,omitempty"`
	// Additional metadata for the document.
	Metadata map[string]AppendRowsRequestRowsInnerValue `json:"metadata"`
}

type _RAGDocument RAGDocument

// NewRAGDocument instantiates a new RAGDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRAGDocument(documentId string, content RAGDocumentContent, metadata map[string]AppendRowsRequestRowsInnerValue) *RAGDocument {
	this := RAGDocument{}
	this.DocumentId = documentId
	this.Content = content
	this.Metadata = metadata
	return &this
}

// NewRAGDocumentWithDefaults instantiates a new RAGDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRAGDocumentWithDefaults() *RAGDocument {
	this := RAGDocument{}
	return &this
}

// GetDocumentId returns the DocumentId field value
func (o *RAGDocument) GetDocumentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value
// and a boolean to check if the value has been set.
func (o *RAGDocument) GetDocumentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentId, true
}

// SetDocumentId sets field value
func (o *RAGDocument) SetDocumentId(v string) {
	o.DocumentId = v
}

// GetContent returns the Content field value
func (o *RAGDocument) GetContent() RAGDocumentContent {
	if o == nil {
		var ret RAGDocumentContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *RAGDocument) GetContentOk() (*RAGDocumentContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *RAGDocument) SetContent(v RAGDocumentContent) {
	o.Content = v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *RAGDocument) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RAGDocument) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *RAGDocument) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *RAGDocument) SetMimeType(v string) {
	o.MimeType = &v
}

// GetMetadata returns the Metadata field value
func (o *RAGDocument) GetMetadata() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *RAGDocument) GetMetadataOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *RAGDocument) SetMetadata(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Metadata = v
}

func (o RAGDocument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RAGDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["document_id"] = o.DocumentId
	toSerialize["content"] = o.Content
	if !IsNil(o.MimeType) {
		toSerialize["mime_type"] = o.MimeType
	}
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *RAGDocument) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"document_id",
		"content",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRAGDocument := _RAGDocument{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRAGDocument)

	if err != nil {
		return err
	}

	*o = RAGDocument(varRAGDocument)

	return err
}

type NullableRAGDocument struct {
	value *RAGDocument
	isSet bool
}

func (v NullableRAGDocument) Get() *RAGDocument {
	return v.value
}

func (v *NullableRAGDocument) Set(val *RAGDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableRAGDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableRAGDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRAGDocument(val *RAGDocument) *NullableRAGDocument {
	return &NullableRAGDocument{value: val, isSet: true}
}

func (v NullableRAGDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRAGDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


