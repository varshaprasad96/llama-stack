/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RouteInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteInfo{}

// RouteInfo struct for RouteInfo
type RouteInfo struct {
	Route string `json:"route"`
	Method string `json:"method"`
	ProviderTypes []string `json:"provider_types"`
}

type _RouteInfo RouteInfo

// NewRouteInfo instantiates a new RouteInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteInfo(route string, method string, providerTypes []string) *RouteInfo {
	this := RouteInfo{}
	this.Route = route
	this.Method = method
	this.ProviderTypes = providerTypes
	return &this
}

// NewRouteInfoWithDefaults instantiates a new RouteInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteInfoWithDefaults() *RouteInfo {
	this := RouteInfo{}
	return &this
}

// GetRoute returns the Route field value
func (o *RouteInfo) GetRoute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Route
}

// GetRouteOk returns a tuple with the Route field value
// and a boolean to check if the value has been set.
func (o *RouteInfo) GetRouteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Route, true
}

// SetRoute sets field value
func (o *RouteInfo) SetRoute(v string) {
	o.Route = v
}

// GetMethod returns the Method field value
func (o *RouteInfo) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *RouteInfo) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *RouteInfo) SetMethod(v string) {
	o.Method = v
}

// GetProviderTypes returns the ProviderTypes field value
func (o *RouteInfo) GetProviderTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProviderTypes
}

// GetProviderTypesOk returns a tuple with the ProviderTypes field value
// and a boolean to check if the value has been set.
func (o *RouteInfo) GetProviderTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProviderTypes, true
}

// SetProviderTypes sets field value
func (o *RouteInfo) SetProviderTypes(v []string) {
	o.ProviderTypes = v
}

func (o RouteInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["route"] = o.Route
	toSerialize["method"] = o.Method
	toSerialize["provider_types"] = o.ProviderTypes
	return toSerialize, nil
}

func (o *RouteInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"route",
		"method",
		"provider_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteInfo := _RouteInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRouteInfo)

	if err != nil {
		return err
	}

	*o = RouteInfo(varRouteInfo)

	return err
}

type NullableRouteInfo struct {
	value *RouteInfo
	isSet bool
}

func (v NullableRouteInfo) Get() *RouteInfo {
	return v.value
}

func (v *NullableRouteInfo) Set(val *RouteInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteInfo(val *RouteInfo) *NullableRouteInfo {
	return &NullableRouteInfo{value: val, isSet: true}
}

func (v NullableRouteInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


