/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Tool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tool{}

// Tool struct for Tool
type Tool struct {
	Identifier string `json:"identifier"`
	ProviderResourceId string `json:"provider_resource_id"`
	ProviderId string `json:"provider_id"`
	Type string `json:"type"`
	ToolgroupId string `json:"toolgroup_id"`
	ToolHost ToolHost `json:"tool_host"`
	Description string `json:"description"`
	Parameters []ToolParameter `json:"parameters"`
	Metadata map[string]AppendRowsRequestRowsInnerValue `json:"metadata,omitempty"`
}

type _Tool Tool

// NewTool instantiates a new Tool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTool(identifier string, providerResourceId string, providerId string, type_ string, toolgroupId string, toolHost ToolHost, description string, parameters []ToolParameter) *Tool {
	this := Tool{}
	this.Identifier = identifier
	this.ProviderResourceId = providerResourceId
	this.ProviderId = providerId
	this.Type = type_
	this.ToolgroupId = toolgroupId
	this.ToolHost = toolHost
	this.Description = description
	this.Parameters = parameters
	return &this
}

// NewToolWithDefaults instantiates a new Tool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolWithDefaults() *Tool {
	this := Tool{}
	var type_ string = "tool"
	this.Type = type_
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *Tool) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *Tool) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *Tool) SetIdentifier(v string) {
	o.Identifier = v
}

// GetProviderResourceId returns the ProviderResourceId field value
func (o *Tool) GetProviderResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderResourceId
}

// GetProviderResourceIdOk returns a tuple with the ProviderResourceId field value
// and a boolean to check if the value has been set.
func (o *Tool) GetProviderResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderResourceId, true
}

// SetProviderResourceId sets field value
func (o *Tool) SetProviderResourceId(v string) {
	o.ProviderResourceId = v
}

// GetProviderId returns the ProviderId field value
func (o *Tool) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *Tool) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *Tool) SetProviderId(v string) {
	o.ProviderId = v
}

// GetType returns the Type field value
func (o *Tool) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Tool) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Tool) SetType(v string) {
	o.Type = v
}

// GetToolgroupId returns the ToolgroupId field value
func (o *Tool) GetToolgroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToolgroupId
}

// GetToolgroupIdOk returns a tuple with the ToolgroupId field value
// and a boolean to check if the value has been set.
func (o *Tool) GetToolgroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolgroupId, true
}

// SetToolgroupId sets field value
func (o *Tool) SetToolgroupId(v string) {
	o.ToolgroupId = v
}

// GetToolHost returns the ToolHost field value
func (o *Tool) GetToolHost() ToolHost {
	if o == nil {
		var ret ToolHost
		return ret
	}

	return o.ToolHost
}

// GetToolHostOk returns a tuple with the ToolHost field value
// and a boolean to check if the value has been set.
func (o *Tool) GetToolHostOk() (*ToolHost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolHost, true
}

// SetToolHost sets field value
func (o *Tool) SetToolHost(v ToolHost) {
	o.ToolHost = v
}

// GetDescription returns the Description field value
func (o *Tool) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Tool) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Tool) SetDescription(v string) {
	o.Description = v
}

// GetParameters returns the Parameters field value
func (o *Tool) GetParameters() []ToolParameter {
	if o == nil {
		var ret []ToolParameter
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *Tool) GetParametersOk() ([]ToolParameter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parameters, true
}

// SetParameters sets field value
func (o *Tool) SetParameters(v []ToolParameter) {
	o.Parameters = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Tool) GetMetadata() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tool) GetMetadataOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Tool) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]AppendRowsRequestRowsInnerValue and assigns it to the Metadata field.
func (o *Tool) SetMetadata(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Metadata = v
}

func (o Tool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["provider_resource_id"] = o.ProviderResourceId
	toSerialize["provider_id"] = o.ProviderId
	toSerialize["type"] = o.Type
	toSerialize["toolgroup_id"] = o.ToolgroupId
	toSerialize["tool_host"] = o.ToolHost
	toSerialize["description"] = o.Description
	toSerialize["parameters"] = o.Parameters
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *Tool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"provider_resource_id",
		"provider_id",
		"type",
		"toolgroup_id",
		"tool_host",
		"description",
		"parameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTool := _Tool{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTool)

	if err != nil {
		return err
	}

	*o = Tool(varTool)

	return err
}

type NullableTool struct {
	value *Tool
	isSet bool
}

func (v NullableTool) Get() *Tool {
	return v.value
}

func (v *NullableTool) Set(val *Tool) {
	v.value = val
	v.isSet = true
}

func (v NullableTool) IsSet() bool {
	return v.isSet
}

func (v *NullableTool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTool(val *Tool) *NullableTool {
	return &NullableTool{value: val, isSet: true}
}

func (v NullableTool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


