/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScoreBatchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScoreBatchResponse{}

// ScoreBatchResponse struct for ScoreBatchResponse
type ScoreBatchResponse struct {
	DatasetId *string `json:"dataset_id,omitempty"`
	Results map[string]ScoringResult `json:"results"`
}

type _ScoreBatchResponse ScoreBatchResponse

// NewScoreBatchResponse instantiates a new ScoreBatchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScoreBatchResponse(results map[string]ScoringResult) *ScoreBatchResponse {
	this := ScoreBatchResponse{}
	this.Results = results
	return &this
}

// NewScoreBatchResponseWithDefaults instantiates a new ScoreBatchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoreBatchResponseWithDefaults() *ScoreBatchResponse {
	this := ScoreBatchResponse{}
	return &this
}

// GetDatasetId returns the DatasetId field value if set, zero value otherwise.
func (o *ScoreBatchResponse) GetDatasetId() string {
	if o == nil || IsNil(o.DatasetId) {
		var ret string
		return ret
	}
	return *o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoreBatchResponse) GetDatasetIdOk() (*string, bool) {
	if o == nil || IsNil(o.DatasetId) {
		return nil, false
	}
	return o.DatasetId, true
}

// HasDatasetId returns a boolean if a field has been set.
func (o *ScoreBatchResponse) HasDatasetId() bool {
	if o != nil && !IsNil(o.DatasetId) {
		return true
	}

	return false
}

// SetDatasetId gets a reference to the given string and assigns it to the DatasetId field.
func (o *ScoreBatchResponse) SetDatasetId(v string) {
	o.DatasetId = &v
}

// GetResults returns the Results field value
func (o *ScoreBatchResponse) GetResults() map[string]ScoringResult {
	if o == nil {
		var ret map[string]ScoringResult
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ScoreBatchResponse) GetResultsOk() (map[string]ScoringResult, bool) {
	if o == nil {
		return map[string]ScoringResult{}, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ScoreBatchResponse) SetResults(v map[string]ScoringResult) {
	o.Results = v
}

func (o ScoreBatchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScoreBatchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatasetId) {
		toSerialize["dataset_id"] = o.DatasetId
	}
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

func (o *ScoreBatchResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScoreBatchResponse := _ScoreBatchResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScoreBatchResponse)

	if err != nil {
		return err
	}

	*o = ScoreBatchResponse(varScoreBatchResponse)

	return err
}

type NullableScoreBatchResponse struct {
	value *ScoreBatchResponse
	isSet bool
}

func (v NullableScoreBatchResponse) Get() *ScoreBatchResponse {
	return v.value
}

func (v *NullableScoreBatchResponse) Set(val *ScoreBatchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableScoreBatchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableScoreBatchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoreBatchResponse(val *ScoreBatchResponse) *NullableScoreBatchResponse {
	return &NullableScoreBatchResponse{value: val, isSet: true}
}

func (v NullableScoreBatchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoreBatchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


