/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListProvidersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListProvidersResponse{}

// ListProvidersResponse struct for ListProvidersResponse
type ListProvidersResponse struct {
	Data []ProviderInfo `json:"data"`
}

type _ListProvidersResponse ListProvidersResponse

// NewListProvidersResponse instantiates a new ListProvidersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListProvidersResponse(data []ProviderInfo) *ListProvidersResponse {
	this := ListProvidersResponse{}
	this.Data = data
	return &this
}

// NewListProvidersResponseWithDefaults instantiates a new ListProvidersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListProvidersResponseWithDefaults() *ListProvidersResponse {
	this := ListProvidersResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListProvidersResponse) GetData() []ProviderInfo {
	if o == nil {
		var ret []ProviderInfo
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListProvidersResponse) GetDataOk() ([]ProviderInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListProvidersResponse) SetData(v []ProviderInfo) {
	o.Data = v
}

func (o ListProvidersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListProvidersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *ListProvidersResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListProvidersResponse := _ListProvidersResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListProvidersResponse)

	if err != nil {
		return err
	}

	*o = ListProvidersResponse(varListProvidersResponse)

	return err
}

type NullableListProvidersResponse struct {
	value *ListProvidersResponse
	isSet bool
}

func (v NullableListProvidersResponse) Get() *ListProvidersResponse {
	return v.value
}

func (v *NullableListProvidersResponse) Set(val *ListProvidersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListProvidersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListProvidersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListProvidersResponse(val *ListProvidersResponse) *NullableListProvidersResponse {
	return &NullableListProvidersResponse{value: val, isSet: true}
}

func (v NullableListProvidersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListProvidersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


