/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AggregationFunctionType the model 'AggregationFunctionType'
type AggregationFunctionType string

// List of AggregationFunctionType
const (
	AVERAGE AggregationFunctionType = "average"
	WEIGHTED_AVERAGE AggregationFunctionType = "weighted_average"
	MEDIAN AggregationFunctionType = "median"
	CATEGORICAL_COUNT AggregationFunctionType = "categorical_count"
	ACCURACY AggregationFunctionType = "accuracy"
)

// All allowed values of AggregationFunctionType enum
var AllowedAggregationFunctionTypeEnumValues = []AggregationFunctionType{
	"average",
	"weighted_average",
	"median",
	"categorical_count",
	"accuracy",
}

func (v *AggregationFunctionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AggregationFunctionType(value)
	for _, existing := range AllowedAggregationFunctionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AggregationFunctionType", value)
}

// NewAggregationFunctionTypeFromValue returns a pointer to a valid AggregationFunctionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAggregationFunctionTypeFromValue(v string) (*AggregationFunctionType, error) {
	ev := AggregationFunctionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AggregationFunctionType: valid values are %v", v, AllowedAggregationFunctionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AggregationFunctionType) IsValid() bool {
	for _, existing := range AllowedAggregationFunctionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AggregationFunctionType value
func (v AggregationFunctionType) Ptr() *AggregationFunctionType {
	return &v
}

type NullableAggregationFunctionType struct {
	value *AggregationFunctionType
	isSet bool
}

func (v NullableAggregationFunctionType) Get() *AggregationFunctionType {
	return v.value
}

func (v *NullableAggregationFunctionType) Set(val *AggregationFunctionType) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregationFunctionType) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregationFunctionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregationFunctionType(val *AggregationFunctionType) *NullableAggregationFunctionType {
	return &NullableAggregationFunctionType{value: val, isSet: true}
}

func (v NullableAggregationFunctionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregationFunctionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

