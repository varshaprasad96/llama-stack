/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProviderInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderInfo{}

// ProviderInfo struct for ProviderInfo
type ProviderInfo struct {
	Api string `json:"api"`
	ProviderId string `json:"provider_id"`
	ProviderType string `json:"provider_type"`
	Config map[string]AppendRowsRequestRowsInnerValue `json:"config"`
	Health map[string]AppendRowsRequestRowsInnerValue `json:"health"`
}

type _ProviderInfo ProviderInfo

// NewProviderInfo instantiates a new ProviderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderInfo(api string, providerId string, providerType string, config map[string]AppendRowsRequestRowsInnerValue, health map[string]AppendRowsRequestRowsInnerValue) *ProviderInfo {
	this := ProviderInfo{}
	this.Api = api
	this.ProviderId = providerId
	this.ProviderType = providerType
	this.Config = config
	this.Health = health
	return &this
}

// NewProviderInfoWithDefaults instantiates a new ProviderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderInfoWithDefaults() *ProviderInfo {
	this := ProviderInfo{}
	return &this
}

// GetApi returns the Api field value
func (o *ProviderInfo) GetApi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Api
}

// GetApiOk returns a tuple with the Api field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetApiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Api, true
}

// SetApi sets field value
func (o *ProviderInfo) SetApi(v string) {
	o.Api = v
}

// GetProviderId returns the ProviderId field value
func (o *ProviderInfo) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *ProviderInfo) SetProviderId(v string) {
	o.ProviderId = v
}

// GetProviderType returns the ProviderType field value
func (o *ProviderInfo) GetProviderType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderType
}

// GetProviderTypeOk returns a tuple with the ProviderType field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetProviderTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderType, true
}

// SetProviderType sets field value
func (o *ProviderInfo) SetProviderType(v string) {
	o.ProviderType = v
}

// GetConfig returns the Config field value
func (o *ProviderInfo) GetConfig() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetConfigOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *ProviderInfo) SetConfig(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Config = v
}

// GetHealth returns the Health field value
func (o *ProviderInfo) GetHealth() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Health
}

// GetHealthOk returns a tuple with the Health field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetHealthOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Health, true
}

// SetHealth sets field value
func (o *ProviderInfo) SetHealth(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Health = v
}

func (o ProviderInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api"] = o.Api
	toSerialize["provider_id"] = o.ProviderId
	toSerialize["provider_type"] = o.ProviderType
	toSerialize["config"] = o.Config
	toSerialize["health"] = o.Health
	return toSerialize, nil
}

func (o *ProviderInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api",
		"provider_id",
		"provider_type",
		"config",
		"health",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderInfo := _ProviderInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderInfo)

	if err != nil {
		return err
	}

	*o = ProviderInfo(varProviderInfo)

	return err
}

type NullableProviderInfo struct {
	value *ProviderInfo
	isSet bool
}

func (v NullableProviderInfo) Get() *ProviderInfo {
	return v.value
}

func (v *NullableProviderInfo) Set(val *ProviderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderInfo(val *ProviderInfo) *NullableProviderInfo {
	return &NullableProviderInfo{value: val, isSet: true}
}

func (v NullableProviderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


