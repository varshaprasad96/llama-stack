/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InsertRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsertRequest{}

// InsertRequest struct for InsertRequest
type InsertRequest struct {
	Documents []RAGDocument `json:"documents"`
	VectorDbId string `json:"vector_db_id"`
	ChunkSizeInTokens int32 `json:"chunk_size_in_tokens"`
}

type _InsertRequest InsertRequest

// NewInsertRequest instantiates a new InsertRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsertRequest(documents []RAGDocument, vectorDbId string, chunkSizeInTokens int32) *InsertRequest {
	this := InsertRequest{}
	this.Documents = documents
	this.VectorDbId = vectorDbId
	this.ChunkSizeInTokens = chunkSizeInTokens
	return &this
}

// NewInsertRequestWithDefaults instantiates a new InsertRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsertRequestWithDefaults() *InsertRequest {
	this := InsertRequest{}
	return &this
}

// GetDocuments returns the Documents field value
func (o *InsertRequest) GetDocuments() []RAGDocument {
	if o == nil {
		var ret []RAGDocument
		return ret
	}

	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value
// and a boolean to check if the value has been set.
func (o *InsertRequest) GetDocumentsOk() ([]RAGDocument, bool) {
	if o == nil {
		return nil, false
	}
	return o.Documents, true
}

// SetDocuments sets field value
func (o *InsertRequest) SetDocuments(v []RAGDocument) {
	o.Documents = v
}

// GetVectorDbId returns the VectorDbId field value
func (o *InsertRequest) GetVectorDbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VectorDbId
}

// GetVectorDbIdOk returns a tuple with the VectorDbId field value
// and a boolean to check if the value has been set.
func (o *InsertRequest) GetVectorDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VectorDbId, true
}

// SetVectorDbId sets field value
func (o *InsertRequest) SetVectorDbId(v string) {
	o.VectorDbId = v
}

// GetChunkSizeInTokens returns the ChunkSizeInTokens field value
func (o *InsertRequest) GetChunkSizeInTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChunkSizeInTokens
}

// GetChunkSizeInTokensOk returns a tuple with the ChunkSizeInTokens field value
// and a boolean to check if the value has been set.
func (o *InsertRequest) GetChunkSizeInTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChunkSizeInTokens, true
}

// SetChunkSizeInTokens sets field value
func (o *InsertRequest) SetChunkSizeInTokens(v int32) {
	o.ChunkSizeInTokens = v
}

func (o InsertRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsertRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["documents"] = o.Documents
	toSerialize["vector_db_id"] = o.VectorDbId
	toSerialize["chunk_size_in_tokens"] = o.ChunkSizeInTokens
	return toSerialize, nil
}

func (o *InsertRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"documents",
		"vector_db_id",
		"chunk_size_in_tokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInsertRequest := _InsertRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInsertRequest)

	if err != nil {
		return err
	}

	*o = InsertRequest(varInsertRequest)

	return err
}

type NullableInsertRequest struct {
	value *InsertRequest
	isSet bool
}

func (v NullableInsertRequest) Get() *InsertRequest {
	return v.value
}

func (v *NullableInsertRequest) Set(val *InsertRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInsertRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInsertRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsertRequest(val *InsertRequest) *NullableInsertRequest {
	return &NullableInsertRequest{value: val, isSet: true}
}

func (v NullableInsertRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsertRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


