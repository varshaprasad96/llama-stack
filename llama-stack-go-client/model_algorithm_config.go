/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AlgorithmConfig - struct for AlgorithmConfig
type AlgorithmConfig struct {
	LoraFinetuningConfig *LoraFinetuningConfig
	QATFinetuningConfig *QATFinetuningConfig
}

// LoraFinetuningConfigAsAlgorithmConfig is a convenience function that returns LoraFinetuningConfig wrapped in AlgorithmConfig
func LoraFinetuningConfigAsAlgorithmConfig(v *LoraFinetuningConfig) AlgorithmConfig {
	return AlgorithmConfig{
		LoraFinetuningConfig: v,
	}
}

// QATFinetuningConfigAsAlgorithmConfig is a convenience function that returns QATFinetuningConfig wrapped in AlgorithmConfig
func QATFinetuningConfigAsAlgorithmConfig(v *QATFinetuningConfig) AlgorithmConfig {
	return AlgorithmConfig{
		QATFinetuningConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AlgorithmConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LoraFinetuningConfig
	err = newStrictDecoder(data).Decode(&dst.LoraFinetuningConfig)
	if err == nil {
		jsonLoraFinetuningConfig, _ := json.Marshal(dst.LoraFinetuningConfig)
		if string(jsonLoraFinetuningConfig) == "{}" { // empty struct
			dst.LoraFinetuningConfig = nil
		} else {
			if err = validator.Validate(dst.LoraFinetuningConfig); err != nil {
				dst.LoraFinetuningConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.LoraFinetuningConfig = nil
	}

	// try to unmarshal data into QATFinetuningConfig
	err = newStrictDecoder(data).Decode(&dst.QATFinetuningConfig)
	if err == nil {
		jsonQATFinetuningConfig, _ := json.Marshal(dst.QATFinetuningConfig)
		if string(jsonQATFinetuningConfig) == "{}" { // empty struct
			dst.QATFinetuningConfig = nil
		} else {
			if err = validator.Validate(dst.QATFinetuningConfig); err != nil {
				dst.QATFinetuningConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.QATFinetuningConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LoraFinetuningConfig = nil
		dst.QATFinetuningConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AlgorithmConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AlgorithmConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AlgorithmConfig) MarshalJSON() ([]byte, error) {
	if src.LoraFinetuningConfig != nil {
		return json.Marshal(&src.LoraFinetuningConfig)
	}

	if src.QATFinetuningConfig != nil {
		return json.Marshal(&src.QATFinetuningConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AlgorithmConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LoraFinetuningConfig != nil {
		return obj.LoraFinetuningConfig
	}

	if obj.QATFinetuningConfig != nil {
		return obj.QATFinetuningConfig
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AlgorithmConfig) GetActualInstanceValue() (interface{}) {
	if obj.LoraFinetuningConfig != nil {
		return *obj.LoraFinetuningConfig
	}

	if obj.QATFinetuningConfig != nil {
		return *obj.QATFinetuningConfig
	}

	// all schemas are nil
	return nil
}

type NullableAlgorithmConfig struct {
	value *AlgorithmConfig
	isSet bool
}

func (v NullableAlgorithmConfig) Get() *AlgorithmConfig {
	return v.value
}

func (v *NullableAlgorithmConfig) Set(val *AlgorithmConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAlgorithmConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAlgorithmConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlgorithmConfig(val *AlgorithmConfig) *NullableAlgorithmConfig {
	return &NullableAlgorithmConfig{value: val, isSet: true}
}

func (v NullableAlgorithmConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlgorithmConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


