/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MetricEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricEvent{}

// MetricEvent struct for MetricEvent
type MetricEvent struct {
	TraceId string `json:"trace_id"`
	SpanId string `json:"span_id"`
	Timestamp time.Time `json:"timestamp"`
	Attributes map[string]ToolCallArgumentsOneOfValueOneOfInner `json:"attributes,omitempty"`
	Type string `json:"type"`
	Metric string `json:"metric"`
	Value MetricInResponseValue `json:"value"`
	Unit string `json:"unit"`
}

type _MetricEvent MetricEvent

// NewMetricEvent instantiates a new MetricEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEvent(traceId string, spanId string, timestamp time.Time, type_ string, metric string, value MetricInResponseValue, unit string) *MetricEvent {
	this := MetricEvent{}
	this.TraceId = traceId
	this.SpanId = spanId
	this.Timestamp = timestamp
	this.Type = type_
	this.Metric = metric
	this.Value = value
	this.Unit = unit
	return &this
}

// NewMetricEventWithDefaults instantiates a new MetricEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEventWithDefaults() *MetricEvent {
	this := MetricEvent{}
	var type_ string = "metric"
	this.Type = type_
	return &this
}

// GetTraceId returns the TraceId field value
func (o *MetricEvent) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *MetricEvent) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *MetricEvent) SetTraceId(v string) {
	o.TraceId = v
}

// GetSpanId returns the SpanId field value
func (o *MetricEvent) GetSpanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value
// and a boolean to check if the value has been set.
func (o *MetricEvent) GetSpanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpanId, true
}

// SetSpanId sets field value
func (o *MetricEvent) SetSpanId(v string) {
	o.SpanId = v
}

// GetTimestamp returns the Timestamp field value
func (o *MetricEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *MetricEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *MetricEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *MetricEvent) GetAttributes() map[string]ToolCallArgumentsOneOfValueOneOfInner {
	if o == nil || IsNil(o.Attributes) {
		var ret map[string]ToolCallArgumentsOneOfValueOneOfInner
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEvent) GetAttributesOk() (map[string]ToolCallArgumentsOneOfValueOneOfInner, bool) {
	if o == nil || IsNil(o.Attributes) {
		return map[string]ToolCallArgumentsOneOfValueOneOfInner{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *MetricEvent) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]ToolCallArgumentsOneOfValueOneOfInner and assigns it to the Attributes field.
func (o *MetricEvent) SetAttributes(v map[string]ToolCallArgumentsOneOfValueOneOfInner) {
	o.Attributes = v
}

// GetType returns the Type field value
func (o *MetricEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MetricEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MetricEvent) SetType(v string) {
	o.Type = v
}

// GetMetric returns the Metric field value
func (o *MetricEvent) GetMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *MetricEvent) GetMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *MetricEvent) SetMetric(v string) {
	o.Metric = v
}

// GetValue returns the Value field value
func (o *MetricEvent) GetValue() MetricInResponseValue {
	if o == nil {
		var ret MetricInResponseValue
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MetricEvent) GetValueOk() (*MetricInResponseValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MetricEvent) SetValue(v MetricInResponseValue) {
	o.Value = v
}

// GetUnit returns the Unit field value
func (o *MetricEvent) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *MetricEvent) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *MetricEvent) SetUnit(v string) {
	o.Unit = v
}

func (o MetricEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trace_id"] = o.TraceId
	toSerialize["span_id"] = o.SpanId
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	toSerialize["type"] = o.Type
	toSerialize["metric"] = o.Metric
	toSerialize["value"] = o.Value
	toSerialize["unit"] = o.Unit
	return toSerialize, nil
}

func (o *MetricEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trace_id",
		"span_id",
		"timestamp",
		"type",
		"metric",
		"value",
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricEvent := _MetricEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricEvent)

	if err != nil {
		return err
	}

	*o = MetricEvent(varMetricEvent)

	return err
}

type NullableMetricEvent struct {
	value *MetricEvent
	isSet bool
}

func (v NullableMetricEvent) Get() *MetricEvent {
	return v.value
}

func (v *NullableMetricEvent) Set(val *MetricEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEvent(val *MetricEvent) *NullableMetricEvent {
	return &NullableMetricEvent{value: val, isSet: true}
}

func (v NullableMetricEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


