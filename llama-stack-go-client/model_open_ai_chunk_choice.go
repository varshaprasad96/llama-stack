/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenAIChunkChoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenAIChunkChoice{}

// OpenAIChunkChoice A chunk choice from an OpenAI-compatible chat completion streaming response.
type OpenAIChunkChoice struct {
	// The delta from the chunk
	Delta OpenAIChoiceDelta `json:"delta"`
	// The reason the model stopped generating
	FinishReason string `json:"finish_reason"`
	// The index of the choice
	Index int32 `json:"index"`
	// (Optional) The log probabilities for the tokens in the message
	Logprobs *OpenAIChoiceLogprobs `json:"logprobs,omitempty"`
}

type _OpenAIChunkChoice OpenAIChunkChoice

// NewOpenAIChunkChoice instantiates a new OpenAIChunkChoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAIChunkChoice(delta OpenAIChoiceDelta, finishReason string, index int32) *OpenAIChunkChoice {
	this := OpenAIChunkChoice{}
	this.Delta = delta
	this.FinishReason = finishReason
	this.Index = index
	return &this
}

// NewOpenAIChunkChoiceWithDefaults instantiates a new OpenAIChunkChoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAIChunkChoiceWithDefaults() *OpenAIChunkChoice {
	this := OpenAIChunkChoice{}
	return &this
}

// GetDelta returns the Delta field value
func (o *OpenAIChunkChoice) GetDelta() OpenAIChoiceDelta {
	if o == nil {
		var ret OpenAIChoiceDelta
		return ret
	}

	return o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value
// and a boolean to check if the value has been set.
func (o *OpenAIChunkChoice) GetDeltaOk() (*OpenAIChoiceDelta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delta, true
}

// SetDelta sets field value
func (o *OpenAIChunkChoice) SetDelta(v OpenAIChoiceDelta) {
	o.Delta = v
}

// GetFinishReason returns the FinishReason field value
func (o *OpenAIChunkChoice) GetFinishReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FinishReason
}

// GetFinishReasonOk returns a tuple with the FinishReason field value
// and a boolean to check if the value has been set.
func (o *OpenAIChunkChoice) GetFinishReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FinishReason, true
}

// SetFinishReason sets field value
func (o *OpenAIChunkChoice) SetFinishReason(v string) {
	o.FinishReason = v
}

// GetIndex returns the Index field value
func (o *OpenAIChunkChoice) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *OpenAIChunkChoice) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *OpenAIChunkChoice) SetIndex(v int32) {
	o.Index = v
}

// GetLogprobs returns the Logprobs field value if set, zero value otherwise.
func (o *OpenAIChunkChoice) GetLogprobs() OpenAIChoiceLogprobs {
	if o == nil || IsNil(o.Logprobs) {
		var ret OpenAIChoiceLogprobs
		return ret
	}
	return *o.Logprobs
}

// GetLogprobsOk returns a tuple with the Logprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIChunkChoice) GetLogprobsOk() (*OpenAIChoiceLogprobs, bool) {
	if o == nil || IsNil(o.Logprobs) {
		return nil, false
	}
	return o.Logprobs, true
}

// HasLogprobs returns a boolean if a field has been set.
func (o *OpenAIChunkChoice) HasLogprobs() bool {
	if o != nil && !IsNil(o.Logprobs) {
		return true
	}

	return false
}

// SetLogprobs gets a reference to the given OpenAIChoiceLogprobs and assigns it to the Logprobs field.
func (o *OpenAIChunkChoice) SetLogprobs(v OpenAIChoiceLogprobs) {
	o.Logprobs = &v
}

func (o OpenAIChunkChoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenAIChunkChoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delta"] = o.Delta
	toSerialize["finish_reason"] = o.FinishReason
	toSerialize["index"] = o.Index
	if !IsNil(o.Logprobs) {
		toSerialize["logprobs"] = o.Logprobs
	}
	return toSerialize, nil
}

func (o *OpenAIChunkChoice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delta",
		"finish_reason",
		"index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenAIChunkChoice := _OpenAIChunkChoice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenAIChunkChoice)

	if err != nil {
		return err
	}

	*o = OpenAIChunkChoice(varOpenAIChunkChoice)

	return err
}

type NullableOpenAIChunkChoice struct {
	value *OpenAIChunkChoice
	isSet bool
}

func (v NullableOpenAIChunkChoice) Get() *OpenAIChunkChoice {
	return v.value
}

func (v *NullableOpenAIChunkChoice) Set(val *OpenAIChunkChoice) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIChunkChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIChunkChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIChunkChoice(val *OpenAIChunkChoice) *NullableOpenAIChunkChoice {
	return &NullableOpenAIChunkChoice{value: val, isSet: true}
}

func (v NullableOpenAIChunkChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIChunkChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


