/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RunShieldResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunShieldResponse{}

// RunShieldResponse struct for RunShieldResponse
type RunShieldResponse struct {
	Violation *SafetyViolation `json:"violation,omitempty"`
}

// NewRunShieldResponse instantiates a new RunShieldResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunShieldResponse() *RunShieldResponse {
	this := RunShieldResponse{}
	return &this
}

// NewRunShieldResponseWithDefaults instantiates a new RunShieldResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunShieldResponseWithDefaults() *RunShieldResponse {
	this := RunShieldResponse{}
	return &this
}

// GetViolation returns the Violation field value if set, zero value otherwise.
func (o *RunShieldResponse) GetViolation() SafetyViolation {
	if o == nil || IsNil(o.Violation) {
		var ret SafetyViolation
		return ret
	}
	return *o.Violation
}

// GetViolationOk returns a tuple with the Violation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunShieldResponse) GetViolationOk() (*SafetyViolation, bool) {
	if o == nil || IsNil(o.Violation) {
		return nil, false
	}
	return o.Violation, true
}

// HasViolation returns a boolean if a field has been set.
func (o *RunShieldResponse) HasViolation() bool {
	if o != nil && !IsNil(o.Violation) {
		return true
	}

	return false
}

// SetViolation gets a reference to the given SafetyViolation and assigns it to the Violation field.
func (o *RunShieldResponse) SetViolation(v SafetyViolation) {
	o.Violation = &v
}

func (o RunShieldResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunShieldResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Violation) {
		toSerialize["violation"] = o.Violation
	}
	return toSerialize, nil
}

type NullableRunShieldResponse struct {
	value *RunShieldResponse
	isSet bool
}

func (v NullableRunShieldResponse) Get() *RunShieldResponse {
	return v.value
}

func (v *NullableRunShieldResponse) Set(val *RunShieldResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRunShieldResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRunShieldResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunShieldResponse(val *RunShieldResponse) *NullableRunShieldResponse {
	return &NullableRunShieldResponse{value: val, isSet: true}
}

func (v NullableRunShieldResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunShieldResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


