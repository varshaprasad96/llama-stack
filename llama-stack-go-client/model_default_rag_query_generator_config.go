/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DefaultRAGQueryGeneratorConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultRAGQueryGeneratorConfig{}

// DefaultRAGQueryGeneratorConfig struct for DefaultRAGQueryGeneratorConfig
type DefaultRAGQueryGeneratorConfig struct {
	Type string `json:"type"`
	Separator string `json:"separator"`
}

type _DefaultRAGQueryGeneratorConfig DefaultRAGQueryGeneratorConfig

// NewDefaultRAGQueryGeneratorConfig instantiates a new DefaultRAGQueryGeneratorConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultRAGQueryGeneratorConfig(type_ string, separator string) *DefaultRAGQueryGeneratorConfig {
	this := DefaultRAGQueryGeneratorConfig{}
	this.Type = type_
	this.Separator = separator
	return &this
}

// NewDefaultRAGQueryGeneratorConfigWithDefaults instantiates a new DefaultRAGQueryGeneratorConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultRAGQueryGeneratorConfigWithDefaults() *DefaultRAGQueryGeneratorConfig {
	this := DefaultRAGQueryGeneratorConfig{}
	var type_ string = "default"
	this.Type = type_
	var separator string = " "
	this.Separator = separator
	return &this
}

// GetType returns the Type field value
func (o *DefaultRAGQueryGeneratorConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DefaultRAGQueryGeneratorConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DefaultRAGQueryGeneratorConfig) SetType(v string) {
	o.Type = v
}

// GetSeparator returns the Separator field value
func (o *DefaultRAGQueryGeneratorConfig) GetSeparator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value
// and a boolean to check if the value has been set.
func (o *DefaultRAGQueryGeneratorConfig) GetSeparatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Separator, true
}

// SetSeparator sets field value
func (o *DefaultRAGQueryGeneratorConfig) SetSeparator(v string) {
	o.Separator = v
}

func (o DefaultRAGQueryGeneratorConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultRAGQueryGeneratorConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["separator"] = o.Separator
	return toSerialize, nil
}

func (o *DefaultRAGQueryGeneratorConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"separator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDefaultRAGQueryGeneratorConfig := _DefaultRAGQueryGeneratorConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDefaultRAGQueryGeneratorConfig)

	if err != nil {
		return err
	}

	*o = DefaultRAGQueryGeneratorConfig(varDefaultRAGQueryGeneratorConfig)

	return err
}

type NullableDefaultRAGQueryGeneratorConfig struct {
	value *DefaultRAGQueryGeneratorConfig
	isSet bool
}

func (v NullableDefaultRAGQueryGeneratorConfig) Get() *DefaultRAGQueryGeneratorConfig {
	return v.value
}

func (v *NullableDefaultRAGQueryGeneratorConfig) Set(val *DefaultRAGQueryGeneratorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultRAGQueryGeneratorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultRAGQueryGeneratorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultRAGQueryGeneratorConfig(val *DefaultRAGQueryGeneratorConfig) *NullableDefaultRAGQueryGeneratorConfig {
	return &NullableDefaultRAGQueryGeneratorConfig{value: val, isSet: true}
}

func (v NullableDefaultRAGQueryGeneratorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultRAGQueryGeneratorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


