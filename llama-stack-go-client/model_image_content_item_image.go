/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ImageContentItemImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageContentItemImage{}

// ImageContentItemImage Image as a base64 encoded string or an URL
type ImageContentItemImage struct {
	// A URL of the image or data URL in the format of data:image/{type};base64,{data}. Note that URL could have length limits.
	Url *URL `json:"url,omitempty"`
	// base64 encoded image data as string
	Data *string `json:"data,omitempty"`
}

// NewImageContentItemImage instantiates a new ImageContentItemImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageContentItemImage() *ImageContentItemImage {
	this := ImageContentItemImage{}
	return &this
}

// NewImageContentItemImageWithDefaults instantiates a new ImageContentItemImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageContentItemImageWithDefaults() *ImageContentItemImage {
	this := ImageContentItemImage{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ImageContentItemImage) GetUrl() URL {
	if o == nil || IsNil(o.Url) {
		var ret URL
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageContentItemImage) GetUrlOk() (*URL, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ImageContentItemImage) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given URL and assigns it to the Url field.
func (o *ImageContentItemImage) SetUrl(v URL) {
	o.Url = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ImageContentItemImage) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageContentItemImage) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ImageContentItemImage) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ImageContentItemImage) SetData(v string) {
	o.Data = &v
}

func (o ImageContentItemImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageContentItemImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableImageContentItemImage struct {
	value *ImageContentItemImage
	isSet bool
}

func (v NullableImageContentItemImage) Get() *ImageContentItemImage {
	return v.value
}

func (v *NullableImageContentItemImage) Set(val *ImageContentItemImage) {
	v.value = val
	v.isSet = true
}

func (v NullableImageContentItemImage) IsSet() bool {
	return v.isSet
}

func (v *NullableImageContentItemImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageContentItemImage(val *ImageContentItemImage) *NullableImageContentItemImage {
	return &NullableImageContentItemImage{value: val, isSet: true}
}

func (v NullableImageContentItemImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageContentItemImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


