/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ToolHost the model 'ToolHost'
type ToolHost string

// List of ToolHost
const (
	DISTRIBUTION ToolHost = "distribution"
	CLIENT ToolHost = "client"
	MODEL_CONTEXT_PROTOCOL ToolHost = "model_context_protocol"
)

// All allowed values of ToolHost enum
var AllowedToolHostEnumValues = []ToolHost{
	"distribution",
	"client",
	"model_context_protocol",
}

func (v *ToolHost) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ToolHost(value)
	for _, existing := range AllowedToolHostEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ToolHost", value)
}

// NewToolHostFromValue returns a pointer to a valid ToolHost
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewToolHostFromValue(v string) (*ToolHost, error) {
	ev := ToolHost(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ToolHost: valid values are %v", v, AllowedToolHostEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ToolHost) IsValid() bool {
	for _, existing := range AllowedToolHostEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ToolHost value
func (v ToolHost) Ptr() *ToolHost {
	return &v
}

type NullableToolHost struct {
	value *ToolHost
	isSet bool
}

func (v NullableToolHost) Get() *ToolHost {
	return v.value
}

func (v *NullableToolHost) Set(val *ToolHost) {
	v.value = val
	v.isSet = true
}

func (v NullableToolHost) IsSet() bool {
	return v.isSet
}

func (v *NullableToolHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolHost(val *ToolHost) *NullableToolHost {
	return &NullableToolHost{value: val, isSet: true}
}

func (v NullableToolHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

