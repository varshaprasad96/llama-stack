/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SpanEndPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpanEndPayload{}

// SpanEndPayload struct for SpanEndPayload
type SpanEndPayload struct {
	Type string `json:"type"`
	Status SpanStatus `json:"status"`
}

type _SpanEndPayload SpanEndPayload

// NewSpanEndPayload instantiates a new SpanEndPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpanEndPayload(type_ string, status SpanStatus) *SpanEndPayload {
	this := SpanEndPayload{}
	this.Type = type_
	this.Status = status
	return &this
}

// NewSpanEndPayloadWithDefaults instantiates a new SpanEndPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpanEndPayloadWithDefaults() *SpanEndPayload {
	this := SpanEndPayload{}
	var type_ string = "span_end"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *SpanEndPayload) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SpanEndPayload) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SpanEndPayload) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *SpanEndPayload) GetStatus() SpanStatus {
	if o == nil {
		var ret SpanStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SpanEndPayload) GetStatusOk() (*SpanStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SpanEndPayload) SetStatus(v SpanStatus) {
	o.Status = v
}

func (o SpanEndPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpanEndPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *SpanEndPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpanEndPayload := _SpanEndPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpanEndPayload)

	if err != nil {
		return err
	}

	*o = SpanEndPayload(varSpanEndPayload)

	return err
}

type NullableSpanEndPayload struct {
	value *SpanEndPayload
	isSet bool
}

func (v NullableSpanEndPayload) Get() *SpanEndPayload {
	return v.value
}

func (v *NullableSpanEndPayload) Set(val *SpanEndPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSpanEndPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSpanEndPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpanEndPayload(val *SpanEndPayload) *NullableSpanEndPayload {
	return &NullableSpanEndPayload{value: val, isSet: true}
}

func (v NullableSpanEndPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpanEndPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


