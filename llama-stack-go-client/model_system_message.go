/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SystemMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemMessage{}

// SystemMessage A system message providing instructions or context to the model.
type SystemMessage struct {
	// Must be \"system\" to identify this as a system message
	Role string `json:"role"`
	// The content of the \"system prompt\". If multiple system messages are provided, they are concatenated. The underlying Llama Stack code may also add other system messages (for example, for formatting tool definitions).
	Content InterleavedContent `json:"content"`
}

type _SystemMessage SystemMessage

// NewSystemMessage instantiates a new SystemMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemMessage(role string, content InterleavedContent) *SystemMessage {
	this := SystemMessage{}
	this.Role = role
	this.Content = content
	return &this
}

// NewSystemMessageWithDefaults instantiates a new SystemMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemMessageWithDefaults() *SystemMessage {
	this := SystemMessage{}
	var role string = "system"
	this.Role = role
	return &this
}

// GetRole returns the Role field value
func (o *SystemMessage) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *SystemMessage) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *SystemMessage) SetRole(v string) {
	o.Role = v
}

// GetContent returns the Content field value
func (o *SystemMessage) GetContent() InterleavedContent {
	if o == nil {
		var ret InterleavedContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *SystemMessage) GetContentOk() (*InterleavedContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *SystemMessage) SetContent(v InterleavedContent) {
	o.Content = v
}

func (o SystemMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

func (o *SystemMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSystemMessage := _SystemMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSystemMessage)

	if err != nil {
		return err
	}

	*o = SystemMessage(varSystemMessage)

	return err
}

type NullableSystemMessage struct {
	value *SystemMessage
	isSet bool
}

func (v NullableSystemMessage) Get() *SystemMessage {
	return v.value
}

func (v *NullableSystemMessage) Set(val *SystemMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemMessage(val *SystemMessage) *NullableSystemMessage {
	return &NullableSystemMessage{value: val, isSet: true}
}

func (v NullableSystemMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


