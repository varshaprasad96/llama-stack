/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the QueryChunksResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryChunksResponse{}

// QueryChunksResponse struct for QueryChunksResponse
type QueryChunksResponse struct {
	Chunks []Chunk1 `json:"chunks"`
	Scores []float32 `json:"scores"`
	AdditionalProperties map[string]interface{}
}

type _QueryChunksResponse QueryChunksResponse

// NewQueryChunksResponse instantiates a new QueryChunksResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryChunksResponse(chunks []Chunk1, scores []float32) *QueryChunksResponse {
	this := QueryChunksResponse{}
	this.Chunks = chunks
	this.Scores = scores
	return &this
}

// NewQueryChunksResponseWithDefaults instantiates a new QueryChunksResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryChunksResponseWithDefaults() *QueryChunksResponse {
	this := QueryChunksResponse{}
	return &this
}

// GetChunks returns the Chunks field value
func (o *QueryChunksResponse) GetChunks() []Chunk1 {
	if o == nil {
		var ret []Chunk1
		return ret
	}

	return o.Chunks
}

// GetChunksOk returns a tuple with the Chunks field value
// and a boolean to check if the value has been set.
func (o *QueryChunksResponse) GetChunksOk() ([]Chunk1, bool) {
	if o == nil {
		return nil, false
	}
	return o.Chunks, true
}

// SetChunks sets field value
func (o *QueryChunksResponse) SetChunks(v []Chunk1) {
	o.Chunks = v
}

// GetScores returns the Scores field value
func (o *QueryChunksResponse) GetScores() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.Scores
}

// GetScoresOk returns a tuple with the Scores field value
// and a boolean to check if the value has been set.
func (o *QueryChunksResponse) GetScoresOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scores, true
}

// SetScores sets field value
func (o *QueryChunksResponse) SetScores(v []float32) {
	o.Scores = v
}

func (o QueryChunksResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryChunksResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chunks"] = o.Chunks
	toSerialize["scores"] = o.Scores

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QueryChunksResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chunks",
		"scores",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryChunksResponse := _QueryChunksResponse{}

	err = json.Unmarshal(data, &varQueryChunksResponse)

	if err != nil {
		return err
	}

	*o = QueryChunksResponse(varQueryChunksResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chunks")
		delete(additionalProperties, "scores")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQueryChunksResponse struct {
	value *QueryChunksResponse
	isSet bool
}

func (v NullableQueryChunksResponse) Get() *QueryChunksResponse {
	return v.value
}

func (v *NullableQueryChunksResponse) Set(val *QueryChunksResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryChunksResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryChunksResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryChunksResponse(val *QueryChunksResponse) *NullableQueryChunksResponse {
	return &NullableQueryChunksResponse{value: val, isSet: true}
}

func (v NullableQueryChunksResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryChunksResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


