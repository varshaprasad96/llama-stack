/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataConfig{}

// DataConfig struct for DataConfig
type DataConfig struct {
	DatasetId string `json:"dataset_id"`
	BatchSize int32 `json:"batch_size"`
	Shuffle bool `json:"shuffle"`
	DataFormat DatasetFormat `json:"data_format"`
	ValidationDatasetId *string `json:"validation_dataset_id,omitempty"`
	Packed *bool `json:"packed,omitempty"`
	TrainOnInput *bool `json:"train_on_input,omitempty"`
}

type _DataConfig DataConfig

// NewDataConfig instantiates a new DataConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataConfig(datasetId string, batchSize int32, shuffle bool, dataFormat DatasetFormat) *DataConfig {
	this := DataConfig{}
	this.DatasetId = datasetId
	this.BatchSize = batchSize
	this.Shuffle = shuffle
	this.DataFormat = dataFormat
	var packed bool = false
	this.Packed = &packed
	var trainOnInput bool = false
	this.TrainOnInput = &trainOnInput
	return &this
}

// NewDataConfigWithDefaults instantiates a new DataConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataConfigWithDefaults() *DataConfig {
	this := DataConfig{}
	var packed bool = false
	this.Packed = &packed
	var trainOnInput bool = false
	this.TrainOnInput = &trainOnInput
	return &this
}

// GetDatasetId returns the DatasetId field value
func (o *DataConfig) GetDatasetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field value
// and a boolean to check if the value has been set.
func (o *DataConfig) GetDatasetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatasetId, true
}

// SetDatasetId sets field value
func (o *DataConfig) SetDatasetId(v string) {
	o.DatasetId = v
}

// GetBatchSize returns the BatchSize field value
func (o *DataConfig) GetBatchSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BatchSize
}

// GetBatchSizeOk returns a tuple with the BatchSize field value
// and a boolean to check if the value has been set.
func (o *DataConfig) GetBatchSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatchSize, true
}

// SetBatchSize sets field value
func (o *DataConfig) SetBatchSize(v int32) {
	o.BatchSize = v
}

// GetShuffle returns the Shuffle field value
func (o *DataConfig) GetShuffle() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Shuffle
}

// GetShuffleOk returns a tuple with the Shuffle field value
// and a boolean to check if the value has been set.
func (o *DataConfig) GetShuffleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shuffle, true
}

// SetShuffle sets field value
func (o *DataConfig) SetShuffle(v bool) {
	o.Shuffle = v
}

// GetDataFormat returns the DataFormat field value
func (o *DataConfig) GetDataFormat() DatasetFormat {
	if o == nil {
		var ret DatasetFormat
		return ret
	}

	return o.DataFormat
}

// GetDataFormatOk returns a tuple with the DataFormat field value
// and a boolean to check if the value has been set.
func (o *DataConfig) GetDataFormatOk() (*DatasetFormat, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataFormat, true
}

// SetDataFormat sets field value
func (o *DataConfig) SetDataFormat(v DatasetFormat) {
	o.DataFormat = v
}

// GetValidationDatasetId returns the ValidationDatasetId field value if set, zero value otherwise.
func (o *DataConfig) GetValidationDatasetId() string {
	if o == nil || IsNil(o.ValidationDatasetId) {
		var ret string
		return ret
	}
	return *o.ValidationDatasetId
}

// GetValidationDatasetIdOk returns a tuple with the ValidationDatasetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConfig) GetValidationDatasetIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValidationDatasetId) {
		return nil, false
	}
	return o.ValidationDatasetId, true
}

// HasValidationDatasetId returns a boolean if a field has been set.
func (o *DataConfig) HasValidationDatasetId() bool {
	if o != nil && !IsNil(o.ValidationDatasetId) {
		return true
	}

	return false
}

// SetValidationDatasetId gets a reference to the given string and assigns it to the ValidationDatasetId field.
func (o *DataConfig) SetValidationDatasetId(v string) {
	o.ValidationDatasetId = &v
}

// GetPacked returns the Packed field value if set, zero value otherwise.
func (o *DataConfig) GetPacked() bool {
	if o == nil || IsNil(o.Packed) {
		var ret bool
		return ret
	}
	return *o.Packed
}

// GetPackedOk returns a tuple with the Packed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConfig) GetPackedOk() (*bool, bool) {
	if o == nil || IsNil(o.Packed) {
		return nil, false
	}
	return o.Packed, true
}

// HasPacked returns a boolean if a field has been set.
func (o *DataConfig) HasPacked() bool {
	if o != nil && !IsNil(o.Packed) {
		return true
	}

	return false
}

// SetPacked gets a reference to the given bool and assigns it to the Packed field.
func (o *DataConfig) SetPacked(v bool) {
	o.Packed = &v
}

// GetTrainOnInput returns the TrainOnInput field value if set, zero value otherwise.
func (o *DataConfig) GetTrainOnInput() bool {
	if o == nil || IsNil(o.TrainOnInput) {
		var ret bool
		return ret
	}
	return *o.TrainOnInput
}

// GetTrainOnInputOk returns a tuple with the TrainOnInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataConfig) GetTrainOnInputOk() (*bool, bool) {
	if o == nil || IsNil(o.TrainOnInput) {
		return nil, false
	}
	return o.TrainOnInput, true
}

// HasTrainOnInput returns a boolean if a field has been set.
func (o *DataConfig) HasTrainOnInput() bool {
	if o != nil && !IsNil(o.TrainOnInput) {
		return true
	}

	return false
}

// SetTrainOnInput gets a reference to the given bool and assigns it to the TrainOnInput field.
func (o *DataConfig) SetTrainOnInput(v bool) {
	o.TrainOnInput = &v
}

func (o DataConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataset_id"] = o.DatasetId
	toSerialize["batch_size"] = o.BatchSize
	toSerialize["shuffle"] = o.Shuffle
	toSerialize["data_format"] = o.DataFormat
	if !IsNil(o.ValidationDatasetId) {
		toSerialize["validation_dataset_id"] = o.ValidationDatasetId
	}
	if !IsNil(o.Packed) {
		toSerialize["packed"] = o.Packed
	}
	if !IsNil(o.TrainOnInput) {
		toSerialize["train_on_input"] = o.TrainOnInput
	}
	return toSerialize, nil
}

func (o *DataConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataset_id",
		"batch_size",
		"shuffle",
		"data_format",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataConfig := _DataConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataConfig)

	if err != nil {
		return err
	}

	*o = DataConfig(varDataConfig)

	return err
}

type NullableDataConfig struct {
	value *DataConfig
	isSet bool
}

func (v NullableDataConfig) Get() *DataConfig {
	return v.value
}

func (v *NullableDataConfig) Set(val *DataConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDataConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDataConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataConfig(val *DataConfig) *NullableDataConfig {
	return &NullableDataConfig{value: val, isSet: true}
}

func (v NullableDataConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


