/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryCondition{}

// QueryCondition struct for QueryCondition
type QueryCondition struct {
	Key string `json:"key"`
	Op QueryConditionOp `json:"op"`
	Value NullableAppendRowsRequestRowsInnerValue `json:"value"`
}

type _QueryCondition QueryCondition

// NewQueryCondition instantiates a new QueryCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryCondition(key string, op QueryConditionOp, value NullableAppendRowsRequestRowsInnerValue) *QueryCondition {
	this := QueryCondition{}
	this.Key = key
	this.Op = op
	this.Value = value
	return &this
}

// NewQueryConditionWithDefaults instantiates a new QueryCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryConditionWithDefaults() *QueryCondition {
	this := QueryCondition{}
	return &this
}

// GetKey returns the Key field value
func (o *QueryCondition) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *QueryCondition) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *QueryCondition) SetKey(v string) {
	o.Key = v
}

// GetOp returns the Op field value
func (o *QueryCondition) GetOp() QueryConditionOp {
	if o == nil {
		var ret QueryConditionOp
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *QueryCondition) GetOpOk() (*QueryConditionOp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *QueryCondition) SetOp(v QueryConditionOp) {
	o.Op = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for AppendRowsRequestRowsInnerValue will be returned
func (o *QueryCondition) GetValue() AppendRowsRequestRowsInnerValue {
	if o == nil || o.Value.Get() == nil {
		var ret AppendRowsRequestRowsInnerValue
		return ret
	}

	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryCondition) GetValueOk() (*AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// SetValue sets field value
func (o *QueryCondition) SetValue(v AppendRowsRequestRowsInnerValue) {
	o.Value.Set(&v)
}

func (o QueryCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["op"] = o.Op
	toSerialize["value"] = o.Value.Get()
	return toSerialize, nil
}

func (o *QueryCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"op",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryCondition := _QueryCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryCondition)

	if err != nil {
		return err
	}

	*o = QueryCondition(varQueryCondition)

	return err
}

type NullableQueryCondition struct {
	value *QueryCondition
	isSet bool
}

func (v NullableQueryCondition) Get() *QueryCondition {
	return v.value
}

func (v *NullableQueryCondition) Set(val *QueryCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryCondition(val *QueryCondition) *NullableQueryCondition {
	return &NullableQueryCondition{value: val, isSet: true}
}

func (v NullableQueryCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


