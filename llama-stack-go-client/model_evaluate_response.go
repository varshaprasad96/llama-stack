/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EvaluateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvaluateResponse{}

// EvaluateResponse The response from an evaluation.
type EvaluateResponse struct {
	// The generations from the evaluation.
	Generations []map[string]AppendRowsRequestRowsInnerValue `json:"generations"`
	// The scores from the evaluation.
	Scores map[string]ScoringResult `json:"scores"`
}

type _EvaluateResponse EvaluateResponse

// NewEvaluateResponse instantiates a new EvaluateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvaluateResponse(generations []map[string]AppendRowsRequestRowsInnerValue, scores map[string]ScoringResult) *EvaluateResponse {
	this := EvaluateResponse{}
	this.Generations = generations
	this.Scores = scores
	return &this
}

// NewEvaluateResponseWithDefaults instantiates a new EvaluateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvaluateResponseWithDefaults() *EvaluateResponse {
	this := EvaluateResponse{}
	return &this
}

// GetGenerations returns the Generations field value
func (o *EvaluateResponse) GetGenerations() []map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret []map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Generations
}

// GetGenerationsOk returns a tuple with the Generations field value
// and a boolean to check if the value has been set.
func (o *EvaluateResponse) GetGenerationsOk() ([]map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Generations, true
}

// SetGenerations sets field value
func (o *EvaluateResponse) SetGenerations(v []map[string]AppendRowsRequestRowsInnerValue) {
	o.Generations = v
}

// GetScores returns the Scores field value
func (o *EvaluateResponse) GetScores() map[string]ScoringResult {
	if o == nil {
		var ret map[string]ScoringResult
		return ret
	}

	return o.Scores
}

// GetScoresOk returns a tuple with the Scores field value
// and a boolean to check if the value has been set.
func (o *EvaluateResponse) GetScoresOk() (map[string]ScoringResult, bool) {
	if o == nil {
		return map[string]ScoringResult{}, false
	}
	return o.Scores, true
}

// SetScores sets field value
func (o *EvaluateResponse) SetScores(v map[string]ScoringResult) {
	o.Scores = v
}

func (o EvaluateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvaluateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["generations"] = o.Generations
	toSerialize["scores"] = o.Scores
	return toSerialize, nil
}

func (o *EvaluateResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"generations",
		"scores",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvaluateResponse := _EvaluateResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvaluateResponse)

	if err != nil {
		return err
	}

	*o = EvaluateResponse(varEvaluateResponse)

	return err
}

type NullableEvaluateResponse struct {
	value *EvaluateResponse
	isSet bool
}

func (v NullableEvaluateResponse) Get() *EvaluateResponse {
	return v.value
}

func (v *NullableEvaluateResponse) Set(val *EvaluateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEvaluateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEvaluateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvaluateResponse(val *EvaluateResponse) *NullableEvaluateResponse {
	return &NullableEvaluateResponse{value: val, isSet: true}
}

func (v NullableEvaluateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvaluateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


