/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenAIModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenAIModel{}

// OpenAIModel A model from OpenAI.
type OpenAIModel struct {
	Id string `json:"id"`
	Object string `json:"object"`
	Created int32 `json:"created"`
	OwnedBy string `json:"owned_by"`
}

type _OpenAIModel OpenAIModel

// NewOpenAIModel instantiates a new OpenAIModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAIModel(id string, object string, created int32, ownedBy string) *OpenAIModel {
	this := OpenAIModel{}
	this.Id = id
	this.Object = object
	this.Created = created
	this.OwnedBy = ownedBy
	return &this
}

// NewOpenAIModelWithDefaults instantiates a new OpenAIModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAIModelWithDefaults() *OpenAIModel {
	this := OpenAIModel{}
	var object string = "model"
	this.Object = object
	return &this
}

// GetId returns the Id field value
func (o *OpenAIModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OpenAIModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OpenAIModel) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value
func (o *OpenAIModel) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *OpenAIModel) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *OpenAIModel) SetObject(v string) {
	o.Object = v
}

// GetCreated returns the Created field value
func (o *OpenAIModel) GetCreated() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *OpenAIModel) GetCreatedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *OpenAIModel) SetCreated(v int32) {
	o.Created = v
}

// GetOwnedBy returns the OwnedBy field value
func (o *OpenAIModel) GetOwnedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OwnedBy
}

// GetOwnedByOk returns a tuple with the OwnedBy field value
// and a boolean to check if the value has been set.
func (o *OpenAIModel) GetOwnedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnedBy, true
}

// SetOwnedBy sets field value
func (o *OpenAIModel) SetOwnedBy(v string) {
	o.OwnedBy = v
}

func (o OpenAIModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenAIModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object"] = o.Object
	toSerialize["created"] = o.Created
	toSerialize["owned_by"] = o.OwnedBy
	return toSerialize, nil
}

func (o *OpenAIModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object",
		"created",
		"owned_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenAIModel := _OpenAIModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenAIModel)

	if err != nil {
		return err
	}

	*o = OpenAIModel(varOpenAIModel)

	return err
}

type NullableOpenAIModel struct {
	value *OpenAIModel
	isSet bool
}

func (v NullableOpenAIModel) Get() *OpenAIModel {
	return v.value
}

func (v *NullableOpenAIModel) Set(val *OpenAIModel) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIModel) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIModel(val *OpenAIModel) *NullableOpenAIModel {
	return &NullableOpenAIModel{value: val, isSet: true}
}

func (v NullableOpenAIModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


