/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the BatchChatCompletionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchChatCompletionRequest{}

// BatchChatCompletionRequest struct for BatchChatCompletionRequest
type BatchChatCompletionRequest struct {
	ModelId string `json:"model_id"`
	MessagesBatch [][]Message `json:"messages_batch"`
	SamplingParams *SamplingParams `json:"sampling_params,omitempty"`
	Tools []ToolDefinition `json:"tools,omitempty"`
	ToolConfig *ToolConfig `json:"tool_config,omitempty"`
	ResponseFormat *ResponseFormat `json:"response_format,omitempty"`
	Logprobs *LogProbConfig `json:"logprobs,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BatchChatCompletionRequest BatchChatCompletionRequest

// NewBatchChatCompletionRequest instantiates a new BatchChatCompletionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchChatCompletionRequest(modelId string, messagesBatch [][]Message) *BatchChatCompletionRequest {
	this := BatchChatCompletionRequest{}
	this.ModelId = modelId
	this.MessagesBatch = messagesBatch
	return &this
}

// NewBatchChatCompletionRequestWithDefaults instantiates a new BatchChatCompletionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchChatCompletionRequestWithDefaults() *BatchChatCompletionRequest {
	this := BatchChatCompletionRequest{}
	return &this
}

// GetModelId returns the ModelId field value
func (o *BatchChatCompletionRequest) GetModelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModelId
}

// GetModelIdOk returns a tuple with the ModelId field value
// and a boolean to check if the value has been set.
func (o *BatchChatCompletionRequest) GetModelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelId, true
}

// SetModelId sets field value
func (o *BatchChatCompletionRequest) SetModelId(v string) {
	o.ModelId = v
}

// GetMessagesBatch returns the MessagesBatch field value
func (o *BatchChatCompletionRequest) GetMessagesBatch() [][]Message {
	if o == nil {
		var ret [][]Message
		return ret
	}

	return o.MessagesBatch
}

// GetMessagesBatchOk returns a tuple with the MessagesBatch field value
// and a boolean to check if the value has been set.
func (o *BatchChatCompletionRequest) GetMessagesBatchOk() ([][]Message, bool) {
	if o == nil {
		return nil, false
	}
	return o.MessagesBatch, true
}

// SetMessagesBatch sets field value
func (o *BatchChatCompletionRequest) SetMessagesBatch(v [][]Message) {
	o.MessagesBatch = v
}

// GetSamplingParams returns the SamplingParams field value if set, zero value otherwise.
func (o *BatchChatCompletionRequest) GetSamplingParams() SamplingParams {
	if o == nil || IsNil(o.SamplingParams) {
		var ret SamplingParams
		return ret
	}
	return *o.SamplingParams
}

// GetSamplingParamsOk returns a tuple with the SamplingParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchChatCompletionRequest) GetSamplingParamsOk() (*SamplingParams, bool) {
	if o == nil || IsNil(o.SamplingParams) {
		return nil, false
	}
	return o.SamplingParams, true
}

// HasSamplingParams returns a boolean if a field has been set.
func (o *BatchChatCompletionRequest) HasSamplingParams() bool {
	if o != nil && !IsNil(o.SamplingParams) {
		return true
	}

	return false
}

// SetSamplingParams gets a reference to the given SamplingParams and assigns it to the SamplingParams field.
func (o *BatchChatCompletionRequest) SetSamplingParams(v SamplingParams) {
	o.SamplingParams = &v
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *BatchChatCompletionRequest) GetTools() []ToolDefinition {
	if o == nil || IsNil(o.Tools) {
		var ret []ToolDefinition
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchChatCompletionRequest) GetToolsOk() ([]ToolDefinition, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *BatchChatCompletionRequest) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []ToolDefinition and assigns it to the Tools field.
func (o *BatchChatCompletionRequest) SetTools(v []ToolDefinition) {
	o.Tools = v
}

// GetToolConfig returns the ToolConfig field value if set, zero value otherwise.
func (o *BatchChatCompletionRequest) GetToolConfig() ToolConfig {
	if o == nil || IsNil(o.ToolConfig) {
		var ret ToolConfig
		return ret
	}
	return *o.ToolConfig
}

// GetToolConfigOk returns a tuple with the ToolConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchChatCompletionRequest) GetToolConfigOk() (*ToolConfig, bool) {
	if o == nil || IsNil(o.ToolConfig) {
		return nil, false
	}
	return o.ToolConfig, true
}

// HasToolConfig returns a boolean if a field has been set.
func (o *BatchChatCompletionRequest) HasToolConfig() bool {
	if o != nil && !IsNil(o.ToolConfig) {
		return true
	}

	return false
}

// SetToolConfig gets a reference to the given ToolConfig and assigns it to the ToolConfig field.
func (o *BatchChatCompletionRequest) SetToolConfig(v ToolConfig) {
	o.ToolConfig = &v
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise.
func (o *BatchChatCompletionRequest) GetResponseFormat() ResponseFormat {
	if o == nil || IsNil(o.ResponseFormat) {
		var ret ResponseFormat
		return ret
	}
	return *o.ResponseFormat
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchChatCompletionRequest) GetResponseFormatOk() (*ResponseFormat, bool) {
	if o == nil || IsNil(o.ResponseFormat) {
		return nil, false
	}
	return o.ResponseFormat, true
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *BatchChatCompletionRequest) HasResponseFormat() bool {
	if o != nil && !IsNil(o.ResponseFormat) {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given ResponseFormat and assigns it to the ResponseFormat field.
func (o *BatchChatCompletionRequest) SetResponseFormat(v ResponseFormat) {
	o.ResponseFormat = &v
}

// GetLogprobs returns the Logprobs field value if set, zero value otherwise.
func (o *BatchChatCompletionRequest) GetLogprobs() LogProbConfig {
	if o == nil || IsNil(o.Logprobs) {
		var ret LogProbConfig
		return ret
	}
	return *o.Logprobs
}

// GetLogprobsOk returns a tuple with the Logprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchChatCompletionRequest) GetLogprobsOk() (*LogProbConfig, bool) {
	if o == nil || IsNil(o.Logprobs) {
		return nil, false
	}
	return o.Logprobs, true
}

// HasLogprobs returns a boolean if a field has been set.
func (o *BatchChatCompletionRequest) HasLogprobs() bool {
	if o != nil && !IsNil(o.Logprobs) {
		return true
	}

	return false
}

// SetLogprobs gets a reference to the given LogProbConfig and assigns it to the Logprobs field.
func (o *BatchChatCompletionRequest) SetLogprobs(v LogProbConfig) {
	o.Logprobs = &v
}

func (o BatchChatCompletionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchChatCompletionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model_id"] = o.ModelId
	toSerialize["messages_batch"] = o.MessagesBatch
	if !IsNil(o.SamplingParams) {
		toSerialize["sampling_params"] = o.SamplingParams
	}
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	if !IsNil(o.ToolConfig) {
		toSerialize["tool_config"] = o.ToolConfig
	}
	if !IsNil(o.ResponseFormat) {
		toSerialize["response_format"] = o.ResponseFormat
	}
	if !IsNil(o.Logprobs) {
		toSerialize["logprobs"] = o.Logprobs
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BatchChatCompletionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model_id",
		"messages_batch",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchChatCompletionRequest := _BatchChatCompletionRequest{}

	err = json.Unmarshal(data, &varBatchChatCompletionRequest)

	if err != nil {
		return err
	}

	*o = BatchChatCompletionRequest(varBatchChatCompletionRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model_id")
		delete(additionalProperties, "messages_batch")
		delete(additionalProperties, "sampling_params")
		delete(additionalProperties, "tools")
		delete(additionalProperties, "tool_config")
		delete(additionalProperties, "response_format")
		delete(additionalProperties, "logprobs")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBatchChatCompletionRequest struct {
	value *BatchChatCompletionRequest
	isSet bool
}

func (v NullableBatchChatCompletionRequest) Get() *BatchChatCompletionRequest {
	return v.value
}

func (v *NullableBatchChatCompletionRequest) Set(val *BatchChatCompletionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchChatCompletionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchChatCompletionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchChatCompletionRequest(val *BatchChatCompletionRequest) *NullableBatchChatCompletionRequest {
	return &NullableBatchChatCompletionRequest{value: val, isSet: true}
}

func (v NullableBatchChatCompletionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchChatCompletionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


