/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OpenAIChoiceDelta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenAIChoiceDelta{}

// OpenAIChoiceDelta A delta from an OpenAI-compatible chat completion streaming response.
type OpenAIChoiceDelta struct {
	// (Optional) The content of the delta
	Content *string `json:"content,omitempty"`
	// (Optional) The refusal of the delta
	Refusal *string `json:"refusal,omitempty"`
	// (Optional) The role of the delta
	Role *string `json:"role,omitempty"`
	// (Optional) The tool calls of the delta
	ToolCalls []OpenAIChatCompletionToolCall `json:"tool_calls,omitempty"`
}

// NewOpenAIChoiceDelta instantiates a new OpenAIChoiceDelta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAIChoiceDelta() *OpenAIChoiceDelta {
	this := OpenAIChoiceDelta{}
	return &this
}

// NewOpenAIChoiceDeltaWithDefaults instantiates a new OpenAIChoiceDelta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAIChoiceDeltaWithDefaults() *OpenAIChoiceDelta {
	this := OpenAIChoiceDelta{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *OpenAIChoiceDelta) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIChoiceDelta) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *OpenAIChoiceDelta) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *OpenAIChoiceDelta) SetContent(v string) {
	o.Content = &v
}

// GetRefusal returns the Refusal field value if set, zero value otherwise.
func (o *OpenAIChoiceDelta) GetRefusal() string {
	if o == nil || IsNil(o.Refusal) {
		var ret string
		return ret
	}
	return *o.Refusal
}

// GetRefusalOk returns a tuple with the Refusal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIChoiceDelta) GetRefusalOk() (*string, bool) {
	if o == nil || IsNil(o.Refusal) {
		return nil, false
	}
	return o.Refusal, true
}

// HasRefusal returns a boolean if a field has been set.
func (o *OpenAIChoiceDelta) HasRefusal() bool {
	if o != nil && !IsNil(o.Refusal) {
		return true
	}

	return false
}

// SetRefusal gets a reference to the given string and assigns it to the Refusal field.
func (o *OpenAIChoiceDelta) SetRefusal(v string) {
	o.Refusal = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *OpenAIChoiceDelta) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIChoiceDelta) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *OpenAIChoiceDelta) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *OpenAIChoiceDelta) SetRole(v string) {
	o.Role = &v
}

// GetToolCalls returns the ToolCalls field value if set, zero value otherwise.
func (o *OpenAIChoiceDelta) GetToolCalls() []OpenAIChatCompletionToolCall {
	if o == nil || IsNil(o.ToolCalls) {
		var ret []OpenAIChatCompletionToolCall
		return ret
	}
	return o.ToolCalls
}

// GetToolCallsOk returns a tuple with the ToolCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIChoiceDelta) GetToolCallsOk() ([]OpenAIChatCompletionToolCall, bool) {
	if o == nil || IsNil(o.ToolCalls) {
		return nil, false
	}
	return o.ToolCalls, true
}

// HasToolCalls returns a boolean if a field has been set.
func (o *OpenAIChoiceDelta) HasToolCalls() bool {
	if o != nil && !IsNil(o.ToolCalls) {
		return true
	}

	return false
}

// SetToolCalls gets a reference to the given []OpenAIChatCompletionToolCall and assigns it to the ToolCalls field.
func (o *OpenAIChoiceDelta) SetToolCalls(v []OpenAIChatCompletionToolCall) {
	o.ToolCalls = v
}

func (o OpenAIChoiceDelta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenAIChoiceDelta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Refusal) {
		toSerialize["refusal"] = o.Refusal
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.ToolCalls) {
		toSerialize["tool_calls"] = o.ToolCalls
	}
	return toSerialize, nil
}

type NullableOpenAIChoiceDelta struct {
	value *OpenAIChoiceDelta
	isSet bool
}

func (v NullableOpenAIChoiceDelta) Get() *OpenAIChoiceDelta {
	return v.value
}

func (v *NullableOpenAIChoiceDelta) Set(val *OpenAIChoiceDelta) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIChoiceDelta) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIChoiceDelta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIChoiceDelta(val *OpenAIChoiceDelta) *NullableOpenAIChoiceDelta {
	return &NullableOpenAIChoiceDelta{value: val, isSet: true}
}

func (v NullableOpenAIChoiceDelta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIChoiceDelta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


