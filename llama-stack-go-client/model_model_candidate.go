/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelCandidate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelCandidate{}

// ModelCandidate A model candidate for evaluation.
type ModelCandidate struct {
	Type string `json:"type"`
	// The model ID to evaluate.
	Model string `json:"model"`
	// The sampling parameters for the model.
	SamplingParams SamplingParams `json:"sampling_params"`
	// (Optional) The system message providing instructions or context to the model.
	SystemMessage *SystemMessage `json:"system_message,omitempty"`
}

type _ModelCandidate ModelCandidate

// NewModelCandidate instantiates a new ModelCandidate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelCandidate(type_ string, model string, samplingParams SamplingParams) *ModelCandidate {
	this := ModelCandidate{}
	this.Type = type_
	this.Model = model
	this.SamplingParams = samplingParams
	return &this
}

// NewModelCandidateWithDefaults instantiates a new ModelCandidate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelCandidateWithDefaults() *ModelCandidate {
	this := ModelCandidate{}
	var type_ string = "model"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *ModelCandidate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ModelCandidate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ModelCandidate) SetType(v string) {
	o.Type = v
}

// GetModel returns the Model field value
func (o *ModelCandidate) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ModelCandidate) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ModelCandidate) SetModel(v string) {
	o.Model = v
}

// GetSamplingParams returns the SamplingParams field value
func (o *ModelCandidate) GetSamplingParams() SamplingParams {
	if o == nil {
		var ret SamplingParams
		return ret
	}

	return o.SamplingParams
}

// GetSamplingParamsOk returns a tuple with the SamplingParams field value
// and a boolean to check if the value has been set.
func (o *ModelCandidate) GetSamplingParamsOk() (*SamplingParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SamplingParams, true
}

// SetSamplingParams sets field value
func (o *ModelCandidate) SetSamplingParams(v SamplingParams) {
	o.SamplingParams = v
}

// GetSystemMessage returns the SystemMessage field value if set, zero value otherwise.
func (o *ModelCandidate) GetSystemMessage() SystemMessage {
	if o == nil || IsNil(o.SystemMessage) {
		var ret SystemMessage
		return ret
	}
	return *o.SystemMessage
}

// GetSystemMessageOk returns a tuple with the SystemMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCandidate) GetSystemMessageOk() (*SystemMessage, bool) {
	if o == nil || IsNil(o.SystemMessage) {
		return nil, false
	}
	return o.SystemMessage, true
}

// HasSystemMessage returns a boolean if a field has been set.
func (o *ModelCandidate) HasSystemMessage() bool {
	if o != nil && !IsNil(o.SystemMessage) {
		return true
	}

	return false
}

// SetSystemMessage gets a reference to the given SystemMessage and assigns it to the SystemMessage field.
func (o *ModelCandidate) SetSystemMessage(v SystemMessage) {
	o.SystemMessage = &v
}

func (o ModelCandidate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelCandidate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["model"] = o.Model
	toSerialize["sampling_params"] = o.SamplingParams
	if !IsNil(o.SystemMessage) {
		toSerialize["system_message"] = o.SystemMessage
	}
	return toSerialize, nil
}

func (o *ModelCandidate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"model",
		"sampling_params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelCandidate := _ModelCandidate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelCandidate)

	if err != nil {
		return err
	}

	*o = ModelCandidate(varModelCandidate)

	return err
}

type NullableModelCandidate struct {
	value *ModelCandidate
	isSet bool
}

func (v NullableModelCandidate) Get() *ModelCandidate {
	return v.value
}

func (v *NullableModelCandidate) Set(val *ModelCandidate) {
	v.value = val
	v.isSet = true
}

func (v NullableModelCandidate) IsSet() bool {
	return v.isSet
}

func (v *NullableModelCandidate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelCandidate(val *ModelCandidate) *NullableModelCandidate {
	return &NullableModelCandidate{value: val, isSet: true}
}

func (v NullableModelCandidate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelCandidate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


