/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ToolCallDeltaToolCall - struct for ToolCallDeltaToolCall
type ToolCallDeltaToolCall struct {
	ToolCall *ToolCall
	String *string
}

// ToolCallAsToolCallDeltaToolCall is a convenience function that returns ToolCall wrapped in ToolCallDeltaToolCall
func ToolCallAsToolCallDeltaToolCall(v *ToolCall) ToolCallDeltaToolCall {
	return ToolCallDeltaToolCall{
		ToolCall: v,
	}
}

// stringAsToolCallDeltaToolCall is a convenience function that returns string wrapped in ToolCallDeltaToolCall
func StringAsToolCallDeltaToolCall(v *string) ToolCallDeltaToolCall {
	return ToolCallDeltaToolCall{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ToolCallDeltaToolCall) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ToolCall
	err = newStrictDecoder(data).Decode(&dst.ToolCall)
	if err == nil {
		jsonToolCall, _ := json.Marshal(dst.ToolCall)
		if string(jsonToolCall) == "{}" { // empty struct
			dst.ToolCall = nil
		} else {
			if err = validator.Validate(dst.ToolCall); err != nil {
				dst.ToolCall = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolCall = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ToolCall = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ToolCallDeltaToolCall)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ToolCallDeltaToolCall)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ToolCallDeltaToolCall) MarshalJSON() ([]byte, error) {
	if src.ToolCall != nil {
		return json.Marshal(&src.ToolCall)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ToolCallDeltaToolCall) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ToolCall != nil {
		return obj.ToolCall
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ToolCallDeltaToolCall) GetActualInstanceValue() (interface{}) {
	if obj.ToolCall != nil {
		return *obj.ToolCall
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableToolCallDeltaToolCall struct {
	value *ToolCallDeltaToolCall
	isSet bool
}

func (v NullableToolCallDeltaToolCall) Get() *ToolCallDeltaToolCall {
	return v.value
}

func (v *NullableToolCallDeltaToolCall) Set(val *ToolCallDeltaToolCall) {
	v.value = val
	v.isSet = true
}

func (v NullableToolCallDeltaToolCall) IsSet() bool {
	return v.isSet
}

func (v *NullableToolCallDeltaToolCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolCallDeltaToolCall(val *ToolCallDeltaToolCall) *NullableToolCallDeltaToolCall {
	return &NullableToolCallDeltaToolCall{value: val, isSet: true}
}

func (v NullableToolCallDeltaToolCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolCallDeltaToolCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


