/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ChatCompletionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionRequest{}

// ChatCompletionRequest struct for ChatCompletionRequest
type ChatCompletionRequest struct {
	// The identifier of the model to use. The model must be registered with Llama Stack and available via the /models endpoint.
	ModelId string `json:"model_id"`
	// List of messages in the conversation
	Messages []Message `json:"messages"`
	// Parameters to control the sampling strategy
	SamplingParams *SamplingParams `json:"sampling_params,omitempty"`
	// (Optional) List of tool definitions available to the model
	Tools []ToolDefinition `json:"tools,omitempty"`
	// (Optional) Whether tool use is required or automatic. Defaults to ToolChoice.auto. .. deprecated:: Use tool_config instead.
	ToolChoice *string `json:"tool_choice,omitempty"`
	// (Optional) Instructs the model how to format tool calls. By default, Llama Stack will attempt to use a format that is best adapted to the model. - `ToolPromptFormat.json`: The tool calls are formatted as a JSON object. - `ToolPromptFormat.function_tag`: The tool calls are enclosed in a <function=function_name> tag. - `ToolPromptFormat.python_list`: The tool calls are output as Python syntax -- a list of function calls. .. deprecated:: Use tool_config instead.
	ToolPromptFormat *string `json:"tool_prompt_format,omitempty"`
	// (Optional) Grammar specification for guided (structured) decoding. There are two options: - `ResponseFormat.json_schema`: The grammar is a JSON schema. Most providers support this format. - `ResponseFormat.grammar`: The grammar is a BNF grammar. This format is more flexible, but not all providers support it.
	ResponseFormat *ResponseFormat `json:"response_format,omitempty"`
	// (Optional) If True, generate an SSE event stream of the response. Defaults to False.
	Stream *bool `json:"stream,omitempty"`
	Logprobs *ChatCompletionRequestLogprobs `json:"logprobs,omitempty"`
	// (Optional) Configuration for tool use.
	ToolConfig *ToolConfig `json:"tool_config,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChatCompletionRequest ChatCompletionRequest

// NewChatCompletionRequest instantiates a new ChatCompletionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionRequest(modelId string, messages []Message) *ChatCompletionRequest {
	this := ChatCompletionRequest{}
	this.ModelId = modelId
	this.Messages = messages
	return &this
}

// NewChatCompletionRequestWithDefaults instantiates a new ChatCompletionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionRequestWithDefaults() *ChatCompletionRequest {
	this := ChatCompletionRequest{}
	return &this
}

// GetModelId returns the ModelId field value
func (o *ChatCompletionRequest) GetModelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModelId
}

// GetModelIdOk returns a tuple with the ModelId field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetModelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelId, true
}

// SetModelId sets field value
func (o *ChatCompletionRequest) SetModelId(v string) {
	o.ModelId = v
}

// GetMessages returns the Messages field value
func (o *ChatCompletionRequest) GetMessages() []Message {
	if o == nil {
		var ret []Message
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetMessagesOk() ([]Message, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *ChatCompletionRequest) SetMessages(v []Message) {
	o.Messages = v
}

// GetSamplingParams returns the SamplingParams field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetSamplingParams() SamplingParams {
	if o == nil || IsNil(o.SamplingParams) {
		var ret SamplingParams
		return ret
	}
	return *o.SamplingParams
}

// GetSamplingParamsOk returns a tuple with the SamplingParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetSamplingParamsOk() (*SamplingParams, bool) {
	if o == nil || IsNil(o.SamplingParams) {
		return nil, false
	}
	return o.SamplingParams, true
}

// HasSamplingParams returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasSamplingParams() bool {
	if o != nil && !IsNil(o.SamplingParams) {
		return true
	}

	return false
}

// SetSamplingParams gets a reference to the given SamplingParams and assigns it to the SamplingParams field.
func (o *ChatCompletionRequest) SetSamplingParams(v SamplingParams) {
	o.SamplingParams = &v
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetTools() []ToolDefinition {
	if o == nil || IsNil(o.Tools) {
		var ret []ToolDefinition
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetToolsOk() ([]ToolDefinition, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []ToolDefinition and assigns it to the Tools field.
func (o *ChatCompletionRequest) SetTools(v []ToolDefinition) {
	o.Tools = v
}

// GetToolChoice returns the ToolChoice field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetToolChoice() string {
	if o == nil || IsNil(o.ToolChoice) {
		var ret string
		return ret
	}
	return *o.ToolChoice
}

// GetToolChoiceOk returns a tuple with the ToolChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetToolChoiceOk() (*string, bool) {
	if o == nil || IsNil(o.ToolChoice) {
		return nil, false
	}
	return o.ToolChoice, true
}

// HasToolChoice returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasToolChoice() bool {
	if o != nil && !IsNil(o.ToolChoice) {
		return true
	}

	return false
}

// SetToolChoice gets a reference to the given string and assigns it to the ToolChoice field.
func (o *ChatCompletionRequest) SetToolChoice(v string) {
	o.ToolChoice = &v
}

// GetToolPromptFormat returns the ToolPromptFormat field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetToolPromptFormat() string {
	if o == nil || IsNil(o.ToolPromptFormat) {
		var ret string
		return ret
	}
	return *o.ToolPromptFormat
}

// GetToolPromptFormatOk returns a tuple with the ToolPromptFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetToolPromptFormatOk() (*string, bool) {
	if o == nil || IsNil(o.ToolPromptFormat) {
		return nil, false
	}
	return o.ToolPromptFormat, true
}

// HasToolPromptFormat returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasToolPromptFormat() bool {
	if o != nil && !IsNil(o.ToolPromptFormat) {
		return true
	}

	return false
}

// SetToolPromptFormat gets a reference to the given string and assigns it to the ToolPromptFormat field.
func (o *ChatCompletionRequest) SetToolPromptFormat(v string) {
	o.ToolPromptFormat = &v
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetResponseFormat() ResponseFormat {
	if o == nil || IsNil(o.ResponseFormat) {
		var ret ResponseFormat
		return ret
	}
	return *o.ResponseFormat
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetResponseFormatOk() (*ResponseFormat, bool) {
	if o == nil || IsNil(o.ResponseFormat) {
		return nil, false
	}
	return o.ResponseFormat, true
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasResponseFormat() bool {
	if o != nil && !IsNil(o.ResponseFormat) {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given ResponseFormat and assigns it to the ResponseFormat field.
func (o *ChatCompletionRequest) SetResponseFormat(v ResponseFormat) {
	o.ResponseFormat = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *ChatCompletionRequest) SetStream(v bool) {
	o.Stream = &v
}

// GetLogprobs returns the Logprobs field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetLogprobs() ChatCompletionRequestLogprobs {
	if o == nil || IsNil(o.Logprobs) {
		var ret ChatCompletionRequestLogprobs
		return ret
	}
	return *o.Logprobs
}

// GetLogprobsOk returns a tuple with the Logprobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetLogprobsOk() (*ChatCompletionRequestLogprobs, bool) {
	if o == nil || IsNil(o.Logprobs) {
		return nil, false
	}
	return o.Logprobs, true
}

// HasLogprobs returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasLogprobs() bool {
	if o != nil && !IsNil(o.Logprobs) {
		return true
	}

	return false
}

// SetLogprobs gets a reference to the given ChatCompletionRequestLogprobs and assigns it to the Logprobs field.
func (o *ChatCompletionRequest) SetLogprobs(v ChatCompletionRequestLogprobs) {
	o.Logprobs = &v
}

// GetToolConfig returns the ToolConfig field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetToolConfig() ToolConfig {
	if o == nil || IsNil(o.ToolConfig) {
		var ret ToolConfig
		return ret
	}
	return *o.ToolConfig
}

// GetToolConfigOk returns a tuple with the ToolConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetToolConfigOk() (*ToolConfig, bool) {
	if o == nil || IsNil(o.ToolConfig) {
		return nil, false
	}
	return o.ToolConfig, true
}

// HasToolConfig returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasToolConfig() bool {
	if o != nil && !IsNil(o.ToolConfig) {
		return true
	}

	return false
}

// SetToolConfig gets a reference to the given ToolConfig and assigns it to the ToolConfig field.
func (o *ChatCompletionRequest) SetToolConfig(v ToolConfig) {
	o.ToolConfig = &v
}

func (o ChatCompletionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model_id"] = o.ModelId
	toSerialize["messages"] = o.Messages
	if !IsNil(o.SamplingParams) {
		toSerialize["sampling_params"] = o.SamplingParams
	}
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	if !IsNil(o.ToolChoice) {
		toSerialize["tool_choice"] = o.ToolChoice
	}
	if !IsNil(o.ToolPromptFormat) {
		toSerialize["tool_prompt_format"] = o.ToolPromptFormat
	}
	if !IsNil(o.ResponseFormat) {
		toSerialize["response_format"] = o.ResponseFormat
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.Logprobs) {
		toSerialize["logprobs"] = o.Logprobs
	}
	if !IsNil(o.ToolConfig) {
		toSerialize["tool_config"] = o.ToolConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChatCompletionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model_id",
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatCompletionRequest := _ChatCompletionRequest{}

	err = json.Unmarshal(data, &varChatCompletionRequest)

	if err != nil {
		return err
	}

	*o = ChatCompletionRequest(varChatCompletionRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model_id")
		delete(additionalProperties, "messages")
		delete(additionalProperties, "sampling_params")
		delete(additionalProperties, "tools")
		delete(additionalProperties, "tool_choice")
		delete(additionalProperties, "tool_prompt_format")
		delete(additionalProperties, "response_format")
		delete(additionalProperties, "stream")
		delete(additionalProperties, "logprobs")
		delete(additionalProperties, "tool_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChatCompletionRequest struct {
	value *ChatCompletionRequest
	isSet bool
}

func (v NullableChatCompletionRequest) Get() *ChatCompletionRequest {
	return v.value
}

func (v *NullableChatCompletionRequest) Set(val *ChatCompletionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionRequest(val *ChatCompletionRequest) *NullableChatCompletionRequest {
	return &NullableChatCompletionRequest{value: val, isSet: true}
}

func (v NullableChatCompletionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


