/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// InterleavedContentItem - struct for InterleavedContentItem
type InterleavedContentItem struct {
	ImageContentItem *ImageContentItem
	TextContentItem *TextContentItem
}

// ImageContentItemAsInterleavedContentItem is a convenience function that returns ImageContentItem wrapped in InterleavedContentItem
func ImageContentItemAsInterleavedContentItem(v *ImageContentItem) InterleavedContentItem {
	return InterleavedContentItem{
		ImageContentItem: v,
	}
}

// TextContentItemAsInterleavedContentItem is a convenience function that returns TextContentItem wrapped in InterleavedContentItem
func TextContentItemAsInterleavedContentItem(v *TextContentItem) InterleavedContentItem {
	return InterleavedContentItem{
		TextContentItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *InterleavedContentItem) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ImageContentItem
	err = newStrictDecoder(data).Decode(&dst.ImageContentItem)
	if err == nil {
		jsonImageContentItem, _ := json.Marshal(dst.ImageContentItem)
		if string(jsonImageContentItem) == "{}" { // empty struct
			dst.ImageContentItem = nil
		} else {
			if err = validator.Validate(dst.ImageContentItem); err != nil {
				dst.ImageContentItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.ImageContentItem = nil
	}

	// try to unmarshal data into TextContentItem
	err = newStrictDecoder(data).Decode(&dst.TextContentItem)
	if err == nil {
		jsonTextContentItem, _ := json.Marshal(dst.TextContentItem)
		if string(jsonTextContentItem) == "{}" { // empty struct
			dst.TextContentItem = nil
		} else {
			if err = validator.Validate(dst.TextContentItem); err != nil {
				dst.TextContentItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextContentItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ImageContentItem = nil
		dst.TextContentItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(InterleavedContentItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(InterleavedContentItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InterleavedContentItem) MarshalJSON() ([]byte, error) {
	if src.ImageContentItem != nil {
		return json.Marshal(&src.ImageContentItem)
	}

	if src.TextContentItem != nil {
		return json.Marshal(&src.TextContentItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InterleavedContentItem) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ImageContentItem != nil {
		return obj.ImageContentItem
	}

	if obj.TextContentItem != nil {
		return obj.TextContentItem
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj InterleavedContentItem) GetActualInstanceValue() (interface{}) {
	if obj.ImageContentItem != nil {
		return *obj.ImageContentItem
	}

	if obj.TextContentItem != nil {
		return *obj.TextContentItem
	}

	// all schemas are nil
	return nil
}

type NullableInterleavedContentItem struct {
	value *InterleavedContentItem
	isSet bool
}

func (v NullableInterleavedContentItem) Get() *InterleavedContentItem {
	return v.value
}

func (v *NullableInterleavedContentItem) Set(val *InterleavedContentItem) {
	v.value = val
	v.isSet = true
}

func (v NullableInterleavedContentItem) IsSet() bool {
	return v.isSet
}

func (v *NullableInterleavedContentItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterleavedContentItem(val *InterleavedContentItem) *NullableInterleavedContentItem {
	return &NullableInterleavedContentItem{value: val, isSet: true}
}

func (v NullableInterleavedContentItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterleavedContentItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


