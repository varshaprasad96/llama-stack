/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Message - struct for Message
type Message struct {
	CompletionMessage *CompletionMessage
	SystemMessage *SystemMessage
	ToolResponseMessage *ToolResponseMessage
	UserMessage *UserMessage
}

// CompletionMessageAsMessage is a convenience function that returns CompletionMessage wrapped in Message
func CompletionMessageAsMessage(v *CompletionMessage) Message {
	return Message{
		CompletionMessage: v,
	}
}

// SystemMessageAsMessage is a convenience function that returns SystemMessage wrapped in Message
func SystemMessageAsMessage(v *SystemMessage) Message {
	return Message{
		SystemMessage: v,
	}
}

// ToolResponseMessageAsMessage is a convenience function that returns ToolResponseMessage wrapped in Message
func ToolResponseMessageAsMessage(v *ToolResponseMessage) Message {
	return Message{
		ToolResponseMessage: v,
	}
}

// UserMessageAsMessage is a convenience function that returns UserMessage wrapped in Message
func UserMessageAsMessage(v *UserMessage) Message {
	return Message{
		UserMessage: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Message) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CompletionMessage
	err = newStrictDecoder(data).Decode(&dst.CompletionMessage)
	if err == nil {
		jsonCompletionMessage, _ := json.Marshal(dst.CompletionMessage)
		if string(jsonCompletionMessage) == "{}" { // empty struct
			dst.CompletionMessage = nil
		} else {
			if err = validator.Validate(dst.CompletionMessage); err != nil {
				dst.CompletionMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.CompletionMessage = nil
	}

	// try to unmarshal data into SystemMessage
	err = newStrictDecoder(data).Decode(&dst.SystemMessage)
	if err == nil {
		jsonSystemMessage, _ := json.Marshal(dst.SystemMessage)
		if string(jsonSystemMessage) == "{}" { // empty struct
			dst.SystemMessage = nil
		} else {
			if err = validator.Validate(dst.SystemMessage); err != nil {
				dst.SystemMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.SystemMessage = nil
	}

	// try to unmarshal data into ToolResponseMessage
	err = newStrictDecoder(data).Decode(&dst.ToolResponseMessage)
	if err == nil {
		jsonToolResponseMessage, _ := json.Marshal(dst.ToolResponseMessage)
		if string(jsonToolResponseMessage) == "{}" { // empty struct
			dst.ToolResponseMessage = nil
		} else {
			if err = validator.Validate(dst.ToolResponseMessage); err != nil {
				dst.ToolResponseMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolResponseMessage = nil
	}

	// try to unmarshal data into UserMessage
	err = newStrictDecoder(data).Decode(&dst.UserMessage)
	if err == nil {
		jsonUserMessage, _ := json.Marshal(dst.UserMessage)
		if string(jsonUserMessage) == "{}" { // empty struct
			dst.UserMessage = nil
		} else {
			if err = validator.Validate(dst.UserMessage); err != nil {
				dst.UserMessage = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserMessage = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CompletionMessage = nil
		dst.SystemMessage = nil
		dst.ToolResponseMessage = nil
		dst.UserMessage = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Message)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Message)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Message) MarshalJSON() ([]byte, error) {
	if src.CompletionMessage != nil {
		return json.Marshal(&src.CompletionMessage)
	}

	if src.SystemMessage != nil {
		return json.Marshal(&src.SystemMessage)
	}

	if src.ToolResponseMessage != nil {
		return json.Marshal(&src.ToolResponseMessage)
	}

	if src.UserMessage != nil {
		return json.Marshal(&src.UserMessage)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Message) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CompletionMessage != nil {
		return obj.CompletionMessage
	}

	if obj.SystemMessage != nil {
		return obj.SystemMessage
	}

	if obj.ToolResponseMessage != nil {
		return obj.ToolResponseMessage
	}

	if obj.UserMessage != nil {
		return obj.UserMessage
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Message) GetActualInstanceValue() (interface{}) {
	if obj.CompletionMessage != nil {
		return *obj.CompletionMessage
	}

	if obj.SystemMessage != nil {
		return *obj.SystemMessage
	}

	if obj.ToolResponseMessage != nil {
		return *obj.ToolResponseMessage
	}

	if obj.UserMessage != nil {
		return *obj.UserMessage
	}

	// all schemas are nil
	return nil
}

type NullableMessage struct {
	value *Message
	isSet bool
}

func (v NullableMessage) Get() *Message {
	return v.value
}

func (v *NullableMessage) Set(val *Message) {
	v.value = val
	v.isSet = true
}

func (v NullableMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessage(val *Message) *NullableMessage {
	return &NullableMessage{value: val, isSet: true}
}

func (v NullableMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


