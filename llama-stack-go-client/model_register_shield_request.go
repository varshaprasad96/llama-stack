/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterShieldRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterShieldRequest{}

// RegisterShieldRequest struct for RegisterShieldRequest
type RegisterShieldRequest struct {
	ShieldId string `json:"shield_id"`
	ProviderShieldId *string `json:"provider_shield_id,omitempty"`
	ProviderId *string `json:"provider_id,omitempty"`
	Params map[string]AppendRowsRequestRowsInnerValue `json:"params,omitempty"`
}

type _RegisterShieldRequest RegisterShieldRequest

// NewRegisterShieldRequest instantiates a new RegisterShieldRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterShieldRequest(shieldId string) *RegisterShieldRequest {
	this := RegisterShieldRequest{}
	this.ShieldId = shieldId
	return &this
}

// NewRegisterShieldRequestWithDefaults instantiates a new RegisterShieldRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterShieldRequestWithDefaults() *RegisterShieldRequest {
	this := RegisterShieldRequest{}
	return &this
}

// GetShieldId returns the ShieldId field value
func (o *RegisterShieldRequest) GetShieldId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShieldId
}

// GetShieldIdOk returns a tuple with the ShieldId field value
// and a boolean to check if the value has been set.
func (o *RegisterShieldRequest) GetShieldIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShieldId, true
}

// SetShieldId sets field value
func (o *RegisterShieldRequest) SetShieldId(v string) {
	o.ShieldId = v
}

// GetProviderShieldId returns the ProviderShieldId field value if set, zero value otherwise.
func (o *RegisterShieldRequest) GetProviderShieldId() string {
	if o == nil || IsNil(o.ProviderShieldId) {
		var ret string
		return ret
	}
	return *o.ProviderShieldId
}

// GetProviderShieldIdOk returns a tuple with the ProviderShieldId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterShieldRequest) GetProviderShieldIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderShieldId) {
		return nil, false
	}
	return o.ProviderShieldId, true
}

// HasProviderShieldId returns a boolean if a field has been set.
func (o *RegisterShieldRequest) HasProviderShieldId() bool {
	if o != nil && !IsNil(o.ProviderShieldId) {
		return true
	}

	return false
}

// SetProviderShieldId gets a reference to the given string and assigns it to the ProviderShieldId field.
func (o *RegisterShieldRequest) SetProviderShieldId(v string) {
	o.ProviderShieldId = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *RegisterShieldRequest) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterShieldRequest) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *RegisterShieldRequest) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *RegisterShieldRequest) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *RegisterShieldRequest) GetParams() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Params) {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterShieldRequest) GetParamsOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *RegisterShieldRequest) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]AppendRowsRequestRowsInnerValue and assigns it to the Params field.
func (o *RegisterShieldRequest) SetParams(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Params = v
}

func (o RegisterShieldRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterShieldRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["shield_id"] = o.ShieldId
	if !IsNil(o.ProviderShieldId) {
		toSerialize["provider_shield_id"] = o.ProviderShieldId
	}
	if !IsNil(o.ProviderId) {
		toSerialize["provider_id"] = o.ProviderId
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return toSerialize, nil
}

func (o *RegisterShieldRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"shield_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterShieldRequest := _RegisterShieldRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterShieldRequest)

	if err != nil {
		return err
	}

	*o = RegisterShieldRequest(varRegisterShieldRequest)

	return err
}

type NullableRegisterShieldRequest struct {
	value *RegisterShieldRequest
	isSet bool
}

func (v NullableRegisterShieldRequest) Get() *RegisterShieldRequest {
	return v.value
}

func (v *NullableRegisterShieldRequest) Set(val *RegisterShieldRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterShieldRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterShieldRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterShieldRequest(val *RegisterShieldRequest) *NullableRegisterShieldRequest {
	return &NullableRegisterShieldRequest{value: val, isSet: true}
}

func (v NullableRegisterShieldRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterShieldRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


