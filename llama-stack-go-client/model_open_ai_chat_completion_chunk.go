/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenAIChatCompletionChunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenAIChatCompletionChunk{}

// OpenAIChatCompletionChunk Chunk from a streaming response to an OpenAI-compatible chat completion request.
type OpenAIChatCompletionChunk struct {
	// The ID of the chat completion
	Id string `json:"id"`
	// List of choices
	Choices []OpenAIChunkChoice `json:"choices"`
	// The object type, which will be \"chat.completion.chunk\"
	Object string `json:"object"`
	// The Unix timestamp in seconds when the chat completion was created
	Created int32 `json:"created"`
	// The model that was used to generate the chat completion
	Model string `json:"model"`
}

type _OpenAIChatCompletionChunk OpenAIChatCompletionChunk

// NewOpenAIChatCompletionChunk instantiates a new OpenAIChatCompletionChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAIChatCompletionChunk(id string, choices []OpenAIChunkChoice, object string, created int32, model string) *OpenAIChatCompletionChunk {
	this := OpenAIChatCompletionChunk{}
	this.Id = id
	this.Choices = choices
	this.Object = object
	this.Created = created
	this.Model = model
	return &this
}

// NewOpenAIChatCompletionChunkWithDefaults instantiates a new OpenAIChatCompletionChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAIChatCompletionChunkWithDefaults() *OpenAIChatCompletionChunk {
	this := OpenAIChatCompletionChunk{}
	var object string = "chat.completion.chunk"
	this.Object = object
	return &this
}

// GetId returns the Id field value
func (o *OpenAIChatCompletionChunk) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OpenAIChatCompletionChunk) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OpenAIChatCompletionChunk) SetId(v string) {
	o.Id = v
}

// GetChoices returns the Choices field value
func (o *OpenAIChatCompletionChunk) GetChoices() []OpenAIChunkChoice {
	if o == nil {
		var ret []OpenAIChunkChoice
		return ret
	}

	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value
// and a boolean to check if the value has been set.
func (o *OpenAIChatCompletionChunk) GetChoicesOk() ([]OpenAIChunkChoice, bool) {
	if o == nil {
		return nil, false
	}
	return o.Choices, true
}

// SetChoices sets field value
func (o *OpenAIChatCompletionChunk) SetChoices(v []OpenAIChunkChoice) {
	o.Choices = v
}

// GetObject returns the Object field value
func (o *OpenAIChatCompletionChunk) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *OpenAIChatCompletionChunk) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *OpenAIChatCompletionChunk) SetObject(v string) {
	o.Object = v
}

// GetCreated returns the Created field value
func (o *OpenAIChatCompletionChunk) GetCreated() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *OpenAIChatCompletionChunk) GetCreatedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *OpenAIChatCompletionChunk) SetCreated(v int32) {
	o.Created = v
}

// GetModel returns the Model field value
func (o *OpenAIChatCompletionChunk) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *OpenAIChatCompletionChunk) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *OpenAIChatCompletionChunk) SetModel(v string) {
	o.Model = v
}

func (o OpenAIChatCompletionChunk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenAIChatCompletionChunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["choices"] = o.Choices
	toSerialize["object"] = o.Object
	toSerialize["created"] = o.Created
	toSerialize["model"] = o.Model
	return toSerialize, nil
}

func (o *OpenAIChatCompletionChunk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"choices",
		"object",
		"created",
		"model",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenAIChatCompletionChunk := _OpenAIChatCompletionChunk{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenAIChatCompletionChunk)

	if err != nil {
		return err
	}

	*o = OpenAIChatCompletionChunk(varOpenAIChatCompletionChunk)

	return err
}

type NullableOpenAIChatCompletionChunk struct {
	value *OpenAIChatCompletionChunk
	isSet bool
}

func (v NullableOpenAIChatCompletionChunk) Get() *OpenAIChatCompletionChunk {
	return v.value
}

func (v *NullableOpenAIChatCompletionChunk) Set(val *OpenAIChatCompletionChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIChatCompletionChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIChatCompletionChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIChatCompletionChunk(val *OpenAIChatCompletionChunk) *NullableOpenAIChatCompletionChunk {
	return &NullableOpenAIChatCompletionChunk{value: val, isSet: true}
}

func (v NullableOpenAIChatCompletionChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIChatCompletionChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


