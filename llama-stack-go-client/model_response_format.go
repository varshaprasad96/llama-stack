/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ResponseFormat - struct for ResponseFormat
type ResponseFormat struct {
	GrammarResponseFormat *GrammarResponseFormat
	JsonSchemaResponseFormat *JsonSchemaResponseFormat
}

// GrammarResponseFormatAsResponseFormat is a convenience function that returns GrammarResponseFormat wrapped in ResponseFormat
func GrammarResponseFormatAsResponseFormat(v *GrammarResponseFormat) ResponseFormat {
	return ResponseFormat{
		GrammarResponseFormat: v,
	}
}

// JsonSchemaResponseFormatAsResponseFormat is a convenience function that returns JsonSchemaResponseFormat wrapped in ResponseFormat
func JsonSchemaResponseFormatAsResponseFormat(v *JsonSchemaResponseFormat) ResponseFormat {
	return ResponseFormat{
		JsonSchemaResponseFormat: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResponseFormat) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GrammarResponseFormat
	err = newStrictDecoder(data).Decode(&dst.GrammarResponseFormat)
	if err == nil {
		jsonGrammarResponseFormat, _ := json.Marshal(dst.GrammarResponseFormat)
		if string(jsonGrammarResponseFormat) == "{}" { // empty struct
			dst.GrammarResponseFormat = nil
		} else {
			if err = validator.Validate(dst.GrammarResponseFormat); err != nil {
				dst.GrammarResponseFormat = nil
			} else {
				match++
			}
		}
	} else {
		dst.GrammarResponseFormat = nil
	}

	// try to unmarshal data into JsonSchemaResponseFormat
	err = newStrictDecoder(data).Decode(&dst.JsonSchemaResponseFormat)
	if err == nil {
		jsonJsonSchemaResponseFormat, _ := json.Marshal(dst.JsonSchemaResponseFormat)
		if string(jsonJsonSchemaResponseFormat) == "{}" { // empty struct
			dst.JsonSchemaResponseFormat = nil
		} else {
			if err = validator.Validate(dst.JsonSchemaResponseFormat); err != nil {
				dst.JsonSchemaResponseFormat = nil
			} else {
				match++
			}
		}
	} else {
		dst.JsonSchemaResponseFormat = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GrammarResponseFormat = nil
		dst.JsonSchemaResponseFormat = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResponseFormat)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResponseFormat)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseFormat) MarshalJSON() ([]byte, error) {
	if src.GrammarResponseFormat != nil {
		return json.Marshal(&src.GrammarResponseFormat)
	}

	if src.JsonSchemaResponseFormat != nil {
		return json.Marshal(&src.JsonSchemaResponseFormat)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResponseFormat) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GrammarResponseFormat != nil {
		return obj.GrammarResponseFormat
	}

	if obj.JsonSchemaResponseFormat != nil {
		return obj.JsonSchemaResponseFormat
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ResponseFormat) GetActualInstanceValue() (interface{}) {
	if obj.GrammarResponseFormat != nil {
		return *obj.GrammarResponseFormat
	}

	if obj.JsonSchemaResponseFormat != nil {
		return *obj.JsonSchemaResponseFormat
	}

	// all schemas are nil
	return nil
}

type NullableResponseFormat struct {
	value *ResponseFormat
	isSet bool
}

func (v NullableResponseFormat) Get() *ResponseFormat {
	return v.value
}

func (v *NullableResponseFormat) Set(val *ResponseFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseFormat(val *ResponseFormat) *NullableResponseFormat {
	return &NullableResponseFormat{value: val, isSet: true}
}

func (v NullableResponseFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


