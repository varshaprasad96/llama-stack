/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolParamDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolParamDefinition{}

// ToolParamDefinition struct for ToolParamDefinition
type ToolParamDefinition struct {
	ParamType string `json:"param_type"`
	Description *string `json:"description,omitempty"`
	Required *bool `json:"required,omitempty"`
	Default NullableAppendRowsRequestRowsInnerValue `json:"default,omitempty"`
}

type _ToolParamDefinition ToolParamDefinition

// NewToolParamDefinition instantiates a new ToolParamDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolParamDefinition(paramType string) *ToolParamDefinition {
	this := ToolParamDefinition{}
	this.ParamType = paramType
	var required bool = true
	this.Required = &required
	return &this
}

// NewToolParamDefinitionWithDefaults instantiates a new ToolParamDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolParamDefinitionWithDefaults() *ToolParamDefinition {
	this := ToolParamDefinition{}
	var required bool = true
	this.Required = &required
	return &this
}

// GetParamType returns the ParamType field value
func (o *ToolParamDefinition) GetParamType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParamType
}

// GetParamTypeOk returns a tuple with the ParamType field value
// and a boolean to check if the value has been set.
func (o *ToolParamDefinition) GetParamTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParamType, true
}

// SetParamType sets field value
func (o *ToolParamDefinition) SetParamType(v string) {
	o.ParamType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ToolParamDefinition) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolParamDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ToolParamDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ToolParamDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ToolParamDefinition) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolParamDefinition) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ToolParamDefinition) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ToolParamDefinition) SetRequired(v bool) {
	o.Required = &v
}

// GetDefault returns the Default field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolParamDefinition) GetDefault() AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Default.Get()) {
		var ret AppendRowsRequestRowsInnerValue
		return ret
	}
	return *o.Default.Get()
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolParamDefinition) GetDefaultOk() (*AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Default.Get(), o.Default.IsSet()
}

// HasDefault returns a boolean if a field has been set.
func (o *ToolParamDefinition) HasDefault() bool {
	if o != nil && o.Default.IsSet() {
		return true
	}

	return false
}

// SetDefault gets a reference to the given NullableAppendRowsRequestRowsInnerValue and assigns it to the Default field.
func (o *ToolParamDefinition) SetDefault(v AppendRowsRequestRowsInnerValue) {
	o.Default.Set(&v)
}
// SetDefaultNil sets the value for Default to be an explicit nil
func (o *ToolParamDefinition) SetDefaultNil() {
	o.Default.Set(nil)
}

// UnsetDefault ensures that no value is present for Default, not even an explicit nil
func (o *ToolParamDefinition) UnsetDefault() {
	o.Default.Unset()
}

func (o ToolParamDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolParamDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["param_type"] = o.ParamType
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if o.Default.IsSet() {
		toSerialize["default"] = o.Default.Get()
	}
	return toSerialize, nil
}

func (o *ToolParamDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"param_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolParamDefinition := _ToolParamDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolParamDefinition)

	if err != nil {
		return err
	}

	*o = ToolParamDefinition(varToolParamDefinition)

	return err
}

type NullableToolParamDefinition struct {
	value *ToolParamDefinition
	isSet bool
}

func (v NullableToolParamDefinition) Get() *ToolParamDefinition {
	return v.value
}

func (v *NullableToolParamDefinition) Set(val *ToolParamDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableToolParamDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableToolParamDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolParamDefinition(val *ToolParamDefinition) *NullableToolParamDefinition {
	return &NullableToolParamDefinition{value: val, isSet: true}
}

func (v NullableToolParamDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolParamDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


