/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolCall{}

// ToolCall struct for ToolCall
type ToolCall struct {
	CallId string `json:"call_id"`
	ToolName ToolCallToolName `json:"tool_name"`
	Arguments ToolCallArguments `json:"arguments"`
	ArgumentsJson *string `json:"arguments_json,omitempty"`
}

type _ToolCall ToolCall

// NewToolCall instantiates a new ToolCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolCall(callId string, toolName ToolCallToolName, arguments ToolCallArguments) *ToolCall {
	this := ToolCall{}
	this.CallId = callId
	this.ToolName = toolName
	this.Arguments = arguments
	return &this
}

// NewToolCallWithDefaults instantiates a new ToolCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolCallWithDefaults() *ToolCall {
	this := ToolCall{}
	return &this
}

// GetCallId returns the CallId field value
func (o *ToolCall) GetCallId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value
// and a boolean to check if the value has been set.
func (o *ToolCall) GetCallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallId, true
}

// SetCallId sets field value
func (o *ToolCall) SetCallId(v string) {
	o.CallId = v
}

// GetToolName returns the ToolName field value
func (o *ToolCall) GetToolName() ToolCallToolName {
	if o == nil {
		var ret ToolCallToolName
		return ret
	}

	return o.ToolName
}

// GetToolNameOk returns a tuple with the ToolName field value
// and a boolean to check if the value has been set.
func (o *ToolCall) GetToolNameOk() (*ToolCallToolName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolName, true
}

// SetToolName sets field value
func (o *ToolCall) SetToolName(v ToolCallToolName) {
	o.ToolName = v
}

// GetArguments returns the Arguments field value
func (o *ToolCall) GetArguments() ToolCallArguments {
	if o == nil {
		var ret ToolCallArguments
		return ret
	}

	return o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value
// and a boolean to check if the value has been set.
func (o *ToolCall) GetArgumentsOk() (*ToolCallArguments, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Arguments, true
}

// SetArguments sets field value
func (o *ToolCall) SetArguments(v ToolCallArguments) {
	o.Arguments = v
}

// GetArgumentsJson returns the ArgumentsJson field value if set, zero value otherwise.
func (o *ToolCall) GetArgumentsJson() string {
	if o == nil || IsNil(o.ArgumentsJson) {
		var ret string
		return ret
	}
	return *o.ArgumentsJson
}

// GetArgumentsJsonOk returns a tuple with the ArgumentsJson field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolCall) GetArgumentsJsonOk() (*string, bool) {
	if o == nil || IsNil(o.ArgumentsJson) {
		return nil, false
	}
	return o.ArgumentsJson, true
}

// HasArgumentsJson returns a boolean if a field has been set.
func (o *ToolCall) HasArgumentsJson() bool {
	if o != nil && !IsNil(o.ArgumentsJson) {
		return true
	}

	return false
}

// SetArgumentsJson gets a reference to the given string and assigns it to the ArgumentsJson field.
func (o *ToolCall) SetArgumentsJson(v string) {
	o.ArgumentsJson = &v
}

func (o ToolCall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["call_id"] = o.CallId
	toSerialize["tool_name"] = o.ToolName
	toSerialize["arguments"] = o.Arguments
	if !IsNil(o.ArgumentsJson) {
		toSerialize["arguments_json"] = o.ArgumentsJson
	}
	return toSerialize, nil
}

func (o *ToolCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"call_id",
		"tool_name",
		"arguments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolCall := _ToolCall{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolCall)

	if err != nil {
		return err
	}

	*o = ToolCall(varToolCall)

	return err
}

type NullableToolCall struct {
	value *ToolCall
	isSet bool
}

func (v NullableToolCall) Get() *ToolCall {
	return v.value
}

func (v *NullableToolCall) Set(val *ToolCall) {
	v.value = val
	v.isSet = true
}

func (v NullableToolCall) IsSet() bool {
	return v.isSet
}

func (v *NullableToolCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolCall(val *ToolCall) *NullableToolCall {
	return &NullableToolCall{value: val, isSet: true}
}

func (v NullableToolCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


