/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ContentDelta - struct for ContentDelta
type ContentDelta struct {
	ImageDelta *ImageDelta
	TextDelta *TextDelta
	ToolCallDelta *ToolCallDelta
}

// ImageDeltaAsContentDelta is a convenience function that returns ImageDelta wrapped in ContentDelta
func ImageDeltaAsContentDelta(v *ImageDelta) ContentDelta {
	return ContentDelta{
		ImageDelta: v,
	}
}

// TextDeltaAsContentDelta is a convenience function that returns TextDelta wrapped in ContentDelta
func TextDeltaAsContentDelta(v *TextDelta) ContentDelta {
	return ContentDelta{
		TextDelta: v,
	}
}

// ToolCallDeltaAsContentDelta is a convenience function that returns ToolCallDelta wrapped in ContentDelta
func ToolCallDeltaAsContentDelta(v *ToolCallDelta) ContentDelta {
	return ContentDelta{
		ToolCallDelta: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentDelta) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ImageDelta
	err = newStrictDecoder(data).Decode(&dst.ImageDelta)
	if err == nil {
		jsonImageDelta, _ := json.Marshal(dst.ImageDelta)
		if string(jsonImageDelta) == "{}" { // empty struct
			dst.ImageDelta = nil
		} else {
			if err = validator.Validate(dst.ImageDelta); err != nil {
				dst.ImageDelta = nil
			} else {
				match++
			}
		}
	} else {
		dst.ImageDelta = nil
	}

	// try to unmarshal data into TextDelta
	err = newStrictDecoder(data).Decode(&dst.TextDelta)
	if err == nil {
		jsonTextDelta, _ := json.Marshal(dst.TextDelta)
		if string(jsonTextDelta) == "{}" { // empty struct
			dst.TextDelta = nil
		} else {
			if err = validator.Validate(dst.TextDelta); err != nil {
				dst.TextDelta = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextDelta = nil
	}

	// try to unmarshal data into ToolCallDelta
	err = newStrictDecoder(data).Decode(&dst.ToolCallDelta)
	if err == nil {
		jsonToolCallDelta, _ := json.Marshal(dst.ToolCallDelta)
		if string(jsonToolCallDelta) == "{}" { // empty struct
			dst.ToolCallDelta = nil
		} else {
			if err = validator.Validate(dst.ToolCallDelta); err != nil {
				dst.ToolCallDelta = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolCallDelta = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ImageDelta = nil
		dst.TextDelta = nil
		dst.ToolCallDelta = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentDelta)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentDelta)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentDelta) MarshalJSON() ([]byte, error) {
	if src.ImageDelta != nil {
		return json.Marshal(&src.ImageDelta)
	}

	if src.TextDelta != nil {
		return json.Marshal(&src.TextDelta)
	}

	if src.ToolCallDelta != nil {
		return json.Marshal(&src.ToolCallDelta)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentDelta) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ImageDelta != nil {
		return obj.ImageDelta
	}

	if obj.TextDelta != nil {
		return obj.TextDelta
	}

	if obj.ToolCallDelta != nil {
		return obj.ToolCallDelta
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ContentDelta) GetActualInstanceValue() (interface{}) {
	if obj.ImageDelta != nil {
		return *obj.ImageDelta
	}

	if obj.TextDelta != nil {
		return *obj.TextDelta
	}

	if obj.ToolCallDelta != nil {
		return *obj.ToolCallDelta
	}

	// all schemas are nil
	return nil
}

type NullableContentDelta struct {
	value *ContentDelta
	isSet bool
}

func (v NullableContentDelta) Get() *ContentDelta {
	return v.value
}

func (v *NullableContentDelta) Set(val *ContentDelta) {
	v.value = val
	v.isSet = true
}

func (v NullableContentDelta) IsSet() bool {
	return v.isSet
}

func (v *NullableContentDelta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentDelta(val *ContentDelta) *NullableContentDelta {
	return &NullableContentDelta{value: val, isSet: true}
}

func (v NullableContentDelta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentDelta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


