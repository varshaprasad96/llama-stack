/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SamplingStrategy - struct for SamplingStrategy
type SamplingStrategy struct {
	GreedySamplingStrategy *GreedySamplingStrategy
	TopKSamplingStrategy *TopKSamplingStrategy
	TopPSamplingStrategy *TopPSamplingStrategy
}

// GreedySamplingStrategyAsSamplingStrategy is a convenience function that returns GreedySamplingStrategy wrapped in SamplingStrategy
func GreedySamplingStrategyAsSamplingStrategy(v *GreedySamplingStrategy) SamplingStrategy {
	return SamplingStrategy{
		GreedySamplingStrategy: v,
	}
}

// TopKSamplingStrategyAsSamplingStrategy is a convenience function that returns TopKSamplingStrategy wrapped in SamplingStrategy
func TopKSamplingStrategyAsSamplingStrategy(v *TopKSamplingStrategy) SamplingStrategy {
	return SamplingStrategy{
		TopKSamplingStrategy: v,
	}
}

// TopPSamplingStrategyAsSamplingStrategy is a convenience function that returns TopPSamplingStrategy wrapped in SamplingStrategy
func TopPSamplingStrategyAsSamplingStrategy(v *TopPSamplingStrategy) SamplingStrategy {
	return SamplingStrategy{
		TopPSamplingStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SamplingStrategy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GreedySamplingStrategy
	err = newStrictDecoder(data).Decode(&dst.GreedySamplingStrategy)
	if err == nil {
		jsonGreedySamplingStrategy, _ := json.Marshal(dst.GreedySamplingStrategy)
		if string(jsonGreedySamplingStrategy) == "{}" { // empty struct
			dst.GreedySamplingStrategy = nil
		} else {
			if err = validator.Validate(dst.GreedySamplingStrategy); err != nil {
				dst.GreedySamplingStrategy = nil
			} else {
				match++
			}
		}
	} else {
		dst.GreedySamplingStrategy = nil
	}

	// try to unmarshal data into TopKSamplingStrategy
	err = newStrictDecoder(data).Decode(&dst.TopKSamplingStrategy)
	if err == nil {
		jsonTopKSamplingStrategy, _ := json.Marshal(dst.TopKSamplingStrategy)
		if string(jsonTopKSamplingStrategy) == "{}" { // empty struct
			dst.TopKSamplingStrategy = nil
		} else {
			if err = validator.Validate(dst.TopKSamplingStrategy); err != nil {
				dst.TopKSamplingStrategy = nil
			} else {
				match++
			}
		}
	} else {
		dst.TopKSamplingStrategy = nil
	}

	// try to unmarshal data into TopPSamplingStrategy
	err = newStrictDecoder(data).Decode(&dst.TopPSamplingStrategy)
	if err == nil {
		jsonTopPSamplingStrategy, _ := json.Marshal(dst.TopPSamplingStrategy)
		if string(jsonTopPSamplingStrategy) == "{}" { // empty struct
			dst.TopPSamplingStrategy = nil
		} else {
			if err = validator.Validate(dst.TopPSamplingStrategy); err != nil {
				dst.TopPSamplingStrategy = nil
			} else {
				match++
			}
		}
	} else {
		dst.TopPSamplingStrategy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GreedySamplingStrategy = nil
		dst.TopKSamplingStrategy = nil
		dst.TopPSamplingStrategy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SamplingStrategy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SamplingStrategy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SamplingStrategy) MarshalJSON() ([]byte, error) {
	if src.GreedySamplingStrategy != nil {
		return json.Marshal(&src.GreedySamplingStrategy)
	}

	if src.TopKSamplingStrategy != nil {
		return json.Marshal(&src.TopKSamplingStrategy)
	}

	if src.TopPSamplingStrategy != nil {
		return json.Marshal(&src.TopPSamplingStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SamplingStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GreedySamplingStrategy != nil {
		return obj.GreedySamplingStrategy
	}

	if obj.TopKSamplingStrategy != nil {
		return obj.TopKSamplingStrategy
	}

	if obj.TopPSamplingStrategy != nil {
		return obj.TopPSamplingStrategy
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SamplingStrategy) GetActualInstanceValue() (interface{}) {
	if obj.GreedySamplingStrategy != nil {
		return *obj.GreedySamplingStrategy
	}

	if obj.TopKSamplingStrategy != nil {
		return *obj.TopKSamplingStrategy
	}

	if obj.TopPSamplingStrategy != nil {
		return *obj.TopPSamplingStrategy
	}

	// all schemas are nil
	return nil
}

type NullableSamplingStrategy struct {
	value *SamplingStrategy
	isSet bool
}

func (v NullableSamplingStrategy) Get() *SamplingStrategy {
	return v.value
}

func (v *NullableSamplingStrategy) Set(val *SamplingStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableSamplingStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableSamplingStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamplingStrategy(val *SamplingStrategy) *NullableSamplingStrategy {
	return &NullableSamplingStrategy{value: val, isSet: true}
}

func (v NullableSamplingStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamplingStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


