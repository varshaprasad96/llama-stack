/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileResponse{}

// FileResponse Response representing a file entry.
type FileResponse struct {
	// Bucket under which the file is stored (valid chars: a-zA-Z0-9_-)
	Bucket string `json:"bucket"`
	// Key under which the file is stored (valid chars: a-zA-Z0-9_-/.)
	Key string `json:"key"`
	// MIME type of the file
	MimeType string `json:"mime_type"`
	// Upload URL for the file contents
	Url string `json:"url"`
	// Size of the file in bytes
	Bytes int32 `json:"bytes"`
	// Timestamp of when the file was created
	CreatedAt int32 `json:"created_at"`
}

type _FileResponse FileResponse

// NewFileResponse instantiates a new FileResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileResponse(bucket string, key string, mimeType string, url string, bytes int32, createdAt int32) *FileResponse {
	this := FileResponse{}
	this.Bucket = bucket
	this.Key = key
	this.MimeType = mimeType
	this.Url = url
	this.Bytes = bytes
	this.CreatedAt = createdAt
	return &this
}

// NewFileResponseWithDefaults instantiates a new FileResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileResponseWithDefaults() *FileResponse {
	this := FileResponse{}
	return &this
}

// GetBucket returns the Bucket field value
func (o *FileResponse) GetBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *FileResponse) GetBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *FileResponse) SetBucket(v string) {
	o.Bucket = v
}

// GetKey returns the Key field value
func (o *FileResponse) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *FileResponse) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *FileResponse) SetKey(v string) {
	o.Key = v
}

// GetMimeType returns the MimeType field value
func (o *FileResponse) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *FileResponse) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *FileResponse) SetMimeType(v string) {
	o.MimeType = v
}

// GetUrl returns the Url field value
func (o *FileResponse) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *FileResponse) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *FileResponse) SetUrl(v string) {
	o.Url = v
}

// GetBytes returns the Bytes field value
func (o *FileResponse) GetBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *FileResponse) GetBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *FileResponse) SetBytes(v int32) {
	o.Bytes = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *FileResponse) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FileResponse) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FileResponse) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

func (o FileResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket"] = o.Bucket
	toSerialize["key"] = o.Key
	toSerialize["mime_type"] = o.MimeType
	toSerialize["url"] = o.Url
	toSerialize["bytes"] = o.Bytes
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *FileResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket",
		"key",
		"mime_type",
		"url",
		"bytes",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileResponse := _FileResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileResponse)

	if err != nil {
		return err
	}

	*o = FileResponse(varFileResponse)

	return err
}

type NullableFileResponse struct {
	value *FileResponse
	isSet bool
}

func (v NullableFileResponse) Get() *FileResponse {
	return v.value
}

func (v *NullableFileResponse) Set(val *FileResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFileResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFileResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileResponse(val *FileResponse) *NullableFileResponse {
	return &NullableFileResponse{value: val, isSet: true}
}

func (v NullableFileResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


