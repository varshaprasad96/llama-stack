/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatCompletionResponseStreamChunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionResponseStreamChunk{}

// ChatCompletionResponseStreamChunk A chunk of a streamed chat completion response.
type ChatCompletionResponseStreamChunk struct {
	Metrics []MetricInResponse `json:"metrics,omitempty"`
	// The event containing the new content
	Event ChatCompletionResponseEvent `json:"event"`
}

type _ChatCompletionResponseStreamChunk ChatCompletionResponseStreamChunk

// NewChatCompletionResponseStreamChunk instantiates a new ChatCompletionResponseStreamChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionResponseStreamChunk(event ChatCompletionResponseEvent) *ChatCompletionResponseStreamChunk {
	this := ChatCompletionResponseStreamChunk{}
	this.Event = event
	return &this
}

// NewChatCompletionResponseStreamChunkWithDefaults instantiates a new ChatCompletionResponseStreamChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionResponseStreamChunkWithDefaults() *ChatCompletionResponseStreamChunk {
	this := ChatCompletionResponseStreamChunk{}
	return &this
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *ChatCompletionResponseStreamChunk) GetMetrics() []MetricInResponse {
	if o == nil || IsNil(o.Metrics) {
		var ret []MetricInResponse
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionResponseStreamChunk) GetMetricsOk() ([]MetricInResponse, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *ChatCompletionResponseStreamChunk) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []MetricInResponse and assigns it to the Metrics field.
func (o *ChatCompletionResponseStreamChunk) SetMetrics(v []MetricInResponse) {
	o.Metrics = v
}

// GetEvent returns the Event field value
func (o *ChatCompletionResponseStreamChunk) GetEvent() ChatCompletionResponseEvent {
	if o == nil {
		var ret ChatCompletionResponseEvent
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionResponseStreamChunk) GetEventOk() (*ChatCompletionResponseEvent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *ChatCompletionResponseStreamChunk) SetEvent(v ChatCompletionResponseEvent) {
	o.Event = v
}

func (o ChatCompletionResponseStreamChunk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionResponseStreamChunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	toSerialize["event"] = o.Event
	return toSerialize, nil
}

func (o *ChatCompletionResponseStreamChunk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatCompletionResponseStreamChunk := _ChatCompletionResponseStreamChunk{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatCompletionResponseStreamChunk)

	if err != nil {
		return err
	}

	*o = ChatCompletionResponseStreamChunk(varChatCompletionResponseStreamChunk)

	return err
}

type NullableChatCompletionResponseStreamChunk struct {
	value *ChatCompletionResponseStreamChunk
	isSet bool
}

func (v NullableChatCompletionResponseStreamChunk) Get() *ChatCompletionResponseStreamChunk {
	return v.value
}

func (v *NullableChatCompletionResponseStreamChunk) Set(val *ChatCompletionResponseStreamChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionResponseStreamChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionResponseStreamChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionResponseStreamChunk(val *ChatCompletionResponseStreamChunk) *NullableChatCompletionResponseStreamChunk {
	return &NullableChatCompletionResponseStreamChunk{value: val, isSet: true}
}

func (v NullableChatCompletionResponseStreamChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionResponseStreamChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


