/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OptimizerType the model 'OptimizerType'
type OptimizerType string

// List of OptimizerType
const (
	ADAM OptimizerType = "adam"
	ADAMW OptimizerType = "adamw"
	SGD OptimizerType = "sgd"
)

// All allowed values of OptimizerType enum
var AllowedOptimizerTypeEnumValues = []OptimizerType{
	"adam",
	"adamw",
	"sgd",
}

func (v *OptimizerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptimizerType(value)
	for _, existing := range AllowedOptimizerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptimizerType", value)
}

// NewOptimizerTypeFromValue returns a pointer to a valid OptimizerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptimizerTypeFromValue(v string) (*OptimizerType, error) {
	ev := OptimizerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptimizerType: valid values are %v", v, AllowedOptimizerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptimizerType) IsValid() bool {
	for _, existing := range AllowedOptimizerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptimizerType value
func (v OptimizerType) Ptr() *OptimizerType {
	return &v
}

type NullableOptimizerType struct {
	value *OptimizerType
	isSet bool
}

func (v NullableOptimizerType) Get() *OptimizerType {
	return v.value
}

func (v *NullableOptimizerType) Set(val *OptimizerType) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimizerType) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimizerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimizerType(val *OptimizerType) *NullableOptimizerType {
	return &NullableOptimizerType{value: val, isSet: true}
}

func (v NullableOptimizerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimizerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

