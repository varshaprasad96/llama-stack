/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenAIToolMessageParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenAIToolMessageParam{}

// OpenAIToolMessageParam A message representing the result of a tool invocation in an OpenAI-compatible chat completion request.
type OpenAIToolMessageParam struct {
	// Must be \"tool\" to identify this as a tool response
	Role string `json:"role"`
	// Unique identifier for the tool call this response is for
	ToolCallId string `json:"tool_call_id"`
	Content OpenAIToolMessageParamContent `json:"content"`
}

type _OpenAIToolMessageParam OpenAIToolMessageParam

// NewOpenAIToolMessageParam instantiates a new OpenAIToolMessageParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAIToolMessageParam(role string, toolCallId string, content OpenAIToolMessageParamContent) *OpenAIToolMessageParam {
	this := OpenAIToolMessageParam{}
	this.Role = role
	this.ToolCallId = toolCallId
	this.Content = content
	return &this
}

// NewOpenAIToolMessageParamWithDefaults instantiates a new OpenAIToolMessageParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAIToolMessageParamWithDefaults() *OpenAIToolMessageParam {
	this := OpenAIToolMessageParam{}
	var role string = "tool"
	this.Role = role
	return &this
}

// GetRole returns the Role field value
func (o *OpenAIToolMessageParam) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *OpenAIToolMessageParam) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *OpenAIToolMessageParam) SetRole(v string) {
	o.Role = v
}

// GetToolCallId returns the ToolCallId field value
func (o *OpenAIToolMessageParam) GetToolCallId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToolCallId
}

// GetToolCallIdOk returns a tuple with the ToolCallId field value
// and a boolean to check if the value has been set.
func (o *OpenAIToolMessageParam) GetToolCallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolCallId, true
}

// SetToolCallId sets field value
func (o *OpenAIToolMessageParam) SetToolCallId(v string) {
	o.ToolCallId = v
}

// GetContent returns the Content field value
func (o *OpenAIToolMessageParam) GetContent() OpenAIToolMessageParamContent {
	if o == nil {
		var ret OpenAIToolMessageParamContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *OpenAIToolMessageParam) GetContentOk() (*OpenAIToolMessageParamContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *OpenAIToolMessageParam) SetContent(v OpenAIToolMessageParamContent) {
	o.Content = v
}

func (o OpenAIToolMessageParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenAIToolMessageParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["tool_call_id"] = o.ToolCallId
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

func (o *OpenAIToolMessageParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"tool_call_id",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenAIToolMessageParam := _OpenAIToolMessageParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenAIToolMessageParam)

	if err != nil {
		return err
	}

	*o = OpenAIToolMessageParam(varOpenAIToolMessageParam)

	return err
}

type NullableOpenAIToolMessageParam struct {
	value *OpenAIToolMessageParam
	isSet bool
}

func (v NullableOpenAIToolMessageParam) Get() *OpenAIToolMessageParam {
	return v.value
}

func (v *NullableOpenAIToolMessageParam) Set(val *OpenAIToolMessageParam) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIToolMessageParam) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIToolMessageParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIToolMessageParam(val *OpenAIToolMessageParam) *NullableOpenAIToolMessageParam {
	return &NullableOpenAIToolMessageParam{value: val, isSet: true}
}

func (v NullableOpenAIToolMessageParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIToolMessageParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


