/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryChunksRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryChunksRequest{}

// QueryChunksRequest struct for QueryChunksRequest
type QueryChunksRequest struct {
	VectorDbId string `json:"vector_db_id"`
	Query InterleavedContent `json:"query"`
	Params map[string]AppendRowsRequestRowsInnerValue `json:"params,omitempty"`
}

type _QueryChunksRequest QueryChunksRequest

// NewQueryChunksRequest instantiates a new QueryChunksRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryChunksRequest(vectorDbId string, query InterleavedContent) *QueryChunksRequest {
	this := QueryChunksRequest{}
	this.VectorDbId = vectorDbId
	this.Query = query
	return &this
}

// NewQueryChunksRequestWithDefaults instantiates a new QueryChunksRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryChunksRequestWithDefaults() *QueryChunksRequest {
	this := QueryChunksRequest{}
	return &this
}

// GetVectorDbId returns the VectorDbId field value
func (o *QueryChunksRequest) GetVectorDbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VectorDbId
}

// GetVectorDbIdOk returns a tuple with the VectorDbId field value
// and a boolean to check if the value has been set.
func (o *QueryChunksRequest) GetVectorDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VectorDbId, true
}

// SetVectorDbId sets field value
func (o *QueryChunksRequest) SetVectorDbId(v string) {
	o.VectorDbId = v
}

// GetQuery returns the Query field value
func (o *QueryChunksRequest) GetQuery() InterleavedContent {
	if o == nil {
		var ret InterleavedContent
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *QueryChunksRequest) GetQueryOk() (*InterleavedContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *QueryChunksRequest) SetQuery(v InterleavedContent) {
	o.Query = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *QueryChunksRequest) GetParams() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Params) {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryChunksRequest) GetParamsOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Params) {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *QueryChunksRequest) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given map[string]AppendRowsRequestRowsInnerValue and assigns it to the Params field.
func (o *QueryChunksRequest) SetParams(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Params = v
}

func (o QueryChunksRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryChunksRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vector_db_id"] = o.VectorDbId
	toSerialize["query"] = o.Query
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return toSerialize, nil
}

func (o *QueryChunksRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vector_db_id",
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryChunksRequest := _QueryChunksRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryChunksRequest)

	if err != nil {
		return err
	}

	*o = QueryChunksRequest(varQueryChunksRequest)

	return err
}

type NullableQueryChunksRequest struct {
	value *QueryChunksRequest
	isSet bool
}

func (v NullableQueryChunksRequest) Get() *QueryChunksRequest {
	return v.value
}

func (v *NullableQueryChunksRequest) Set(val *QueryChunksRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryChunksRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryChunksRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryChunksRequest(val *QueryChunksRequest) *NullableQueryChunksRequest {
	return &NullableQueryChunksRequest{value: val, isSet: true}
}

func (v NullableQueryChunksRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryChunksRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


