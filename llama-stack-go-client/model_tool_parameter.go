/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolParameter{}

// ToolParameter struct for ToolParameter
type ToolParameter struct {
	Name string `json:"name"`
	ParameterType string `json:"parameter_type"`
	Description string `json:"description"`
	Required bool `json:"required"`
	Default NullableAppendRowsRequestRowsInnerValue `json:"default,omitempty"`
}

type _ToolParameter ToolParameter

// NewToolParameter instantiates a new ToolParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolParameter(name string, parameterType string, description string, required bool) *ToolParameter {
	this := ToolParameter{}
	this.Name = name
	this.ParameterType = parameterType
	this.Description = description
	this.Required = required
	return &this
}

// NewToolParameterWithDefaults instantiates a new ToolParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolParameterWithDefaults() *ToolParameter {
	this := ToolParameter{}
	var required bool = true
	this.Required = required
	return &this
}

// GetName returns the Name field value
func (o *ToolParameter) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ToolParameter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ToolParameter) SetName(v string) {
	o.Name = v
}

// GetParameterType returns the ParameterType field value
func (o *ToolParameter) GetParameterType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParameterType
}

// GetParameterTypeOk returns a tuple with the ParameterType field value
// and a boolean to check if the value has been set.
func (o *ToolParameter) GetParameterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParameterType, true
}

// SetParameterType sets field value
func (o *ToolParameter) SetParameterType(v string) {
	o.ParameterType = v
}

// GetDescription returns the Description field value
func (o *ToolParameter) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ToolParameter) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ToolParameter) SetDescription(v string) {
	o.Description = v
}

// GetRequired returns the Required field value
func (o *ToolParameter) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *ToolParameter) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *ToolParameter) SetRequired(v bool) {
	o.Required = v
}

// GetDefault returns the Default field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolParameter) GetDefault() AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Default.Get()) {
		var ret AppendRowsRequestRowsInnerValue
		return ret
	}
	return *o.Default.Get()
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolParameter) GetDefaultOk() (*AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Default.Get(), o.Default.IsSet()
}

// HasDefault returns a boolean if a field has been set.
func (o *ToolParameter) HasDefault() bool {
	if o != nil && o.Default.IsSet() {
		return true
	}

	return false
}

// SetDefault gets a reference to the given NullableAppendRowsRequestRowsInnerValue and assigns it to the Default field.
func (o *ToolParameter) SetDefault(v AppendRowsRequestRowsInnerValue) {
	o.Default.Set(&v)
}
// SetDefaultNil sets the value for Default to be an explicit nil
func (o *ToolParameter) SetDefaultNil() {
	o.Default.Set(nil)
}

// UnsetDefault ensures that no value is present for Default, not even an explicit nil
func (o *ToolParameter) UnsetDefault() {
	o.Default.Unset()
}

func (o ToolParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["parameter_type"] = o.ParameterType
	toSerialize["description"] = o.Description
	toSerialize["required"] = o.Required
	if o.Default.IsSet() {
		toSerialize["default"] = o.Default.Get()
	}
	return toSerialize, nil
}

func (o *ToolParameter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"parameter_type",
		"description",
		"required",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolParameter := _ToolParameter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolParameter)

	if err != nil {
		return err
	}

	*o = ToolParameter(varToolParameter)

	return err
}

type NullableToolParameter struct {
	value *ToolParameter
	isSet bool
}

func (v NullableToolParameter) Get() *ToolParameter {
	return v.value
}

func (v *NullableToolParameter) Set(val *ToolParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableToolParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableToolParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolParameter(val *ToolParameter) *NullableToolParameter {
	return &NullableToolParameter{value: val, isSet: true}
}

func (v NullableToolParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


