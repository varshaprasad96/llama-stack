/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolResponseMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolResponseMessage{}

// ToolResponseMessage A message representing the result of a tool invocation.
type ToolResponseMessage struct {
	// Must be \"tool\" to identify this as a tool response
	Role string `json:"role"`
	// Unique identifier for the tool call this response is for
	CallId string `json:"call_id"`
	// The response content from the tool
	Content InterleavedContent `json:"content"`
}

type _ToolResponseMessage ToolResponseMessage

// NewToolResponseMessage instantiates a new ToolResponseMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolResponseMessage(role string, callId string, content InterleavedContent) *ToolResponseMessage {
	this := ToolResponseMessage{}
	this.Role = role
	this.CallId = callId
	this.Content = content
	return &this
}

// NewToolResponseMessageWithDefaults instantiates a new ToolResponseMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolResponseMessageWithDefaults() *ToolResponseMessage {
	this := ToolResponseMessage{}
	var role string = "tool"
	this.Role = role
	return &this
}

// GetRole returns the Role field value
func (o *ToolResponseMessage) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ToolResponseMessage) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ToolResponseMessage) SetRole(v string) {
	o.Role = v
}

// GetCallId returns the CallId field value
func (o *ToolResponseMessage) GetCallId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value
// and a boolean to check if the value has been set.
func (o *ToolResponseMessage) GetCallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CallId, true
}

// SetCallId sets field value
func (o *ToolResponseMessage) SetCallId(v string) {
	o.CallId = v
}

// GetContent returns the Content field value
func (o *ToolResponseMessage) GetContent() InterleavedContent {
	if o == nil {
		var ret InterleavedContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ToolResponseMessage) GetContentOk() (*InterleavedContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ToolResponseMessage) SetContent(v InterleavedContent) {
	o.Content = v
}

func (o ToolResponseMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolResponseMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	toSerialize["call_id"] = o.CallId
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

func (o *ToolResponseMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
		"call_id",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolResponseMessage := _ToolResponseMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolResponseMessage)

	if err != nil {
		return err
	}

	*o = ToolResponseMessage(varToolResponseMessage)

	return err
}

type NullableToolResponseMessage struct {
	value *ToolResponseMessage
	isSet bool
}

func (v NullableToolResponseMessage) Get() *ToolResponseMessage {
	return v.value
}

func (v *NullableToolResponseMessage) Set(val *ToolResponseMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableToolResponseMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableToolResponseMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolResponseMessage(val *ToolResponseMessage) *NullableToolResponseMessage {
	return &NullableToolResponseMessage{value: val, isSet: true}
}

func (v NullableToolResponseMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolResponseMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


