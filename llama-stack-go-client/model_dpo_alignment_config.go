/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DPOAlignmentConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DPOAlignmentConfig{}

// DPOAlignmentConfig struct for DPOAlignmentConfig
type DPOAlignmentConfig struct {
	RewardScale float32 `json:"reward_scale"`
	RewardClip float32 `json:"reward_clip"`
	Epsilon float32 `json:"epsilon"`
	Gamma float32 `json:"gamma"`
}

type _DPOAlignmentConfig DPOAlignmentConfig

// NewDPOAlignmentConfig instantiates a new DPOAlignmentConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDPOAlignmentConfig(rewardScale float32, rewardClip float32, epsilon float32, gamma float32) *DPOAlignmentConfig {
	this := DPOAlignmentConfig{}
	this.RewardScale = rewardScale
	this.RewardClip = rewardClip
	this.Epsilon = epsilon
	this.Gamma = gamma
	return &this
}

// NewDPOAlignmentConfigWithDefaults instantiates a new DPOAlignmentConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDPOAlignmentConfigWithDefaults() *DPOAlignmentConfig {
	this := DPOAlignmentConfig{}
	return &this
}

// GetRewardScale returns the RewardScale field value
func (o *DPOAlignmentConfig) GetRewardScale() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RewardScale
}

// GetRewardScaleOk returns a tuple with the RewardScale field value
// and a boolean to check if the value has been set.
func (o *DPOAlignmentConfig) GetRewardScaleOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewardScale, true
}

// SetRewardScale sets field value
func (o *DPOAlignmentConfig) SetRewardScale(v float32) {
	o.RewardScale = v
}

// GetRewardClip returns the RewardClip field value
func (o *DPOAlignmentConfig) GetRewardClip() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RewardClip
}

// GetRewardClipOk returns a tuple with the RewardClip field value
// and a boolean to check if the value has been set.
func (o *DPOAlignmentConfig) GetRewardClipOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RewardClip, true
}

// SetRewardClip sets field value
func (o *DPOAlignmentConfig) SetRewardClip(v float32) {
	o.RewardClip = v
}

// GetEpsilon returns the Epsilon field value
func (o *DPOAlignmentConfig) GetEpsilon() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Epsilon
}

// GetEpsilonOk returns a tuple with the Epsilon field value
// and a boolean to check if the value has been set.
func (o *DPOAlignmentConfig) GetEpsilonOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Epsilon, true
}

// SetEpsilon sets field value
func (o *DPOAlignmentConfig) SetEpsilon(v float32) {
	o.Epsilon = v
}

// GetGamma returns the Gamma field value
func (o *DPOAlignmentConfig) GetGamma() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Gamma
}

// GetGammaOk returns a tuple with the Gamma field value
// and a boolean to check if the value has been set.
func (o *DPOAlignmentConfig) GetGammaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gamma, true
}

// SetGamma sets field value
func (o *DPOAlignmentConfig) SetGamma(v float32) {
	o.Gamma = v
}

func (o DPOAlignmentConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DPOAlignmentConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reward_scale"] = o.RewardScale
	toSerialize["reward_clip"] = o.RewardClip
	toSerialize["epsilon"] = o.Epsilon
	toSerialize["gamma"] = o.Gamma
	return toSerialize, nil
}

func (o *DPOAlignmentConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reward_scale",
		"reward_clip",
		"epsilon",
		"gamma",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDPOAlignmentConfig := _DPOAlignmentConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDPOAlignmentConfig)

	if err != nil {
		return err
	}

	*o = DPOAlignmentConfig(varDPOAlignmentConfig)

	return err
}

type NullableDPOAlignmentConfig struct {
	value *DPOAlignmentConfig
	isSet bool
}

func (v NullableDPOAlignmentConfig) Get() *DPOAlignmentConfig {
	return v.value
}

func (v *NullableDPOAlignmentConfig) Set(val *DPOAlignmentConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDPOAlignmentConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDPOAlignmentConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDPOAlignmentConfig(val *DPOAlignmentConfig) *NullableDPOAlignmentConfig {
	return &NullableDPOAlignmentConfig{value: val, isSet: true}
}

func (v NullableDPOAlignmentConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDPOAlignmentConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


