/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogEventRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogEventRequest{}

// LogEventRequest struct for LogEventRequest
type LogEventRequest struct {
	Event Event `json:"event"`
	TtlSeconds int32 `json:"ttl_seconds"`
}

type _LogEventRequest LogEventRequest

// NewLogEventRequest instantiates a new LogEventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogEventRequest(event Event, ttlSeconds int32) *LogEventRequest {
	this := LogEventRequest{}
	this.Event = event
	this.TtlSeconds = ttlSeconds
	return &this
}

// NewLogEventRequestWithDefaults instantiates a new LogEventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogEventRequestWithDefaults() *LogEventRequest {
	this := LogEventRequest{}
	return &this
}

// GetEvent returns the Event field value
func (o *LogEventRequest) GetEvent() Event {
	if o == nil {
		var ret Event
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *LogEventRequest) GetEventOk() (*Event, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *LogEventRequest) SetEvent(v Event) {
	o.Event = v
}

// GetTtlSeconds returns the TtlSeconds field value
func (o *LogEventRequest) GetTtlSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TtlSeconds
}

// GetTtlSecondsOk returns a tuple with the TtlSeconds field value
// and a boolean to check if the value has been set.
func (o *LogEventRequest) GetTtlSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TtlSeconds, true
}

// SetTtlSeconds sets field value
func (o *LogEventRequest) SetTtlSeconds(v int32) {
	o.TtlSeconds = v
}

func (o LogEventRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogEventRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event"] = o.Event
	toSerialize["ttl_seconds"] = o.TtlSeconds
	return toSerialize, nil
}

func (o *LogEventRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
		"ttl_seconds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogEventRequest := _LogEventRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogEventRequest)

	if err != nil {
		return err
	}

	*o = LogEventRequest(varLogEventRequest)

	return err
}

type NullableLogEventRequest struct {
	value *LogEventRequest
	isSet bool
}

func (v NullableLogEventRequest) Get() *LogEventRequest {
	return v.value
}

func (v *NullableLogEventRequest) Set(val *LogEventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLogEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLogEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogEventRequest(val *LogEventRequest) *NullableLogEventRequest {
	return &NullableLogEventRequest{value: val, isSet: true}
}

func (v NullableLogEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


