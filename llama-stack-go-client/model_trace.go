/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Trace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trace{}

// Trace struct for Trace
type Trace struct {
	TraceId string `json:"trace_id"`
	RootSpanId string `json:"root_span_id"`
	StartTime time.Time `json:"start_time"`
	EndTime *time.Time `json:"end_time,omitempty"`
}

type _Trace Trace

// NewTrace instantiates a new Trace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrace(traceId string, rootSpanId string, startTime time.Time) *Trace {
	this := Trace{}
	this.TraceId = traceId
	this.RootSpanId = rootSpanId
	this.StartTime = startTime
	return &this
}

// NewTraceWithDefaults instantiates a new Trace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceWithDefaults() *Trace {
	this := Trace{}
	return &this
}

// GetTraceId returns the TraceId field value
func (o *Trace) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *Trace) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *Trace) SetTraceId(v string) {
	o.TraceId = v
}

// GetRootSpanId returns the RootSpanId field value
func (o *Trace) GetRootSpanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootSpanId
}

// GetRootSpanIdOk returns a tuple with the RootSpanId field value
// and a boolean to check if the value has been set.
func (o *Trace) GetRootSpanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootSpanId, true
}

// SetRootSpanId sets field value
func (o *Trace) SetRootSpanId(v string) {
	o.RootSpanId = v
}

// GetStartTime returns the StartTime field value
func (o *Trace) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Trace) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Trace) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *Trace) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *Trace) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *Trace) SetEndTime(v time.Time) {
	o.EndTime = &v
}

func (o Trace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trace_id"] = o.TraceId
	toSerialize["root_span_id"] = o.RootSpanId
	toSerialize["start_time"] = o.StartTime
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	return toSerialize, nil
}

func (o *Trace) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trace_id",
		"root_span_id",
		"start_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrace := _Trace{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrace)

	if err != nil {
		return err
	}

	*o = Trace(varTrace)

	return err
}

type NullableTrace struct {
	value *Trace
	isSet bool
}

func (v NullableTrace) Get() *Trace {
	return v.value
}

func (v *NullableTrace) Set(val *Trace) {
	v.value = val
	v.isSet = true
}

func (v NullableTrace) IsSet() bool {
	return v.isSet
}

func (v *NullableTrace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrace(val *Trace) *NullableTrace {
	return &NullableTrace{value: val, isSet: true}
}

func (v NullableTrace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


