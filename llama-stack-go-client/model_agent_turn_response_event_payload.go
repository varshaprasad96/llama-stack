/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AgentTurnResponseEventPayload - struct for AgentTurnResponseEventPayload
type AgentTurnResponseEventPayload struct {
	AgentTurnResponseStepCompletePayload *AgentTurnResponseStepCompletePayload
	AgentTurnResponseStepProgressPayload *AgentTurnResponseStepProgressPayload
	AgentTurnResponseStepStartPayload *AgentTurnResponseStepStartPayload
	AgentTurnResponseTurnAwaitingInputPayload *AgentTurnResponseTurnAwaitingInputPayload
	AgentTurnResponseTurnCompletePayload *AgentTurnResponseTurnCompletePayload
	AgentTurnResponseTurnStartPayload *AgentTurnResponseTurnStartPayload
}

// AgentTurnResponseStepCompletePayloadAsAgentTurnResponseEventPayload is a convenience function that returns AgentTurnResponseStepCompletePayload wrapped in AgentTurnResponseEventPayload
func AgentTurnResponseStepCompletePayloadAsAgentTurnResponseEventPayload(v *AgentTurnResponseStepCompletePayload) AgentTurnResponseEventPayload {
	return AgentTurnResponseEventPayload{
		AgentTurnResponseStepCompletePayload: v,
	}
}

// AgentTurnResponseStepProgressPayloadAsAgentTurnResponseEventPayload is a convenience function that returns AgentTurnResponseStepProgressPayload wrapped in AgentTurnResponseEventPayload
func AgentTurnResponseStepProgressPayloadAsAgentTurnResponseEventPayload(v *AgentTurnResponseStepProgressPayload) AgentTurnResponseEventPayload {
	return AgentTurnResponseEventPayload{
		AgentTurnResponseStepProgressPayload: v,
	}
}

// AgentTurnResponseStepStartPayloadAsAgentTurnResponseEventPayload is a convenience function that returns AgentTurnResponseStepStartPayload wrapped in AgentTurnResponseEventPayload
func AgentTurnResponseStepStartPayloadAsAgentTurnResponseEventPayload(v *AgentTurnResponseStepStartPayload) AgentTurnResponseEventPayload {
	return AgentTurnResponseEventPayload{
		AgentTurnResponseStepStartPayload: v,
	}
}

// AgentTurnResponseTurnAwaitingInputPayloadAsAgentTurnResponseEventPayload is a convenience function that returns AgentTurnResponseTurnAwaitingInputPayload wrapped in AgentTurnResponseEventPayload
func AgentTurnResponseTurnAwaitingInputPayloadAsAgentTurnResponseEventPayload(v *AgentTurnResponseTurnAwaitingInputPayload) AgentTurnResponseEventPayload {
	return AgentTurnResponseEventPayload{
		AgentTurnResponseTurnAwaitingInputPayload: v,
	}
}

// AgentTurnResponseTurnCompletePayloadAsAgentTurnResponseEventPayload is a convenience function that returns AgentTurnResponseTurnCompletePayload wrapped in AgentTurnResponseEventPayload
func AgentTurnResponseTurnCompletePayloadAsAgentTurnResponseEventPayload(v *AgentTurnResponseTurnCompletePayload) AgentTurnResponseEventPayload {
	return AgentTurnResponseEventPayload{
		AgentTurnResponseTurnCompletePayload: v,
	}
}

// AgentTurnResponseTurnStartPayloadAsAgentTurnResponseEventPayload is a convenience function that returns AgentTurnResponseTurnStartPayload wrapped in AgentTurnResponseEventPayload
func AgentTurnResponseTurnStartPayloadAsAgentTurnResponseEventPayload(v *AgentTurnResponseTurnStartPayload) AgentTurnResponseEventPayload {
	return AgentTurnResponseEventPayload{
		AgentTurnResponseTurnStartPayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AgentTurnResponseEventPayload) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AgentTurnResponseStepCompletePayload
	err = newStrictDecoder(data).Decode(&dst.AgentTurnResponseStepCompletePayload)
	if err == nil {
		jsonAgentTurnResponseStepCompletePayload, _ := json.Marshal(dst.AgentTurnResponseStepCompletePayload)
		if string(jsonAgentTurnResponseStepCompletePayload) == "{}" { // empty struct
			dst.AgentTurnResponseStepCompletePayload = nil
		} else {
			if err = validator.Validate(dst.AgentTurnResponseStepCompletePayload); err != nil {
				dst.AgentTurnResponseStepCompletePayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentTurnResponseStepCompletePayload = nil
	}

	// try to unmarshal data into AgentTurnResponseStepProgressPayload
	err = newStrictDecoder(data).Decode(&dst.AgentTurnResponseStepProgressPayload)
	if err == nil {
		jsonAgentTurnResponseStepProgressPayload, _ := json.Marshal(dst.AgentTurnResponseStepProgressPayload)
		if string(jsonAgentTurnResponseStepProgressPayload) == "{}" { // empty struct
			dst.AgentTurnResponseStepProgressPayload = nil
		} else {
			if err = validator.Validate(dst.AgentTurnResponseStepProgressPayload); err != nil {
				dst.AgentTurnResponseStepProgressPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentTurnResponseStepProgressPayload = nil
	}

	// try to unmarshal data into AgentTurnResponseStepStartPayload
	err = newStrictDecoder(data).Decode(&dst.AgentTurnResponseStepStartPayload)
	if err == nil {
		jsonAgentTurnResponseStepStartPayload, _ := json.Marshal(dst.AgentTurnResponseStepStartPayload)
		if string(jsonAgentTurnResponseStepStartPayload) == "{}" { // empty struct
			dst.AgentTurnResponseStepStartPayload = nil
		} else {
			if err = validator.Validate(dst.AgentTurnResponseStepStartPayload); err != nil {
				dst.AgentTurnResponseStepStartPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentTurnResponseStepStartPayload = nil
	}

	// try to unmarshal data into AgentTurnResponseTurnAwaitingInputPayload
	err = newStrictDecoder(data).Decode(&dst.AgentTurnResponseTurnAwaitingInputPayload)
	if err == nil {
		jsonAgentTurnResponseTurnAwaitingInputPayload, _ := json.Marshal(dst.AgentTurnResponseTurnAwaitingInputPayload)
		if string(jsonAgentTurnResponseTurnAwaitingInputPayload) == "{}" { // empty struct
			dst.AgentTurnResponseTurnAwaitingInputPayload = nil
		} else {
			if err = validator.Validate(dst.AgentTurnResponseTurnAwaitingInputPayload); err != nil {
				dst.AgentTurnResponseTurnAwaitingInputPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentTurnResponseTurnAwaitingInputPayload = nil
	}

	// try to unmarshal data into AgentTurnResponseTurnCompletePayload
	err = newStrictDecoder(data).Decode(&dst.AgentTurnResponseTurnCompletePayload)
	if err == nil {
		jsonAgentTurnResponseTurnCompletePayload, _ := json.Marshal(dst.AgentTurnResponseTurnCompletePayload)
		if string(jsonAgentTurnResponseTurnCompletePayload) == "{}" { // empty struct
			dst.AgentTurnResponseTurnCompletePayload = nil
		} else {
			if err = validator.Validate(dst.AgentTurnResponseTurnCompletePayload); err != nil {
				dst.AgentTurnResponseTurnCompletePayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentTurnResponseTurnCompletePayload = nil
	}

	// try to unmarshal data into AgentTurnResponseTurnStartPayload
	err = newStrictDecoder(data).Decode(&dst.AgentTurnResponseTurnStartPayload)
	if err == nil {
		jsonAgentTurnResponseTurnStartPayload, _ := json.Marshal(dst.AgentTurnResponseTurnStartPayload)
		if string(jsonAgentTurnResponseTurnStartPayload) == "{}" { // empty struct
			dst.AgentTurnResponseTurnStartPayload = nil
		} else {
			if err = validator.Validate(dst.AgentTurnResponseTurnStartPayload); err != nil {
				dst.AgentTurnResponseTurnStartPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentTurnResponseTurnStartPayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AgentTurnResponseStepCompletePayload = nil
		dst.AgentTurnResponseStepProgressPayload = nil
		dst.AgentTurnResponseStepStartPayload = nil
		dst.AgentTurnResponseTurnAwaitingInputPayload = nil
		dst.AgentTurnResponseTurnCompletePayload = nil
		dst.AgentTurnResponseTurnStartPayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AgentTurnResponseEventPayload)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AgentTurnResponseEventPayload)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AgentTurnResponseEventPayload) MarshalJSON() ([]byte, error) {
	if src.AgentTurnResponseStepCompletePayload != nil {
		return json.Marshal(&src.AgentTurnResponseStepCompletePayload)
	}

	if src.AgentTurnResponseStepProgressPayload != nil {
		return json.Marshal(&src.AgentTurnResponseStepProgressPayload)
	}

	if src.AgentTurnResponseStepStartPayload != nil {
		return json.Marshal(&src.AgentTurnResponseStepStartPayload)
	}

	if src.AgentTurnResponseTurnAwaitingInputPayload != nil {
		return json.Marshal(&src.AgentTurnResponseTurnAwaitingInputPayload)
	}

	if src.AgentTurnResponseTurnCompletePayload != nil {
		return json.Marshal(&src.AgentTurnResponseTurnCompletePayload)
	}

	if src.AgentTurnResponseTurnStartPayload != nil {
		return json.Marshal(&src.AgentTurnResponseTurnStartPayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AgentTurnResponseEventPayload) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AgentTurnResponseStepCompletePayload != nil {
		return obj.AgentTurnResponseStepCompletePayload
	}

	if obj.AgentTurnResponseStepProgressPayload != nil {
		return obj.AgentTurnResponseStepProgressPayload
	}

	if obj.AgentTurnResponseStepStartPayload != nil {
		return obj.AgentTurnResponseStepStartPayload
	}

	if obj.AgentTurnResponseTurnAwaitingInputPayload != nil {
		return obj.AgentTurnResponseTurnAwaitingInputPayload
	}

	if obj.AgentTurnResponseTurnCompletePayload != nil {
		return obj.AgentTurnResponseTurnCompletePayload
	}

	if obj.AgentTurnResponseTurnStartPayload != nil {
		return obj.AgentTurnResponseTurnStartPayload
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AgentTurnResponseEventPayload) GetActualInstanceValue() (interface{}) {
	if obj.AgentTurnResponseStepCompletePayload != nil {
		return *obj.AgentTurnResponseStepCompletePayload
	}

	if obj.AgentTurnResponseStepProgressPayload != nil {
		return *obj.AgentTurnResponseStepProgressPayload
	}

	if obj.AgentTurnResponseStepStartPayload != nil {
		return *obj.AgentTurnResponseStepStartPayload
	}

	if obj.AgentTurnResponseTurnAwaitingInputPayload != nil {
		return *obj.AgentTurnResponseTurnAwaitingInputPayload
	}

	if obj.AgentTurnResponseTurnCompletePayload != nil {
		return *obj.AgentTurnResponseTurnCompletePayload
	}

	if obj.AgentTurnResponseTurnStartPayload != nil {
		return *obj.AgentTurnResponseTurnStartPayload
	}

	// all schemas are nil
	return nil
}

type NullableAgentTurnResponseEventPayload struct {
	value *AgentTurnResponseEventPayload
	isSet bool
}

func (v NullableAgentTurnResponseEventPayload) Get() *AgentTurnResponseEventPayload {
	return v.value
}

func (v *NullableAgentTurnResponseEventPayload) Set(val *AgentTurnResponseEventPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentTurnResponseEventPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentTurnResponseEventPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentTurnResponseEventPayload(val *AgentTurnResponseEventPayload) *NullableAgentTurnResponseEventPayload {
	return &NullableAgentTurnResponseEventPayload{value: val, isSet: true}
}

func (v NullableAgentTurnResponseEventPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentTurnResponseEventPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


