/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenAIChatCompletionContentPartTextParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenAIChatCompletionContentPartTextParam{}

// OpenAIChatCompletionContentPartTextParam struct for OpenAIChatCompletionContentPartTextParam
type OpenAIChatCompletionContentPartTextParam struct {
	Type string `json:"type"`
	Text string `json:"text"`
}

type _OpenAIChatCompletionContentPartTextParam OpenAIChatCompletionContentPartTextParam

// NewOpenAIChatCompletionContentPartTextParam instantiates a new OpenAIChatCompletionContentPartTextParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAIChatCompletionContentPartTextParam(type_ string, text string) *OpenAIChatCompletionContentPartTextParam {
	this := OpenAIChatCompletionContentPartTextParam{}
	this.Type = type_
	this.Text = text
	return &this
}

// NewOpenAIChatCompletionContentPartTextParamWithDefaults instantiates a new OpenAIChatCompletionContentPartTextParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAIChatCompletionContentPartTextParamWithDefaults() *OpenAIChatCompletionContentPartTextParam {
	this := OpenAIChatCompletionContentPartTextParam{}
	var type_ string = "text"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *OpenAIChatCompletionContentPartTextParam) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *OpenAIChatCompletionContentPartTextParam) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *OpenAIChatCompletionContentPartTextParam) SetType(v string) {
	o.Type = v
}

// GetText returns the Text field value
func (o *OpenAIChatCompletionContentPartTextParam) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *OpenAIChatCompletionContentPartTextParam) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *OpenAIChatCompletionContentPartTextParam) SetText(v string) {
	o.Text = v
}

func (o OpenAIChatCompletionContentPartTextParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenAIChatCompletionContentPartTextParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *OpenAIChatCompletionContentPartTextParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenAIChatCompletionContentPartTextParam := _OpenAIChatCompletionContentPartTextParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenAIChatCompletionContentPartTextParam)

	if err != nil {
		return err
	}

	*o = OpenAIChatCompletionContentPartTextParam(varOpenAIChatCompletionContentPartTextParam)

	return err
}

type NullableOpenAIChatCompletionContentPartTextParam struct {
	value *OpenAIChatCompletionContentPartTextParam
	isSet bool
}

func (v NullableOpenAIChatCompletionContentPartTextParam) Get() *OpenAIChatCompletionContentPartTextParam {
	return v.value
}

func (v *NullableOpenAIChatCompletionContentPartTextParam) Set(val *OpenAIChatCompletionContentPartTextParam) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIChatCompletionContentPartTextParam) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIChatCompletionContentPartTextParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIChatCompletionContentPartTextParam(val *OpenAIChatCompletionContentPartTextParam) *NullableOpenAIChatCompletionContentPartTextParam {
	return &NullableOpenAIChatCompletionContentPartTextParam{value: val, isSet: true}
}

func (v NullableOpenAIChatCompletionContentPartTextParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIChatCompletionContentPartTextParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


