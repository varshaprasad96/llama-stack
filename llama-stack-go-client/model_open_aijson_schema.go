/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenAIJSONSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenAIJSONSchema{}

// OpenAIJSONSchema struct for OpenAIJSONSchema
type OpenAIJSONSchema struct {
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Strict *bool `json:"strict,omitempty"`
	Schema map[string]AppendRowsRequestRowsInnerValue `json:"schema,omitempty"`
}

type _OpenAIJSONSchema OpenAIJSONSchema

// NewOpenAIJSONSchema instantiates a new OpenAIJSONSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAIJSONSchema(name string) *OpenAIJSONSchema {
	this := OpenAIJSONSchema{}
	this.Name = name
	return &this
}

// NewOpenAIJSONSchemaWithDefaults instantiates a new OpenAIJSONSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAIJSONSchemaWithDefaults() *OpenAIJSONSchema {
	this := OpenAIJSONSchema{}
	return &this
}

// GetName returns the Name field value
func (o *OpenAIJSONSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OpenAIJSONSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OpenAIJSONSchema) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *OpenAIJSONSchema) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIJSONSchema) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *OpenAIJSONSchema) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *OpenAIJSONSchema) SetDescription(v string) {
	o.Description = &v
}

// GetStrict returns the Strict field value if set, zero value otherwise.
func (o *OpenAIJSONSchema) GetStrict() bool {
	if o == nil || IsNil(o.Strict) {
		var ret bool
		return ret
	}
	return *o.Strict
}

// GetStrictOk returns a tuple with the Strict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIJSONSchema) GetStrictOk() (*bool, bool) {
	if o == nil || IsNil(o.Strict) {
		return nil, false
	}
	return o.Strict, true
}

// HasStrict returns a boolean if a field has been set.
func (o *OpenAIJSONSchema) HasStrict() bool {
	if o != nil && !IsNil(o.Strict) {
		return true
	}

	return false
}

// SetStrict gets a reference to the given bool and assigns it to the Strict field.
func (o *OpenAIJSONSchema) SetStrict(v bool) {
	o.Strict = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *OpenAIJSONSchema) GetSchema() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Schema) {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIJSONSchema) GetSchemaOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Schema) {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *OpenAIJSONSchema) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given map[string]AppendRowsRequestRowsInnerValue and assigns it to the Schema field.
func (o *OpenAIJSONSchema) SetSchema(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Schema = v
}

func (o OpenAIJSONSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenAIJSONSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Strict) {
		toSerialize["strict"] = o.Strict
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	return toSerialize, nil
}

func (o *OpenAIJSONSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenAIJSONSchema := _OpenAIJSONSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenAIJSONSchema)

	if err != nil {
		return err
	}

	*o = OpenAIJSONSchema(varOpenAIJSONSchema)

	return err
}

type NullableOpenAIJSONSchema struct {
	value *OpenAIJSONSchema
	isSet bool
}

func (v NullableOpenAIJSONSchema) Get() *OpenAIJSONSchema {
	return v.value
}

func (v *NullableOpenAIJSONSchema) Set(val *OpenAIJSONSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIJSONSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIJSONSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIJSONSchema(val *OpenAIJSONSchema) *NullableOpenAIJSONSchema {
	return &NullableOpenAIJSONSchema{value: val, isSet: true}
}

func (v NullableOpenAIJSONSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIJSONSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


