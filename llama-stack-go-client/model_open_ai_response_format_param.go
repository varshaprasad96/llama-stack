/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// OpenAIResponseFormatParam - struct for OpenAIResponseFormatParam
type OpenAIResponseFormatParam struct {
	OpenAIResponseFormatJSONObject *OpenAIResponseFormatJSONObject
	OpenAIResponseFormatJSONSchema *OpenAIResponseFormatJSONSchema
	OpenAIResponseFormatText *OpenAIResponseFormatText
}

// OpenAIResponseFormatJSONObjectAsOpenAIResponseFormatParam is a convenience function that returns OpenAIResponseFormatJSONObject wrapped in OpenAIResponseFormatParam
func OpenAIResponseFormatJSONObjectAsOpenAIResponseFormatParam(v *OpenAIResponseFormatJSONObject) OpenAIResponseFormatParam {
	return OpenAIResponseFormatParam{
		OpenAIResponseFormatJSONObject: v,
	}
}

// OpenAIResponseFormatJSONSchemaAsOpenAIResponseFormatParam is a convenience function that returns OpenAIResponseFormatJSONSchema wrapped in OpenAIResponseFormatParam
func OpenAIResponseFormatJSONSchemaAsOpenAIResponseFormatParam(v *OpenAIResponseFormatJSONSchema) OpenAIResponseFormatParam {
	return OpenAIResponseFormatParam{
		OpenAIResponseFormatJSONSchema: v,
	}
}

// OpenAIResponseFormatTextAsOpenAIResponseFormatParam is a convenience function that returns OpenAIResponseFormatText wrapped in OpenAIResponseFormatParam
func OpenAIResponseFormatTextAsOpenAIResponseFormatParam(v *OpenAIResponseFormatText) OpenAIResponseFormatParam {
	return OpenAIResponseFormatParam{
		OpenAIResponseFormatText: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OpenAIResponseFormatParam) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OpenAIResponseFormatJSONObject
	err = newStrictDecoder(data).Decode(&dst.OpenAIResponseFormatJSONObject)
	if err == nil {
		jsonOpenAIResponseFormatJSONObject, _ := json.Marshal(dst.OpenAIResponseFormatJSONObject)
		if string(jsonOpenAIResponseFormatJSONObject) == "{}" { // empty struct
			dst.OpenAIResponseFormatJSONObject = nil
		} else {
			if err = validator.Validate(dst.OpenAIResponseFormatJSONObject); err != nil {
				dst.OpenAIResponseFormatJSONObject = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAIResponseFormatJSONObject = nil
	}

	// try to unmarshal data into OpenAIResponseFormatJSONSchema
	err = newStrictDecoder(data).Decode(&dst.OpenAIResponseFormatJSONSchema)
	if err == nil {
		jsonOpenAIResponseFormatJSONSchema, _ := json.Marshal(dst.OpenAIResponseFormatJSONSchema)
		if string(jsonOpenAIResponseFormatJSONSchema) == "{}" { // empty struct
			dst.OpenAIResponseFormatJSONSchema = nil
		} else {
			if err = validator.Validate(dst.OpenAIResponseFormatJSONSchema); err != nil {
				dst.OpenAIResponseFormatJSONSchema = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAIResponseFormatJSONSchema = nil
	}

	// try to unmarshal data into OpenAIResponseFormatText
	err = newStrictDecoder(data).Decode(&dst.OpenAIResponseFormatText)
	if err == nil {
		jsonOpenAIResponseFormatText, _ := json.Marshal(dst.OpenAIResponseFormatText)
		if string(jsonOpenAIResponseFormatText) == "{}" { // empty struct
			dst.OpenAIResponseFormatText = nil
		} else {
			if err = validator.Validate(dst.OpenAIResponseFormatText); err != nil {
				dst.OpenAIResponseFormatText = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpenAIResponseFormatText = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OpenAIResponseFormatJSONObject = nil
		dst.OpenAIResponseFormatJSONSchema = nil
		dst.OpenAIResponseFormatText = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OpenAIResponseFormatParam)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OpenAIResponseFormatParam)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OpenAIResponseFormatParam) MarshalJSON() ([]byte, error) {
	if src.OpenAIResponseFormatJSONObject != nil {
		return json.Marshal(&src.OpenAIResponseFormatJSONObject)
	}

	if src.OpenAIResponseFormatJSONSchema != nil {
		return json.Marshal(&src.OpenAIResponseFormatJSONSchema)
	}

	if src.OpenAIResponseFormatText != nil {
		return json.Marshal(&src.OpenAIResponseFormatText)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OpenAIResponseFormatParam) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.OpenAIResponseFormatJSONObject != nil {
		return obj.OpenAIResponseFormatJSONObject
	}

	if obj.OpenAIResponseFormatJSONSchema != nil {
		return obj.OpenAIResponseFormatJSONSchema
	}

	if obj.OpenAIResponseFormatText != nil {
		return obj.OpenAIResponseFormatText
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj OpenAIResponseFormatParam) GetActualInstanceValue() (interface{}) {
	if obj.OpenAIResponseFormatJSONObject != nil {
		return *obj.OpenAIResponseFormatJSONObject
	}

	if obj.OpenAIResponseFormatJSONSchema != nil {
		return *obj.OpenAIResponseFormatJSONSchema
	}

	if obj.OpenAIResponseFormatText != nil {
		return *obj.OpenAIResponseFormatText
	}

	// all schemas are nil
	return nil
}

type NullableOpenAIResponseFormatParam struct {
	value *OpenAIResponseFormatParam
	isSet bool
}

func (v NullableOpenAIResponseFormatParam) Get() *OpenAIResponseFormatParam {
	return v.value
}

func (v *NullableOpenAIResponseFormatParam) Set(val *OpenAIResponseFormatParam) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIResponseFormatParam) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIResponseFormatParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIResponseFormatParam(val *OpenAIResponseFormatParam) *NullableOpenAIResponseFormatParam {
	return &NullableOpenAIResponseFormatParam{value: val, isSet: true}
}

func (v NullableOpenAIResponseFormatParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIResponseFormatParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


