/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterBenchmarkRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterBenchmarkRequest{}

// RegisterBenchmarkRequest struct for RegisterBenchmarkRequest
type RegisterBenchmarkRequest struct {
	BenchmarkId string `json:"benchmark_id"`
	DatasetId string `json:"dataset_id"`
	ScoringFunctions []string `json:"scoring_functions"`
	ProviderBenchmarkId *string `json:"provider_benchmark_id,omitempty"`
	ProviderId *string `json:"provider_id,omitempty"`
	Metadata map[string]AppendRowsRequestRowsInnerValue `json:"metadata,omitempty"`
}

type _RegisterBenchmarkRequest RegisterBenchmarkRequest

// NewRegisterBenchmarkRequest instantiates a new RegisterBenchmarkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterBenchmarkRequest(benchmarkId string, datasetId string, scoringFunctions []string) *RegisterBenchmarkRequest {
	this := RegisterBenchmarkRequest{}
	this.BenchmarkId = benchmarkId
	this.DatasetId = datasetId
	this.ScoringFunctions = scoringFunctions
	return &this
}

// NewRegisterBenchmarkRequestWithDefaults instantiates a new RegisterBenchmarkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterBenchmarkRequestWithDefaults() *RegisterBenchmarkRequest {
	this := RegisterBenchmarkRequest{}
	return &this
}

// GetBenchmarkId returns the BenchmarkId field value
func (o *RegisterBenchmarkRequest) GetBenchmarkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BenchmarkId
}

// GetBenchmarkIdOk returns a tuple with the BenchmarkId field value
// and a boolean to check if the value has been set.
func (o *RegisterBenchmarkRequest) GetBenchmarkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BenchmarkId, true
}

// SetBenchmarkId sets field value
func (o *RegisterBenchmarkRequest) SetBenchmarkId(v string) {
	o.BenchmarkId = v
}

// GetDatasetId returns the DatasetId field value
func (o *RegisterBenchmarkRequest) GetDatasetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field value
// and a boolean to check if the value has been set.
func (o *RegisterBenchmarkRequest) GetDatasetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatasetId, true
}

// SetDatasetId sets field value
func (o *RegisterBenchmarkRequest) SetDatasetId(v string) {
	o.DatasetId = v
}

// GetScoringFunctions returns the ScoringFunctions field value
func (o *RegisterBenchmarkRequest) GetScoringFunctions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ScoringFunctions
}

// GetScoringFunctionsOk returns a tuple with the ScoringFunctions field value
// and a boolean to check if the value has been set.
func (o *RegisterBenchmarkRequest) GetScoringFunctionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScoringFunctions, true
}

// SetScoringFunctions sets field value
func (o *RegisterBenchmarkRequest) SetScoringFunctions(v []string) {
	o.ScoringFunctions = v
}

// GetProviderBenchmarkId returns the ProviderBenchmarkId field value if set, zero value otherwise.
func (o *RegisterBenchmarkRequest) GetProviderBenchmarkId() string {
	if o == nil || IsNil(o.ProviderBenchmarkId) {
		var ret string
		return ret
	}
	return *o.ProviderBenchmarkId
}

// GetProviderBenchmarkIdOk returns a tuple with the ProviderBenchmarkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterBenchmarkRequest) GetProviderBenchmarkIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderBenchmarkId) {
		return nil, false
	}
	return o.ProviderBenchmarkId, true
}

// HasProviderBenchmarkId returns a boolean if a field has been set.
func (o *RegisterBenchmarkRequest) HasProviderBenchmarkId() bool {
	if o != nil && !IsNil(o.ProviderBenchmarkId) {
		return true
	}

	return false
}

// SetProviderBenchmarkId gets a reference to the given string and assigns it to the ProviderBenchmarkId field.
func (o *RegisterBenchmarkRequest) SetProviderBenchmarkId(v string) {
	o.ProviderBenchmarkId = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *RegisterBenchmarkRequest) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterBenchmarkRequest) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *RegisterBenchmarkRequest) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *RegisterBenchmarkRequest) SetProviderId(v string) {
	o.ProviderId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *RegisterBenchmarkRequest) GetMetadata() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterBenchmarkRequest) GetMetadataOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RegisterBenchmarkRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]AppendRowsRequestRowsInnerValue and assigns it to the Metadata field.
func (o *RegisterBenchmarkRequest) SetMetadata(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Metadata = v
}

func (o RegisterBenchmarkRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterBenchmarkRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["benchmark_id"] = o.BenchmarkId
	toSerialize["dataset_id"] = o.DatasetId
	toSerialize["scoring_functions"] = o.ScoringFunctions
	if !IsNil(o.ProviderBenchmarkId) {
		toSerialize["provider_benchmark_id"] = o.ProviderBenchmarkId
	}
	if !IsNil(o.ProviderId) {
		toSerialize["provider_id"] = o.ProviderId
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *RegisterBenchmarkRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"benchmark_id",
		"dataset_id",
		"scoring_functions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterBenchmarkRequest := _RegisterBenchmarkRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterBenchmarkRequest)

	if err != nil {
		return err
	}

	*o = RegisterBenchmarkRequest(varRegisterBenchmarkRequest)

	return err
}

type NullableRegisterBenchmarkRequest struct {
	value *RegisterBenchmarkRequest
	isSet bool
}

func (v NullableRegisterBenchmarkRequest) Get() *RegisterBenchmarkRequest {
	return v.value
}

func (v *NullableRegisterBenchmarkRequest) Set(val *RegisterBenchmarkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterBenchmarkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterBenchmarkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterBenchmarkRequest(val *RegisterBenchmarkRequest) *NullableRegisterBenchmarkRequest {
	return &NullableRegisterBenchmarkRequest{value: val, isSet: true}
}

func (v NullableRegisterBenchmarkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterBenchmarkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


