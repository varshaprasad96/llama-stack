/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TopPSamplingStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopPSamplingStrategy{}

// TopPSamplingStrategy struct for TopPSamplingStrategy
type TopPSamplingStrategy struct {
	Type string `json:"type"`
	Temperature *float32 `json:"temperature,omitempty"`
	TopP *float32 `json:"top_p,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TopPSamplingStrategy TopPSamplingStrategy

// NewTopPSamplingStrategy instantiates a new TopPSamplingStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopPSamplingStrategy(type_ string) *TopPSamplingStrategy {
	this := TopPSamplingStrategy{}
	this.Type = type_
	var topP float32 = 0.95
	this.TopP = &topP
	return &this
}

// NewTopPSamplingStrategyWithDefaults instantiates a new TopPSamplingStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopPSamplingStrategyWithDefaults() *TopPSamplingStrategy {
	this := TopPSamplingStrategy{}
	var type_ string = "top_p"
	this.Type = type_
	var topP float32 = 0.95
	this.TopP = &topP
	return &this
}

// GetType returns the Type field value
func (o *TopPSamplingStrategy) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TopPSamplingStrategy) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TopPSamplingStrategy) SetType(v string) {
	o.Type = v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *TopPSamplingStrategy) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopPSamplingStrategy) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *TopPSamplingStrategy) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *TopPSamplingStrategy) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetTopP returns the TopP field value if set, zero value otherwise.
func (o *TopPSamplingStrategy) GetTopP() float32 {
	if o == nil || IsNil(o.TopP) {
		var ret float32
		return ret
	}
	return *o.TopP
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopPSamplingStrategy) GetTopPOk() (*float32, bool) {
	if o == nil || IsNil(o.TopP) {
		return nil, false
	}
	return o.TopP, true
}

// HasTopP returns a boolean if a field has been set.
func (o *TopPSamplingStrategy) HasTopP() bool {
	if o != nil && !IsNil(o.TopP) {
		return true
	}

	return false
}

// SetTopP gets a reference to the given float32 and assigns it to the TopP field.
func (o *TopPSamplingStrategy) SetTopP(v float32) {
	o.TopP = &v
}

func (o TopPSamplingStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopPSamplingStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.TopP) {
		toSerialize["top_p"] = o.TopP
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TopPSamplingStrategy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTopPSamplingStrategy := _TopPSamplingStrategy{}

	err = json.Unmarshal(data, &varTopPSamplingStrategy)

	if err != nil {
		return err
	}

	*o = TopPSamplingStrategy(varTopPSamplingStrategy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "temperature")
		delete(additionalProperties, "top_p")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTopPSamplingStrategy struct {
	value *TopPSamplingStrategy
	isSet bool
}

func (v NullableTopPSamplingStrategy) Get() *TopPSamplingStrategy {
	return v.value
}

func (v *NullableTopPSamplingStrategy) Set(val *TopPSamplingStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableTopPSamplingStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableTopPSamplingStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopPSamplingStrategy(val *TopPSamplingStrategy) *NullableTopPSamplingStrategy {
	return &NullableTopPSamplingStrategy{value: val, isSet: true}
}

func (v NullableTopPSamplingStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopPSamplingStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


