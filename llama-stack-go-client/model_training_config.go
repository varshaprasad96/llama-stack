/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrainingConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrainingConfig{}

// TrainingConfig struct for TrainingConfig
type TrainingConfig struct {
	NEpochs int32 `json:"n_epochs"`
	MaxStepsPerEpoch int32 `json:"max_steps_per_epoch"`
	GradientAccumulationSteps int32 `json:"gradient_accumulation_steps"`
	MaxValidationSteps *int32 `json:"max_validation_steps,omitempty"`
	DataConfig *DataConfig `json:"data_config,omitempty"`
	OptimizerConfig *OptimizerConfig `json:"optimizer_config,omitempty"`
	EfficiencyConfig *EfficiencyConfig `json:"efficiency_config,omitempty"`
	Dtype *string `json:"dtype,omitempty"`
}

type _TrainingConfig TrainingConfig

// NewTrainingConfig instantiates a new TrainingConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrainingConfig(nEpochs int32, maxStepsPerEpoch int32, gradientAccumulationSteps int32) *TrainingConfig {
	this := TrainingConfig{}
	this.NEpochs = nEpochs
	this.MaxStepsPerEpoch = maxStepsPerEpoch
	this.GradientAccumulationSteps = gradientAccumulationSteps
	var maxValidationSteps int32 = 1
	this.MaxValidationSteps = &maxValidationSteps
	var dtype string = "bf16"
	this.Dtype = &dtype
	return &this
}

// NewTrainingConfigWithDefaults instantiates a new TrainingConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrainingConfigWithDefaults() *TrainingConfig {
	this := TrainingConfig{}
	var maxStepsPerEpoch int32 = 1
	this.MaxStepsPerEpoch = maxStepsPerEpoch
	var gradientAccumulationSteps int32 = 1
	this.GradientAccumulationSteps = gradientAccumulationSteps
	var maxValidationSteps int32 = 1
	this.MaxValidationSteps = &maxValidationSteps
	var dtype string = "bf16"
	this.Dtype = &dtype
	return &this
}

// GetNEpochs returns the NEpochs field value
func (o *TrainingConfig) GetNEpochs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NEpochs
}

// GetNEpochsOk returns a tuple with the NEpochs field value
// and a boolean to check if the value has been set.
func (o *TrainingConfig) GetNEpochsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NEpochs, true
}

// SetNEpochs sets field value
func (o *TrainingConfig) SetNEpochs(v int32) {
	o.NEpochs = v
}

// GetMaxStepsPerEpoch returns the MaxStepsPerEpoch field value
func (o *TrainingConfig) GetMaxStepsPerEpoch() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxStepsPerEpoch
}

// GetMaxStepsPerEpochOk returns a tuple with the MaxStepsPerEpoch field value
// and a boolean to check if the value has been set.
func (o *TrainingConfig) GetMaxStepsPerEpochOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxStepsPerEpoch, true
}

// SetMaxStepsPerEpoch sets field value
func (o *TrainingConfig) SetMaxStepsPerEpoch(v int32) {
	o.MaxStepsPerEpoch = v
}

// GetGradientAccumulationSteps returns the GradientAccumulationSteps field value
func (o *TrainingConfig) GetGradientAccumulationSteps() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GradientAccumulationSteps
}

// GetGradientAccumulationStepsOk returns a tuple with the GradientAccumulationSteps field value
// and a boolean to check if the value has been set.
func (o *TrainingConfig) GetGradientAccumulationStepsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GradientAccumulationSteps, true
}

// SetGradientAccumulationSteps sets field value
func (o *TrainingConfig) SetGradientAccumulationSteps(v int32) {
	o.GradientAccumulationSteps = v
}

// GetMaxValidationSteps returns the MaxValidationSteps field value if set, zero value otherwise.
func (o *TrainingConfig) GetMaxValidationSteps() int32 {
	if o == nil || IsNil(o.MaxValidationSteps) {
		var ret int32
		return ret
	}
	return *o.MaxValidationSteps
}

// GetMaxValidationStepsOk returns a tuple with the MaxValidationSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrainingConfig) GetMaxValidationStepsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxValidationSteps) {
		return nil, false
	}
	return o.MaxValidationSteps, true
}

// HasMaxValidationSteps returns a boolean if a field has been set.
func (o *TrainingConfig) HasMaxValidationSteps() bool {
	if o != nil && !IsNil(o.MaxValidationSteps) {
		return true
	}

	return false
}

// SetMaxValidationSteps gets a reference to the given int32 and assigns it to the MaxValidationSteps field.
func (o *TrainingConfig) SetMaxValidationSteps(v int32) {
	o.MaxValidationSteps = &v
}

// GetDataConfig returns the DataConfig field value if set, zero value otherwise.
func (o *TrainingConfig) GetDataConfig() DataConfig {
	if o == nil || IsNil(o.DataConfig) {
		var ret DataConfig
		return ret
	}
	return *o.DataConfig
}

// GetDataConfigOk returns a tuple with the DataConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrainingConfig) GetDataConfigOk() (*DataConfig, bool) {
	if o == nil || IsNil(o.DataConfig) {
		return nil, false
	}
	return o.DataConfig, true
}

// HasDataConfig returns a boolean if a field has been set.
func (o *TrainingConfig) HasDataConfig() bool {
	if o != nil && !IsNil(o.DataConfig) {
		return true
	}

	return false
}

// SetDataConfig gets a reference to the given DataConfig and assigns it to the DataConfig field.
func (o *TrainingConfig) SetDataConfig(v DataConfig) {
	o.DataConfig = &v
}

// GetOptimizerConfig returns the OptimizerConfig field value if set, zero value otherwise.
func (o *TrainingConfig) GetOptimizerConfig() OptimizerConfig {
	if o == nil || IsNil(o.OptimizerConfig) {
		var ret OptimizerConfig
		return ret
	}
	return *o.OptimizerConfig
}

// GetOptimizerConfigOk returns a tuple with the OptimizerConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrainingConfig) GetOptimizerConfigOk() (*OptimizerConfig, bool) {
	if o == nil || IsNil(o.OptimizerConfig) {
		return nil, false
	}
	return o.OptimizerConfig, true
}

// HasOptimizerConfig returns a boolean if a field has been set.
func (o *TrainingConfig) HasOptimizerConfig() bool {
	if o != nil && !IsNil(o.OptimizerConfig) {
		return true
	}

	return false
}

// SetOptimizerConfig gets a reference to the given OptimizerConfig and assigns it to the OptimizerConfig field.
func (o *TrainingConfig) SetOptimizerConfig(v OptimizerConfig) {
	o.OptimizerConfig = &v
}

// GetEfficiencyConfig returns the EfficiencyConfig field value if set, zero value otherwise.
func (o *TrainingConfig) GetEfficiencyConfig() EfficiencyConfig {
	if o == nil || IsNil(o.EfficiencyConfig) {
		var ret EfficiencyConfig
		return ret
	}
	return *o.EfficiencyConfig
}

// GetEfficiencyConfigOk returns a tuple with the EfficiencyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrainingConfig) GetEfficiencyConfigOk() (*EfficiencyConfig, bool) {
	if o == nil || IsNil(o.EfficiencyConfig) {
		return nil, false
	}
	return o.EfficiencyConfig, true
}

// HasEfficiencyConfig returns a boolean if a field has been set.
func (o *TrainingConfig) HasEfficiencyConfig() bool {
	if o != nil && !IsNil(o.EfficiencyConfig) {
		return true
	}

	return false
}

// SetEfficiencyConfig gets a reference to the given EfficiencyConfig and assigns it to the EfficiencyConfig field.
func (o *TrainingConfig) SetEfficiencyConfig(v EfficiencyConfig) {
	o.EfficiencyConfig = &v
}

// GetDtype returns the Dtype field value if set, zero value otherwise.
func (o *TrainingConfig) GetDtype() string {
	if o == nil || IsNil(o.Dtype) {
		var ret string
		return ret
	}
	return *o.Dtype
}

// GetDtypeOk returns a tuple with the Dtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrainingConfig) GetDtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Dtype) {
		return nil, false
	}
	return o.Dtype, true
}

// HasDtype returns a boolean if a field has been set.
func (o *TrainingConfig) HasDtype() bool {
	if o != nil && !IsNil(o.Dtype) {
		return true
	}

	return false
}

// SetDtype gets a reference to the given string and assigns it to the Dtype field.
func (o *TrainingConfig) SetDtype(v string) {
	o.Dtype = &v
}

func (o TrainingConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrainingConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["n_epochs"] = o.NEpochs
	toSerialize["max_steps_per_epoch"] = o.MaxStepsPerEpoch
	toSerialize["gradient_accumulation_steps"] = o.GradientAccumulationSteps
	if !IsNil(o.MaxValidationSteps) {
		toSerialize["max_validation_steps"] = o.MaxValidationSteps
	}
	if !IsNil(o.DataConfig) {
		toSerialize["data_config"] = o.DataConfig
	}
	if !IsNil(o.OptimizerConfig) {
		toSerialize["optimizer_config"] = o.OptimizerConfig
	}
	if !IsNil(o.EfficiencyConfig) {
		toSerialize["efficiency_config"] = o.EfficiencyConfig
	}
	if !IsNil(o.Dtype) {
		toSerialize["dtype"] = o.Dtype
	}
	return toSerialize, nil
}

func (o *TrainingConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"n_epochs",
		"max_steps_per_epoch",
		"gradient_accumulation_steps",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrainingConfig := _TrainingConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrainingConfig)

	if err != nil {
		return err
	}

	*o = TrainingConfig(varTrainingConfig)

	return err
}

type NullableTrainingConfig struct {
	value *TrainingConfig
	isSet bool
}

func (v NullableTrainingConfig) Get() *TrainingConfig {
	return v.value
}

func (v *NullableTrainingConfig) Set(val *TrainingConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTrainingConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTrainingConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrainingConfig(val *TrainingConfig) *NullableTrainingConfig {
	return &NullableTrainingConfig{value: val, isSet: true}
}

func (v NullableTrainingConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrainingConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


