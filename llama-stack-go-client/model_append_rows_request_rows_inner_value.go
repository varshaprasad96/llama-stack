/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AppendRowsRequestRowsInnerValue - struct for AppendRowsRequestRowsInnerValue
type AppendRowsRequestRowsInnerValue struct {
	ArrayOfAny *[]interface{}
	Bool *bool
	Float32 *float32
	MapmapOfStringAny *map[string]interface{}
	String *string
}

// []interface{}AsAppendRowsRequestRowsInnerValue is a convenience function that returns []interface{} wrapped in AppendRowsRequestRowsInnerValue
func ArrayOfAnyAsAppendRowsRequestRowsInnerValue(v *[]interface{}) AppendRowsRequestRowsInnerValue {
	return AppendRowsRequestRowsInnerValue{
		ArrayOfAny: v,
	}
}

// boolAsAppendRowsRequestRowsInnerValue is a convenience function that returns bool wrapped in AppendRowsRequestRowsInnerValue
func BoolAsAppendRowsRequestRowsInnerValue(v *bool) AppendRowsRequestRowsInnerValue {
	return AppendRowsRequestRowsInnerValue{
		Bool: v,
	}
}

// float32AsAppendRowsRequestRowsInnerValue is a convenience function that returns float32 wrapped in AppendRowsRequestRowsInnerValue
func Float32AsAppendRowsRequestRowsInnerValue(v *float32) AppendRowsRequestRowsInnerValue {
	return AppendRowsRequestRowsInnerValue{
		Float32: v,
	}
}

// map[string]interface{}AsAppendRowsRequestRowsInnerValue is a convenience function that returns map[string]interface{} wrapped in AppendRowsRequestRowsInnerValue
func MapmapOfStringAnyAsAppendRowsRequestRowsInnerValue(v *map[string]interface{}) AppendRowsRequestRowsInnerValue {
	return AppendRowsRequestRowsInnerValue{
		MapmapOfStringAny: v,
	}
}

// stringAsAppendRowsRequestRowsInnerValue is a convenience function that returns string wrapped in AppendRowsRequestRowsInnerValue
func StringAsAppendRowsRequestRowsInnerValue(v *string) AppendRowsRequestRowsInnerValue {
	return AppendRowsRequestRowsInnerValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppendRowsRequestRowsInnerValue) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into ArrayOfAny
	err = newStrictDecoder(data).Decode(&dst.ArrayOfAny)
	if err == nil {
		jsonArrayOfAny, _ := json.Marshal(dst.ArrayOfAny)
		if string(jsonArrayOfAny) == "{}" { // empty struct
			dst.ArrayOfAny = nil
		} else {
			if err = validator.Validate(dst.ArrayOfAny); err != nil {
				dst.ArrayOfAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfAny = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			if err = validator.Validate(dst.Bool); err != nil {
				dst.Bool = nil
			} else {
				match++
			}
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			if err = validator.Validate(dst.Float32); err != nil {
				dst.Float32 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringAny); err != nil {
				dst.MapmapOfStringAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfAny = nil
		dst.Bool = nil
		dst.Float32 = nil
		dst.MapmapOfStringAny = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AppendRowsRequestRowsInnerValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AppendRowsRequestRowsInnerValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppendRowsRequestRowsInnerValue) MarshalJSON() ([]byte, error) {
	if src.ArrayOfAny != nil {
		return json.Marshal(&src.ArrayOfAny)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppendRowsRequestRowsInnerValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfAny != nil {
		return obj.ArrayOfAny
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AppendRowsRequestRowsInnerValue) GetActualInstanceValue() (interface{}) {
	if obj.ArrayOfAny != nil {
		return *obj.ArrayOfAny
	}

	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Float32 != nil {
		return *obj.Float32
	}

	if obj.MapmapOfStringAny != nil {
		return *obj.MapmapOfStringAny
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableAppendRowsRequestRowsInnerValue struct {
	value *AppendRowsRequestRowsInnerValue
	isSet bool
}

func (v NullableAppendRowsRequestRowsInnerValue) Get() *AppendRowsRequestRowsInnerValue {
	return v.value
}

func (v *NullableAppendRowsRequestRowsInnerValue) Set(val *AppendRowsRequestRowsInnerValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAppendRowsRequestRowsInnerValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAppendRowsRequestRowsInnerValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppendRowsRequestRowsInnerValue(val *AppendRowsRequestRowsInnerValue) *NullableAppendRowsRequestRowsInnerValue {
	return &NullableAppendRowsRequestRowsInnerValue{value: val, isSet: true}
}

func (v NullableAppendRowsRequestRowsInnerValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppendRowsRequestRowsInnerValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


