/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DataSource - struct for DataSource
type DataSource struct {
	RowsDataSource *RowsDataSource
	URIDataSource *URIDataSource
}

// RowsDataSourceAsDataSource is a convenience function that returns RowsDataSource wrapped in DataSource
func RowsDataSourceAsDataSource(v *RowsDataSource) DataSource {
	return DataSource{
		RowsDataSource: v,
	}
}

// URIDataSourceAsDataSource is a convenience function that returns URIDataSource wrapped in DataSource
func URIDataSourceAsDataSource(v *URIDataSource) DataSource {
	return DataSource{
		URIDataSource: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DataSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RowsDataSource
	err = newStrictDecoder(data).Decode(&dst.RowsDataSource)
	if err == nil {
		jsonRowsDataSource, _ := json.Marshal(dst.RowsDataSource)
		if string(jsonRowsDataSource) == "{}" { // empty struct
			dst.RowsDataSource = nil
		} else {
			if err = validator.Validate(dst.RowsDataSource); err != nil {
				dst.RowsDataSource = nil
			} else {
				match++
			}
		}
	} else {
		dst.RowsDataSource = nil
	}

	// try to unmarshal data into URIDataSource
	err = newStrictDecoder(data).Decode(&dst.URIDataSource)
	if err == nil {
		jsonURIDataSource, _ := json.Marshal(dst.URIDataSource)
		if string(jsonURIDataSource) == "{}" { // empty struct
			dst.URIDataSource = nil
		} else {
			if err = validator.Validate(dst.URIDataSource); err != nil {
				dst.URIDataSource = nil
			} else {
				match++
			}
		}
	} else {
		dst.URIDataSource = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RowsDataSource = nil
		dst.URIDataSource = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DataSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DataSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DataSource) MarshalJSON() ([]byte, error) {
	if src.RowsDataSource != nil {
		return json.Marshal(&src.RowsDataSource)
	}

	if src.URIDataSource != nil {
		return json.Marshal(&src.URIDataSource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DataSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RowsDataSource != nil {
		return obj.RowsDataSource
	}

	if obj.URIDataSource != nil {
		return obj.URIDataSource
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DataSource) GetActualInstanceValue() (interface{}) {
	if obj.RowsDataSource != nil {
		return *obj.RowsDataSource
	}

	if obj.URIDataSource != nil {
		return *obj.URIDataSource
	}

	// all schemas are nil
	return nil
}

type NullableDataSource struct {
	value *DataSource
	isSet bool
}

func (v NullableDataSource) Get() *DataSource {
	return v.value
}

func (v *NullableDataSource) Set(val *DataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSource(val *DataSource) *NullableDataSource {
	return &NullableDataSource{value: val, isSet: true}
}

func (v NullableDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


