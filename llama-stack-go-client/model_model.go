/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Model type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Model{}

// Model struct for Model
type Model struct {
	Identifier string `json:"identifier"`
	ProviderResourceId string `json:"provider_resource_id"`
	ProviderId string `json:"provider_id"`
	Type string `json:"type"`
	Metadata map[string]AppendRowsRequestRowsInnerValue `json:"metadata"`
	ModelType ModelType `json:"model_type"`
}

type _Model Model

// NewModel instantiates a new Model object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModel(identifier string, providerResourceId string, providerId string, type_ string, metadata map[string]AppendRowsRequestRowsInnerValue, modelType ModelType) *Model {
	this := Model{}
	this.Identifier = identifier
	this.ProviderResourceId = providerResourceId
	this.ProviderId = providerId
	this.Type = type_
	this.Metadata = metadata
	this.ModelType = modelType
	return &this
}

// NewModelWithDefaults instantiates a new Model object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelWithDefaults() *Model {
	this := Model{}
	var type_ string = "model"
	this.Type = type_
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *Model) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *Model) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *Model) SetIdentifier(v string) {
	o.Identifier = v
}

// GetProviderResourceId returns the ProviderResourceId field value
func (o *Model) GetProviderResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderResourceId
}

// GetProviderResourceIdOk returns a tuple with the ProviderResourceId field value
// and a boolean to check if the value has been set.
func (o *Model) GetProviderResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderResourceId, true
}

// SetProviderResourceId sets field value
func (o *Model) SetProviderResourceId(v string) {
	o.ProviderResourceId = v
}

// GetProviderId returns the ProviderId field value
func (o *Model) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *Model) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *Model) SetProviderId(v string) {
	o.ProviderId = v
}

// GetType returns the Type field value
func (o *Model) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Model) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Model) SetType(v string) {
	o.Type = v
}

// GetMetadata returns the Metadata field value
func (o *Model) GetMetadata() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *Model) GetMetadataOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *Model) SetMetadata(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Metadata = v
}

// GetModelType returns the ModelType field value
func (o *Model) GetModelType() ModelType {
	if o == nil {
		var ret ModelType
		return ret
	}

	return o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value
// and a boolean to check if the value has been set.
func (o *Model) GetModelTypeOk() (*ModelType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModelType, true
}

// SetModelType sets field value
func (o *Model) SetModelType(v ModelType) {
	o.ModelType = v
}

func (o Model) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Model) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["provider_resource_id"] = o.ProviderResourceId
	toSerialize["provider_id"] = o.ProviderId
	toSerialize["type"] = o.Type
	toSerialize["metadata"] = o.Metadata
	toSerialize["model_type"] = o.ModelType
	return toSerialize, nil
}

func (o *Model) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"provider_resource_id",
		"provider_id",
		"type",
		"metadata",
		"model_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModel := _Model{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModel)

	if err != nil {
		return err
	}

	*o = Model(varModel)

	return err
}

type NullableModel struct {
	value *Model
	isSet bool
}

func (v NullableModel) Get() *Model {
	return v.value
}

func (v *NullableModel) Set(val *Model) {
	v.value = val
	v.isSet = true
}

func (v NullableModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModel(val *Model) *NullableModel {
	return &NullableModel{value: val, isSet: true}
}

func (v NullableModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


