/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunEvalRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunEvalRequest{}

// RunEvalRequest struct for RunEvalRequest
type RunEvalRequest struct {
	// The configuration for the benchmark.
	BenchmarkConfig BenchmarkConfig `json:"benchmark_config"`
}

type _RunEvalRequest RunEvalRequest

// NewRunEvalRequest instantiates a new RunEvalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunEvalRequest(benchmarkConfig BenchmarkConfig) *RunEvalRequest {
	this := RunEvalRequest{}
	this.BenchmarkConfig = benchmarkConfig
	return &this
}

// NewRunEvalRequestWithDefaults instantiates a new RunEvalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunEvalRequestWithDefaults() *RunEvalRequest {
	this := RunEvalRequest{}
	return &this
}

// GetBenchmarkConfig returns the BenchmarkConfig field value
func (o *RunEvalRequest) GetBenchmarkConfig() BenchmarkConfig {
	if o == nil {
		var ret BenchmarkConfig
		return ret
	}

	return o.BenchmarkConfig
}

// GetBenchmarkConfigOk returns a tuple with the BenchmarkConfig field value
// and a boolean to check if the value has been set.
func (o *RunEvalRequest) GetBenchmarkConfigOk() (*BenchmarkConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BenchmarkConfig, true
}

// SetBenchmarkConfig sets field value
func (o *RunEvalRequest) SetBenchmarkConfig(v BenchmarkConfig) {
	o.BenchmarkConfig = v
}

func (o RunEvalRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunEvalRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["benchmark_config"] = o.BenchmarkConfig
	return toSerialize, nil
}

func (o *RunEvalRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"benchmark_config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunEvalRequest := _RunEvalRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunEvalRequest)

	if err != nil {
		return err
	}

	*o = RunEvalRequest(varRunEvalRequest)

	return err
}

type NullableRunEvalRequest struct {
	value *RunEvalRequest
	isSet bool
}

func (v NullableRunEvalRequest) Get() *RunEvalRequest {
	return v.value
}

func (v *NullableRunEvalRequest) Set(val *RunEvalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRunEvalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRunEvalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunEvalRequest(val *RunEvalRequest) *NullableRunEvalRequest {
	return &NullableRunEvalRequest{value: val, isSet: true}
}

func (v NullableRunEvalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunEvalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


