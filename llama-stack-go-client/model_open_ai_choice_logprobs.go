/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OpenAIChoiceLogprobs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenAIChoiceLogprobs{}

// OpenAIChoiceLogprobs The log probabilities for the tokens in the message from an OpenAI-compatible chat completion response.
type OpenAIChoiceLogprobs struct {
	// (Optional) The log probabilities for the tokens in the message
	Content []OpenAITokenLogProb `json:"content,omitempty"`
	// (Optional) The log probabilities for the tokens in the message
	Refusal []OpenAITokenLogProb `json:"refusal,omitempty"`
}

// NewOpenAIChoiceLogprobs instantiates a new OpenAIChoiceLogprobs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAIChoiceLogprobs() *OpenAIChoiceLogprobs {
	this := OpenAIChoiceLogprobs{}
	return &this
}

// NewOpenAIChoiceLogprobsWithDefaults instantiates a new OpenAIChoiceLogprobs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAIChoiceLogprobsWithDefaults() *OpenAIChoiceLogprobs {
	this := OpenAIChoiceLogprobs{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *OpenAIChoiceLogprobs) GetContent() []OpenAITokenLogProb {
	if o == nil || IsNil(o.Content) {
		var ret []OpenAITokenLogProb
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIChoiceLogprobs) GetContentOk() ([]OpenAITokenLogProb, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *OpenAIChoiceLogprobs) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given []OpenAITokenLogProb and assigns it to the Content field.
func (o *OpenAIChoiceLogprobs) SetContent(v []OpenAITokenLogProb) {
	o.Content = v
}

// GetRefusal returns the Refusal field value if set, zero value otherwise.
func (o *OpenAIChoiceLogprobs) GetRefusal() []OpenAITokenLogProb {
	if o == nil || IsNil(o.Refusal) {
		var ret []OpenAITokenLogProb
		return ret
	}
	return o.Refusal
}

// GetRefusalOk returns a tuple with the Refusal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenAIChoiceLogprobs) GetRefusalOk() ([]OpenAITokenLogProb, bool) {
	if o == nil || IsNil(o.Refusal) {
		return nil, false
	}
	return o.Refusal, true
}

// HasRefusal returns a boolean if a field has been set.
func (o *OpenAIChoiceLogprobs) HasRefusal() bool {
	if o != nil && !IsNil(o.Refusal) {
		return true
	}

	return false
}

// SetRefusal gets a reference to the given []OpenAITokenLogProb and assigns it to the Refusal field.
func (o *OpenAIChoiceLogprobs) SetRefusal(v []OpenAITokenLogProb) {
	o.Refusal = v
}

func (o OpenAIChoiceLogprobs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenAIChoiceLogprobs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Refusal) {
		toSerialize["refusal"] = o.Refusal
	}
	return toSerialize, nil
}

type NullableOpenAIChoiceLogprobs struct {
	value *OpenAIChoiceLogprobs
	isSet bool
}

func (v NullableOpenAIChoiceLogprobs) Get() *OpenAIChoiceLogprobs {
	return v.value
}

func (v *NullableOpenAIChoiceLogprobs) Set(val *OpenAIChoiceLogprobs) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIChoiceLogprobs) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIChoiceLogprobs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIChoiceLogprobs(val *OpenAIChoiceLogprobs) *NullableOpenAIChoiceLogprobs {
	return &NullableOpenAIChoiceLogprobs{value: val, isSet: true}
}

func (v NullableOpenAIChoiceLogprobs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIChoiceLogprobs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


