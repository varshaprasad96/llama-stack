/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PaginatedResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedResponse{}

// PaginatedResponse A generic paginated response that follows a simple format.
type PaginatedResponse struct {
	// The list of items for the current page
	Data []map[string]AppendRowsRequestRowsInnerValue `json:"data"`
	// Whether there are more items available after this set
	HasMore bool `json:"has_more"`
}

type _PaginatedResponse PaginatedResponse

// NewPaginatedResponse instantiates a new PaginatedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedResponse(data []map[string]AppendRowsRequestRowsInnerValue, hasMore bool) *PaginatedResponse {
	this := PaginatedResponse{}
	this.Data = data
	this.HasMore = hasMore
	return &this
}

// NewPaginatedResponseWithDefaults instantiates a new PaginatedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedResponseWithDefaults() *PaginatedResponse {
	this := PaginatedResponse{}
	return &this
}

// GetData returns the Data field value
func (o *PaginatedResponse) GetData() []map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret []map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PaginatedResponse) GetDataOk() ([]map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *PaginatedResponse) SetData(v []map[string]AppendRowsRequestRowsInnerValue) {
	o.Data = v
}

// GetHasMore returns the HasMore field value
func (o *PaginatedResponse) GetHasMore() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value
// and a boolean to check if the value has been set.
func (o *PaginatedResponse) GetHasMoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasMore, true
}

// SetHasMore sets field value
func (o *PaginatedResponse) SetHasMore(v bool) {
	o.HasMore = v
}

func (o PaginatedResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["has_more"] = o.HasMore
	return toSerialize, nil
}

func (o *PaginatedResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"has_more",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginatedResponse := _PaginatedResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaginatedResponse)

	if err != nil {
		return err
	}

	*o = PaginatedResponse(varPaginatedResponse)

	return err
}

type NullablePaginatedResponse struct {
	value *PaginatedResponse
	isSet bool
}

func (v NullablePaginatedResponse) Get() *PaginatedResponse {
	return v.value
}

func (v *NullablePaginatedResponse) Set(val *PaginatedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedResponse(val *PaginatedResponse) *NullablePaginatedResponse {
	return &NullablePaginatedResponse{value: val, isSet: true}
}

func (v NullablePaginatedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


