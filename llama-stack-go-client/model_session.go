/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Session type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Session{}

// Session A single session of an interaction with an Agentic System.
type Session struct {
	SessionId string `json:"session_id"`
	SessionName string `json:"session_name"`
	Turns []Turn `json:"turns"`
	StartedAt time.Time `json:"started_at"`
}

type _Session Session

// NewSession instantiates a new Session object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSession(sessionId string, sessionName string, turns []Turn, startedAt time.Time) *Session {
	this := Session{}
	this.SessionId = sessionId
	this.SessionName = sessionName
	this.Turns = turns
	this.StartedAt = startedAt
	return &this
}

// NewSessionWithDefaults instantiates a new Session object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionWithDefaults() *Session {
	this := Session{}
	return &this
}

// GetSessionId returns the SessionId field value
func (o *Session) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *Session) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *Session) SetSessionId(v string) {
	o.SessionId = v
}

// GetSessionName returns the SessionName field value
func (o *Session) GetSessionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionName
}

// GetSessionNameOk returns a tuple with the SessionName field value
// and a boolean to check if the value has been set.
func (o *Session) GetSessionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SessionName, true
}

// SetSessionName sets field value
func (o *Session) SetSessionName(v string) {
	o.SessionName = v
}

// GetTurns returns the Turns field value
func (o *Session) GetTurns() []Turn {
	if o == nil {
		var ret []Turn
		return ret
	}

	return o.Turns
}

// GetTurnsOk returns a tuple with the Turns field value
// and a boolean to check if the value has been set.
func (o *Session) GetTurnsOk() ([]Turn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Turns, true
}

// SetTurns sets field value
func (o *Session) SetTurns(v []Turn) {
	o.Turns = v
}

// GetStartedAt returns the StartedAt field value
func (o *Session) GetStartedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value
// and a boolean to check if the value has been set.
func (o *Session) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedAt, true
}

// SetStartedAt sets field value
func (o *Session) SetStartedAt(v time.Time) {
	o.StartedAt = v
}

func (o Session) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Session) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["session_id"] = o.SessionId
	toSerialize["session_name"] = o.SessionName
	toSerialize["turns"] = o.Turns
	toSerialize["started_at"] = o.StartedAt
	return toSerialize, nil
}

func (o *Session) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"session_id",
		"session_name",
		"turns",
		"started_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSession := _Session{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSession)

	if err != nil {
		return err
	}

	*o = Session(varSession)

	return err
}

type NullableSession struct {
	value *Session
	isSet bool
}

func (v NullableSession) Get() *Session {
	return v.value
}

func (v *NullableSession) Set(val *Session) {
	v.value = val
	v.isSet = true
}

func (v NullableSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSession(val *Session) *NullableSession {
	return &NullableSession{value: val, isSet: true}
}

func (v NullableSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


