/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegexParserScoringFnParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegexParserScoringFnParams{}

// RegexParserScoringFnParams struct for RegexParserScoringFnParams
type RegexParserScoringFnParams struct {
	Type string `json:"type"`
	ParsingRegexes []string `json:"parsing_regexes,omitempty"`
	AggregationFunctions []AggregationFunctionType `json:"aggregation_functions,omitempty"`
}

type _RegexParserScoringFnParams RegexParserScoringFnParams

// NewRegexParserScoringFnParams instantiates a new RegexParserScoringFnParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegexParserScoringFnParams(type_ string) *RegexParserScoringFnParams {
	this := RegexParserScoringFnParams{}
	this.Type = type_
	return &this
}

// NewRegexParserScoringFnParamsWithDefaults instantiates a new RegexParserScoringFnParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegexParserScoringFnParamsWithDefaults() *RegexParserScoringFnParams {
	this := RegexParserScoringFnParams{}
	var type_ string = "regex_parser"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *RegexParserScoringFnParams) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RegexParserScoringFnParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RegexParserScoringFnParams) SetType(v string) {
	o.Type = v
}

// GetParsingRegexes returns the ParsingRegexes field value if set, zero value otherwise.
func (o *RegexParserScoringFnParams) GetParsingRegexes() []string {
	if o == nil || IsNil(o.ParsingRegexes) {
		var ret []string
		return ret
	}
	return o.ParsingRegexes
}

// GetParsingRegexesOk returns a tuple with the ParsingRegexes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegexParserScoringFnParams) GetParsingRegexesOk() ([]string, bool) {
	if o == nil || IsNil(o.ParsingRegexes) {
		return nil, false
	}
	return o.ParsingRegexes, true
}

// HasParsingRegexes returns a boolean if a field has been set.
func (o *RegexParserScoringFnParams) HasParsingRegexes() bool {
	if o != nil && !IsNil(o.ParsingRegexes) {
		return true
	}

	return false
}

// SetParsingRegexes gets a reference to the given []string and assigns it to the ParsingRegexes field.
func (o *RegexParserScoringFnParams) SetParsingRegexes(v []string) {
	o.ParsingRegexes = v
}

// GetAggregationFunctions returns the AggregationFunctions field value if set, zero value otherwise.
func (o *RegexParserScoringFnParams) GetAggregationFunctions() []AggregationFunctionType {
	if o == nil || IsNil(o.AggregationFunctions) {
		var ret []AggregationFunctionType
		return ret
	}
	return o.AggregationFunctions
}

// GetAggregationFunctionsOk returns a tuple with the AggregationFunctions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegexParserScoringFnParams) GetAggregationFunctionsOk() ([]AggregationFunctionType, bool) {
	if o == nil || IsNil(o.AggregationFunctions) {
		return nil, false
	}
	return o.AggregationFunctions, true
}

// HasAggregationFunctions returns a boolean if a field has been set.
func (o *RegexParserScoringFnParams) HasAggregationFunctions() bool {
	if o != nil && !IsNil(o.AggregationFunctions) {
		return true
	}

	return false
}

// SetAggregationFunctions gets a reference to the given []AggregationFunctionType and assigns it to the AggregationFunctions field.
func (o *RegexParserScoringFnParams) SetAggregationFunctions(v []AggregationFunctionType) {
	o.AggregationFunctions = v
}

func (o RegexParserScoringFnParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegexParserScoringFnParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.ParsingRegexes) {
		toSerialize["parsing_regexes"] = o.ParsingRegexes
	}
	if !IsNil(o.AggregationFunctions) {
		toSerialize["aggregation_functions"] = o.AggregationFunctions
	}
	return toSerialize, nil
}

func (o *RegexParserScoringFnParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegexParserScoringFnParams := _RegexParserScoringFnParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegexParserScoringFnParams)

	if err != nil {
		return err
	}

	*o = RegexParserScoringFnParams(varRegexParserScoringFnParams)

	return err
}

type NullableRegexParserScoringFnParams struct {
	value *RegexParserScoringFnParams
	isSet bool
}

func (v NullableRegexParserScoringFnParams) Get() *RegexParserScoringFnParams {
	return v.value
}

func (v *NullableRegexParserScoringFnParams) Set(val *RegexParserScoringFnParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRegexParserScoringFnParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRegexParserScoringFnParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegexParserScoringFnParams(val *RegexParserScoringFnParams) *NullableRegexParserScoringFnParams {
	return &NullableRegexParserScoringFnParams{value: val, isSet: true}
}

func (v NullableRegexParserScoringFnParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegexParserScoringFnParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


