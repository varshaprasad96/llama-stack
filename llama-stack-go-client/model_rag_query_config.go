/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RAGQueryConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RAGQueryConfig{}

// RAGQueryConfig struct for RAGQueryConfig
type RAGQueryConfig struct {
	QueryGeneratorConfig RAGQueryGeneratorConfig `json:"query_generator_config"`
	MaxTokensInContext int32 `json:"max_tokens_in_context"`
	MaxChunks int32 `json:"max_chunks"`
}

type _RAGQueryConfig RAGQueryConfig

// NewRAGQueryConfig instantiates a new RAGQueryConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRAGQueryConfig(queryGeneratorConfig RAGQueryGeneratorConfig, maxTokensInContext int32, maxChunks int32) *RAGQueryConfig {
	this := RAGQueryConfig{}
	this.QueryGeneratorConfig = queryGeneratorConfig
	this.MaxTokensInContext = maxTokensInContext
	this.MaxChunks = maxChunks
	return &this
}

// NewRAGQueryConfigWithDefaults instantiates a new RAGQueryConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRAGQueryConfigWithDefaults() *RAGQueryConfig {
	this := RAGQueryConfig{}
	var maxTokensInContext int32 = 4096
	this.MaxTokensInContext = maxTokensInContext
	var maxChunks int32 = 5
	this.MaxChunks = maxChunks
	return &this
}

// GetQueryGeneratorConfig returns the QueryGeneratorConfig field value
func (o *RAGQueryConfig) GetQueryGeneratorConfig() RAGQueryGeneratorConfig {
	if o == nil {
		var ret RAGQueryGeneratorConfig
		return ret
	}

	return o.QueryGeneratorConfig
}

// GetQueryGeneratorConfigOk returns a tuple with the QueryGeneratorConfig field value
// and a boolean to check if the value has been set.
func (o *RAGQueryConfig) GetQueryGeneratorConfigOk() (*RAGQueryGeneratorConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryGeneratorConfig, true
}

// SetQueryGeneratorConfig sets field value
func (o *RAGQueryConfig) SetQueryGeneratorConfig(v RAGQueryGeneratorConfig) {
	o.QueryGeneratorConfig = v
}

// GetMaxTokensInContext returns the MaxTokensInContext field value
func (o *RAGQueryConfig) GetMaxTokensInContext() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxTokensInContext
}

// GetMaxTokensInContextOk returns a tuple with the MaxTokensInContext field value
// and a boolean to check if the value has been set.
func (o *RAGQueryConfig) GetMaxTokensInContextOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxTokensInContext, true
}

// SetMaxTokensInContext sets field value
func (o *RAGQueryConfig) SetMaxTokensInContext(v int32) {
	o.MaxTokensInContext = v
}

// GetMaxChunks returns the MaxChunks field value
func (o *RAGQueryConfig) GetMaxChunks() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxChunks
}

// GetMaxChunksOk returns a tuple with the MaxChunks field value
// and a boolean to check if the value has been set.
func (o *RAGQueryConfig) GetMaxChunksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxChunks, true
}

// SetMaxChunks sets field value
func (o *RAGQueryConfig) SetMaxChunks(v int32) {
	o.MaxChunks = v
}

func (o RAGQueryConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RAGQueryConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query_generator_config"] = o.QueryGeneratorConfig
	toSerialize["max_tokens_in_context"] = o.MaxTokensInContext
	toSerialize["max_chunks"] = o.MaxChunks
	return toSerialize, nil
}

func (o *RAGQueryConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query_generator_config",
		"max_tokens_in_context",
		"max_chunks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRAGQueryConfig := _RAGQueryConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRAGQueryConfig)

	if err != nil {
		return err
	}

	*o = RAGQueryConfig(varRAGQueryConfig)

	return err
}

type NullableRAGQueryConfig struct {
	value *RAGQueryConfig
	isSet bool
}

func (v NullableRAGQueryConfig) Get() *RAGQueryConfig {
	return v.value
}

func (v *NullableRAGQueryConfig) Set(val *RAGQueryConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRAGQueryConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRAGQueryConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRAGQueryConfig(val *RAGQueryConfig) *NullableRAGQueryConfig {
	return &NullableRAGQueryConfig{value: val, isSet: true}
}

func (v NullableRAGQueryConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRAGQueryConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


