/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScoreBatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScoreBatchRequest{}

// ScoreBatchRequest struct for ScoreBatchRequest
type ScoreBatchRequest struct {
	DatasetId string `json:"dataset_id"`
	ScoringFunctions map[string]ScoreRequestScoringFunctionsValue `json:"scoring_functions"`
	SaveResultsDataset bool `json:"save_results_dataset"`
}

type _ScoreBatchRequest ScoreBatchRequest

// NewScoreBatchRequest instantiates a new ScoreBatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScoreBatchRequest(datasetId string, scoringFunctions map[string]ScoreRequestScoringFunctionsValue, saveResultsDataset bool) *ScoreBatchRequest {
	this := ScoreBatchRequest{}
	this.DatasetId = datasetId
	this.ScoringFunctions = scoringFunctions
	this.SaveResultsDataset = saveResultsDataset
	return &this
}

// NewScoreBatchRequestWithDefaults instantiates a new ScoreBatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoreBatchRequestWithDefaults() *ScoreBatchRequest {
	this := ScoreBatchRequest{}
	return &this
}

// GetDatasetId returns the DatasetId field value
func (o *ScoreBatchRequest) GetDatasetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field value
// and a boolean to check if the value has been set.
func (o *ScoreBatchRequest) GetDatasetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatasetId, true
}

// SetDatasetId sets field value
func (o *ScoreBatchRequest) SetDatasetId(v string) {
	o.DatasetId = v
}

// GetScoringFunctions returns the ScoringFunctions field value
func (o *ScoreBatchRequest) GetScoringFunctions() map[string]ScoreRequestScoringFunctionsValue {
	if o == nil {
		var ret map[string]ScoreRequestScoringFunctionsValue
		return ret
	}

	return o.ScoringFunctions
}

// GetScoringFunctionsOk returns a tuple with the ScoringFunctions field value
// and a boolean to check if the value has been set.
func (o *ScoreBatchRequest) GetScoringFunctionsOk() (map[string]ScoreRequestScoringFunctionsValue, bool) {
	if o == nil {
		return map[string]ScoreRequestScoringFunctionsValue{}, false
	}
	return o.ScoringFunctions, true
}

// SetScoringFunctions sets field value
func (o *ScoreBatchRequest) SetScoringFunctions(v map[string]ScoreRequestScoringFunctionsValue) {
	o.ScoringFunctions = v
}

// GetSaveResultsDataset returns the SaveResultsDataset field value
func (o *ScoreBatchRequest) GetSaveResultsDataset() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SaveResultsDataset
}

// GetSaveResultsDatasetOk returns a tuple with the SaveResultsDataset field value
// and a boolean to check if the value has been set.
func (o *ScoreBatchRequest) GetSaveResultsDatasetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SaveResultsDataset, true
}

// SetSaveResultsDataset sets field value
func (o *ScoreBatchRequest) SetSaveResultsDataset(v bool) {
	o.SaveResultsDataset = v
}

func (o ScoreBatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScoreBatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dataset_id"] = o.DatasetId
	toSerialize["scoring_functions"] = o.ScoringFunctions
	toSerialize["save_results_dataset"] = o.SaveResultsDataset
	return toSerialize, nil
}

func (o *ScoreBatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dataset_id",
		"scoring_functions",
		"save_results_dataset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScoreBatchRequest := _ScoreBatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScoreBatchRequest)

	if err != nil {
		return err
	}

	*o = ScoreBatchRequest(varScoreBatchRequest)

	return err
}

type NullableScoreBatchRequest struct {
	value *ScoreBatchRequest
	isSet bool
}

func (v NullableScoreBatchRequest) Get() *ScoreBatchRequest {
	return v.value
}

func (v *NullableScoreBatchRequest) Set(val *ScoreBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableScoreBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableScoreBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoreBatchRequest(val *ScoreBatchRequest) *NullableScoreBatchRequest {
	return &NullableScoreBatchRequest{value: val, isSet: true}
}

func (v NullableScoreBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoreBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


