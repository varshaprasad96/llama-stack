/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ParamType - struct for ParamType
type ParamType struct {
	AgentTurnInputType *AgentTurnInputType
	ArrayType *ArrayType
	BooleanType *BooleanType
	ChatCompletionInputType *ChatCompletionInputType
	CompletionInputType *CompletionInputType
	JsonType *JsonType
	NumberType *NumberType
	ObjectType *ObjectType
	StringType *StringType
	UnionType *UnionType
}

// AgentTurnInputTypeAsParamType is a convenience function that returns AgentTurnInputType wrapped in ParamType
func AgentTurnInputTypeAsParamType(v *AgentTurnInputType) ParamType {
	return ParamType{
		AgentTurnInputType: v,
	}
}

// ArrayTypeAsParamType is a convenience function that returns ArrayType wrapped in ParamType
func ArrayTypeAsParamType(v *ArrayType) ParamType {
	return ParamType{
		ArrayType: v,
	}
}

// BooleanTypeAsParamType is a convenience function that returns BooleanType wrapped in ParamType
func BooleanTypeAsParamType(v *BooleanType) ParamType {
	return ParamType{
		BooleanType: v,
	}
}

// ChatCompletionInputTypeAsParamType is a convenience function that returns ChatCompletionInputType wrapped in ParamType
func ChatCompletionInputTypeAsParamType(v *ChatCompletionInputType) ParamType {
	return ParamType{
		ChatCompletionInputType: v,
	}
}

// CompletionInputTypeAsParamType is a convenience function that returns CompletionInputType wrapped in ParamType
func CompletionInputTypeAsParamType(v *CompletionInputType) ParamType {
	return ParamType{
		CompletionInputType: v,
	}
}

// JsonTypeAsParamType is a convenience function that returns JsonType wrapped in ParamType
func JsonTypeAsParamType(v *JsonType) ParamType {
	return ParamType{
		JsonType: v,
	}
}

// NumberTypeAsParamType is a convenience function that returns NumberType wrapped in ParamType
func NumberTypeAsParamType(v *NumberType) ParamType {
	return ParamType{
		NumberType: v,
	}
}

// ObjectTypeAsParamType is a convenience function that returns ObjectType wrapped in ParamType
func ObjectTypeAsParamType(v *ObjectType) ParamType {
	return ParamType{
		ObjectType: v,
	}
}

// StringTypeAsParamType is a convenience function that returns StringType wrapped in ParamType
func StringTypeAsParamType(v *StringType) ParamType {
	return ParamType{
		StringType: v,
	}
}

// UnionTypeAsParamType is a convenience function that returns UnionType wrapped in ParamType
func UnionTypeAsParamType(v *UnionType) ParamType {
	return ParamType{
		UnionType: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ParamType) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AgentTurnInputType
	err = newStrictDecoder(data).Decode(&dst.AgentTurnInputType)
	if err == nil {
		jsonAgentTurnInputType, _ := json.Marshal(dst.AgentTurnInputType)
		if string(jsonAgentTurnInputType) == "{}" { // empty struct
			dst.AgentTurnInputType = nil
		} else {
			if err = validator.Validate(dst.AgentTurnInputType); err != nil {
				dst.AgentTurnInputType = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentTurnInputType = nil
	}

	// try to unmarshal data into ArrayType
	err = newStrictDecoder(data).Decode(&dst.ArrayType)
	if err == nil {
		jsonArrayType, _ := json.Marshal(dst.ArrayType)
		if string(jsonArrayType) == "{}" { // empty struct
			dst.ArrayType = nil
		} else {
			if err = validator.Validate(dst.ArrayType); err != nil {
				dst.ArrayType = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayType = nil
	}

	// try to unmarshal data into BooleanType
	err = newStrictDecoder(data).Decode(&dst.BooleanType)
	if err == nil {
		jsonBooleanType, _ := json.Marshal(dst.BooleanType)
		if string(jsonBooleanType) == "{}" { // empty struct
			dst.BooleanType = nil
		} else {
			if err = validator.Validate(dst.BooleanType); err != nil {
				dst.BooleanType = nil
			} else {
				match++
			}
		}
	} else {
		dst.BooleanType = nil
	}

	// try to unmarshal data into ChatCompletionInputType
	err = newStrictDecoder(data).Decode(&dst.ChatCompletionInputType)
	if err == nil {
		jsonChatCompletionInputType, _ := json.Marshal(dst.ChatCompletionInputType)
		if string(jsonChatCompletionInputType) == "{}" { // empty struct
			dst.ChatCompletionInputType = nil
		} else {
			if err = validator.Validate(dst.ChatCompletionInputType); err != nil {
				dst.ChatCompletionInputType = nil
			} else {
				match++
			}
		}
	} else {
		dst.ChatCompletionInputType = nil
	}

	// try to unmarshal data into CompletionInputType
	err = newStrictDecoder(data).Decode(&dst.CompletionInputType)
	if err == nil {
		jsonCompletionInputType, _ := json.Marshal(dst.CompletionInputType)
		if string(jsonCompletionInputType) == "{}" { // empty struct
			dst.CompletionInputType = nil
		} else {
			if err = validator.Validate(dst.CompletionInputType); err != nil {
				dst.CompletionInputType = nil
			} else {
				match++
			}
		}
	} else {
		dst.CompletionInputType = nil
	}

	// try to unmarshal data into JsonType
	err = newStrictDecoder(data).Decode(&dst.JsonType)
	if err == nil {
		jsonJsonType, _ := json.Marshal(dst.JsonType)
		if string(jsonJsonType) == "{}" { // empty struct
			dst.JsonType = nil
		} else {
			if err = validator.Validate(dst.JsonType); err != nil {
				dst.JsonType = nil
			} else {
				match++
			}
		}
	} else {
		dst.JsonType = nil
	}

	// try to unmarshal data into NumberType
	err = newStrictDecoder(data).Decode(&dst.NumberType)
	if err == nil {
		jsonNumberType, _ := json.Marshal(dst.NumberType)
		if string(jsonNumberType) == "{}" { // empty struct
			dst.NumberType = nil
		} else {
			if err = validator.Validate(dst.NumberType); err != nil {
				dst.NumberType = nil
			} else {
				match++
			}
		}
	} else {
		dst.NumberType = nil
	}

	// try to unmarshal data into ObjectType
	err = newStrictDecoder(data).Decode(&dst.ObjectType)
	if err == nil {
		jsonObjectType, _ := json.Marshal(dst.ObjectType)
		if string(jsonObjectType) == "{}" { // empty struct
			dst.ObjectType = nil
		} else {
			if err = validator.Validate(dst.ObjectType); err != nil {
				dst.ObjectType = nil
			} else {
				match++
			}
		}
	} else {
		dst.ObjectType = nil
	}

	// try to unmarshal data into StringType
	err = newStrictDecoder(data).Decode(&dst.StringType)
	if err == nil {
		jsonStringType, _ := json.Marshal(dst.StringType)
		if string(jsonStringType) == "{}" { // empty struct
			dst.StringType = nil
		} else {
			if err = validator.Validate(dst.StringType); err != nil {
				dst.StringType = nil
			} else {
				match++
			}
		}
	} else {
		dst.StringType = nil
	}

	// try to unmarshal data into UnionType
	err = newStrictDecoder(data).Decode(&dst.UnionType)
	if err == nil {
		jsonUnionType, _ := json.Marshal(dst.UnionType)
		if string(jsonUnionType) == "{}" { // empty struct
			dst.UnionType = nil
		} else {
			if err = validator.Validate(dst.UnionType); err != nil {
				dst.UnionType = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnionType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AgentTurnInputType = nil
		dst.ArrayType = nil
		dst.BooleanType = nil
		dst.ChatCompletionInputType = nil
		dst.CompletionInputType = nil
		dst.JsonType = nil
		dst.NumberType = nil
		dst.ObjectType = nil
		dst.StringType = nil
		dst.UnionType = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ParamType)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ParamType)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ParamType) MarshalJSON() ([]byte, error) {
	if src.AgentTurnInputType != nil {
		return json.Marshal(&src.AgentTurnInputType)
	}

	if src.ArrayType != nil {
		return json.Marshal(&src.ArrayType)
	}

	if src.BooleanType != nil {
		return json.Marshal(&src.BooleanType)
	}

	if src.ChatCompletionInputType != nil {
		return json.Marshal(&src.ChatCompletionInputType)
	}

	if src.CompletionInputType != nil {
		return json.Marshal(&src.CompletionInputType)
	}

	if src.JsonType != nil {
		return json.Marshal(&src.JsonType)
	}

	if src.NumberType != nil {
		return json.Marshal(&src.NumberType)
	}

	if src.ObjectType != nil {
		return json.Marshal(&src.ObjectType)
	}

	if src.StringType != nil {
		return json.Marshal(&src.StringType)
	}

	if src.UnionType != nil {
		return json.Marshal(&src.UnionType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ParamType) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AgentTurnInputType != nil {
		return obj.AgentTurnInputType
	}

	if obj.ArrayType != nil {
		return obj.ArrayType
	}

	if obj.BooleanType != nil {
		return obj.BooleanType
	}

	if obj.ChatCompletionInputType != nil {
		return obj.ChatCompletionInputType
	}

	if obj.CompletionInputType != nil {
		return obj.CompletionInputType
	}

	if obj.JsonType != nil {
		return obj.JsonType
	}

	if obj.NumberType != nil {
		return obj.NumberType
	}

	if obj.ObjectType != nil {
		return obj.ObjectType
	}

	if obj.StringType != nil {
		return obj.StringType
	}

	if obj.UnionType != nil {
		return obj.UnionType
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ParamType) GetActualInstanceValue() (interface{}) {
	if obj.AgentTurnInputType != nil {
		return *obj.AgentTurnInputType
	}

	if obj.ArrayType != nil {
		return *obj.ArrayType
	}

	if obj.BooleanType != nil {
		return *obj.BooleanType
	}

	if obj.ChatCompletionInputType != nil {
		return *obj.ChatCompletionInputType
	}

	if obj.CompletionInputType != nil {
		return *obj.CompletionInputType
	}

	if obj.JsonType != nil {
		return *obj.JsonType
	}

	if obj.NumberType != nil {
		return *obj.NumberType
	}

	if obj.ObjectType != nil {
		return *obj.ObjectType
	}

	if obj.StringType != nil {
		return *obj.StringType
	}

	if obj.UnionType != nil {
		return *obj.UnionType
	}

	// all schemas are nil
	return nil
}

type NullableParamType struct {
	value *ParamType
	isSet bool
}

func (v NullableParamType) Get() *ParamType {
	return v.value
}

func (v *NullableParamType) Set(val *ParamType) {
	v.value = val
	v.isSet = true
}

func (v NullableParamType) IsSet() bool {
	return v.isSet
}

func (v *NullableParamType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParamType(val *ParamType) *NullableParamType {
	return &NullableParamType{value: val, isSet: true}
}

func (v NullableParamType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParamType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


