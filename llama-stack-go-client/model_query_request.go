/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryRequest{}

// QueryRequest struct for QueryRequest
type QueryRequest struct {
	Content InterleavedContent `json:"content"`
	VectorDbIds []string `json:"vector_db_ids"`
	QueryConfig *RAGQueryConfig `json:"query_config,omitempty"`
}

type _QueryRequest QueryRequest

// NewQueryRequest instantiates a new QueryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryRequest(content InterleavedContent, vectorDbIds []string) *QueryRequest {
	this := QueryRequest{}
	this.Content = content
	this.VectorDbIds = vectorDbIds
	return &this
}

// NewQueryRequestWithDefaults instantiates a new QueryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryRequestWithDefaults() *QueryRequest {
	this := QueryRequest{}
	return &this
}

// GetContent returns the Content field value
func (o *QueryRequest) GetContent() InterleavedContent {
	if o == nil {
		var ret InterleavedContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *QueryRequest) GetContentOk() (*InterleavedContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *QueryRequest) SetContent(v InterleavedContent) {
	o.Content = v
}

// GetVectorDbIds returns the VectorDbIds field value
func (o *QueryRequest) GetVectorDbIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.VectorDbIds
}

// GetVectorDbIdsOk returns a tuple with the VectorDbIds field value
// and a boolean to check if the value has been set.
func (o *QueryRequest) GetVectorDbIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VectorDbIds, true
}

// SetVectorDbIds sets field value
func (o *QueryRequest) SetVectorDbIds(v []string) {
	o.VectorDbIds = v
}

// GetQueryConfig returns the QueryConfig field value if set, zero value otherwise.
func (o *QueryRequest) GetQueryConfig() RAGQueryConfig {
	if o == nil || IsNil(o.QueryConfig) {
		var ret RAGQueryConfig
		return ret
	}
	return *o.QueryConfig
}

// GetQueryConfigOk returns a tuple with the QueryConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryRequest) GetQueryConfigOk() (*RAGQueryConfig, bool) {
	if o == nil || IsNil(o.QueryConfig) {
		return nil, false
	}
	return o.QueryConfig, true
}

// HasQueryConfig returns a boolean if a field has been set.
func (o *QueryRequest) HasQueryConfig() bool {
	if o != nil && !IsNil(o.QueryConfig) {
		return true
	}

	return false
}

// SetQueryConfig gets a reference to the given RAGQueryConfig and assigns it to the QueryConfig field.
func (o *QueryRequest) SetQueryConfig(v RAGQueryConfig) {
	o.QueryConfig = &v
}

func (o QueryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["vector_db_ids"] = o.VectorDbIds
	if !IsNil(o.QueryConfig) {
		toSerialize["query_config"] = o.QueryConfig
	}
	return toSerialize, nil
}

func (o *QueryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"vector_db_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryRequest := _QueryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryRequest)

	if err != nil {
		return err
	}

	*o = QueryRequest(varQueryRequest)

	return err
}

type NullableQueryRequest struct {
	value *QueryRequest
	isSet bool
}

func (v NullableQueryRequest) Get() *QueryRequest {
	return v.value
}

func (v *NullableQueryRequest) Set(val *QueryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryRequest(val *QueryRequest) *NullableQueryRequest {
	return &NullableQueryRequest{value: val, isSet: true}
}

func (v NullableQueryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


