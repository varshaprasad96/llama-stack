/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Event - struct for Event
type Event struct {
	MetricEvent *MetricEvent
	StructuredLogEvent *StructuredLogEvent
	UnstructuredLogEvent *UnstructuredLogEvent
}

// MetricEventAsEvent is a convenience function that returns MetricEvent wrapped in Event
func MetricEventAsEvent(v *MetricEvent) Event {
	return Event{
		MetricEvent: v,
	}
}

// StructuredLogEventAsEvent is a convenience function that returns StructuredLogEvent wrapped in Event
func StructuredLogEventAsEvent(v *StructuredLogEvent) Event {
	return Event{
		StructuredLogEvent: v,
	}
}

// UnstructuredLogEventAsEvent is a convenience function that returns UnstructuredLogEvent wrapped in Event
func UnstructuredLogEventAsEvent(v *UnstructuredLogEvent) Event {
	return Event{
		UnstructuredLogEvent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Event) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MetricEvent
	err = newStrictDecoder(data).Decode(&dst.MetricEvent)
	if err == nil {
		jsonMetricEvent, _ := json.Marshal(dst.MetricEvent)
		if string(jsonMetricEvent) == "{}" { // empty struct
			dst.MetricEvent = nil
		} else {
			if err = validator.Validate(dst.MetricEvent); err != nil {
				dst.MetricEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.MetricEvent = nil
	}

	// try to unmarshal data into StructuredLogEvent
	err = newStrictDecoder(data).Decode(&dst.StructuredLogEvent)
	if err == nil {
		jsonStructuredLogEvent, _ := json.Marshal(dst.StructuredLogEvent)
		if string(jsonStructuredLogEvent) == "{}" { // empty struct
			dst.StructuredLogEvent = nil
		} else {
			if err = validator.Validate(dst.StructuredLogEvent); err != nil {
				dst.StructuredLogEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.StructuredLogEvent = nil
	}

	// try to unmarshal data into UnstructuredLogEvent
	err = newStrictDecoder(data).Decode(&dst.UnstructuredLogEvent)
	if err == nil {
		jsonUnstructuredLogEvent, _ := json.Marshal(dst.UnstructuredLogEvent)
		if string(jsonUnstructuredLogEvent) == "{}" { // empty struct
			dst.UnstructuredLogEvent = nil
		} else {
			if err = validator.Validate(dst.UnstructuredLogEvent); err != nil {
				dst.UnstructuredLogEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.UnstructuredLogEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MetricEvent = nil
		dst.StructuredLogEvent = nil
		dst.UnstructuredLogEvent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Event)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Event)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Event) MarshalJSON() ([]byte, error) {
	if src.MetricEvent != nil {
		return json.Marshal(&src.MetricEvent)
	}

	if src.StructuredLogEvent != nil {
		return json.Marshal(&src.StructuredLogEvent)
	}

	if src.UnstructuredLogEvent != nil {
		return json.Marshal(&src.UnstructuredLogEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Event) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MetricEvent != nil {
		return obj.MetricEvent
	}

	if obj.StructuredLogEvent != nil {
		return obj.StructuredLogEvent
	}

	if obj.UnstructuredLogEvent != nil {
		return obj.UnstructuredLogEvent
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Event) GetActualInstanceValue() (interface{}) {
	if obj.MetricEvent != nil {
		return *obj.MetricEvent
	}

	if obj.StructuredLogEvent != nil {
		return *obj.StructuredLogEvent
	}

	if obj.UnstructuredLogEvent != nil {
		return *obj.UnstructuredLogEvent
	}

	// all schemas are nil
	return nil
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


