/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AgentCreateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AgentCreateResponse{}

// AgentCreateResponse struct for AgentCreateResponse
type AgentCreateResponse struct {
	AgentId string `json:"agent_id"`
}

type _AgentCreateResponse AgentCreateResponse

// NewAgentCreateResponse instantiates a new AgentCreateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentCreateResponse(agentId string) *AgentCreateResponse {
	this := AgentCreateResponse{}
	this.AgentId = agentId
	return &this
}

// NewAgentCreateResponseWithDefaults instantiates a new AgentCreateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentCreateResponseWithDefaults() *AgentCreateResponse {
	this := AgentCreateResponse{}
	return &this
}

// GetAgentId returns the AgentId field value
func (o *AgentCreateResponse) GetAgentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgentId
}

// GetAgentIdOk returns a tuple with the AgentId field value
// and a boolean to check if the value has been set.
func (o *AgentCreateResponse) GetAgentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgentId, true
}

// SetAgentId sets field value
func (o *AgentCreateResponse) SetAgentId(v string) {
	o.AgentId = v
}

func (o AgentCreateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AgentCreateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["agent_id"] = o.AgentId
	return toSerialize, nil
}

func (o *AgentCreateResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"agent_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAgentCreateResponse := _AgentCreateResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAgentCreateResponse)

	if err != nil {
		return err
	}

	*o = AgentCreateResponse(varAgentCreateResponse)

	return err
}

type NullableAgentCreateResponse struct {
	value *AgentCreateResponse
	isSet bool
}

func (v NullableAgentCreateResponse) Get() *AgentCreateResponse {
	return v.value
}

func (v *NullableAgentCreateResponse) Set(val *AgentCreateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentCreateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentCreateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentCreateResponse(val *AgentCreateResponse) *NullableAgentCreateResponse {
	return &NullableAgentCreateResponse{value: val, isSet: true}
}

func (v NullableAgentCreateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentCreateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


