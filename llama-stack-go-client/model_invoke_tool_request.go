/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InvokeToolRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvokeToolRequest{}

// InvokeToolRequest struct for InvokeToolRequest
type InvokeToolRequest struct {
	ToolName string `json:"tool_name"`
	Kwargs map[string]AppendRowsRequestRowsInnerValue `json:"kwargs"`
}

type _InvokeToolRequest InvokeToolRequest

// NewInvokeToolRequest instantiates a new InvokeToolRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvokeToolRequest(toolName string, kwargs map[string]AppendRowsRequestRowsInnerValue) *InvokeToolRequest {
	this := InvokeToolRequest{}
	this.ToolName = toolName
	this.Kwargs = kwargs
	return &this
}

// NewInvokeToolRequestWithDefaults instantiates a new InvokeToolRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvokeToolRequestWithDefaults() *InvokeToolRequest {
	this := InvokeToolRequest{}
	return &this
}

// GetToolName returns the ToolName field value
func (o *InvokeToolRequest) GetToolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToolName
}

// GetToolNameOk returns a tuple with the ToolName field value
// and a boolean to check if the value has been set.
func (o *InvokeToolRequest) GetToolNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolName, true
}

// SetToolName sets field value
func (o *InvokeToolRequest) SetToolName(v string) {
	o.ToolName = v
}

// GetKwargs returns the Kwargs field value
func (o *InvokeToolRequest) GetKwargs() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Kwargs
}

// GetKwargsOk returns a tuple with the Kwargs field value
// and a boolean to check if the value has been set.
func (o *InvokeToolRequest) GetKwargsOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Kwargs, true
}

// SetKwargs sets field value
func (o *InvokeToolRequest) SetKwargs(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Kwargs = v
}

func (o InvokeToolRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvokeToolRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tool_name"] = o.ToolName
	toSerialize["kwargs"] = o.Kwargs
	return toSerialize, nil
}

func (o *InvokeToolRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_name",
		"kwargs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvokeToolRequest := _InvokeToolRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvokeToolRequest)

	if err != nil {
		return err
	}

	*o = InvokeToolRequest(varInvokeToolRequest)

	return err
}

type NullableInvokeToolRequest struct {
	value *InvokeToolRequest
	isSet bool
}

func (v NullableInvokeToolRequest) Get() *InvokeToolRequest {
	return v.value
}

func (v *NullableInvokeToolRequest) Set(val *InvokeToolRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInvokeToolRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInvokeToolRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvokeToolRequest(val *InvokeToolRequest) *NullableInvokeToolRequest {
	return &NullableInvokeToolRequest{value: val, isSet: true}
}

func (v NullableInvokeToolRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvokeToolRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


