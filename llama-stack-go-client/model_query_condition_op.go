/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// QueryConditionOp the model 'QueryConditionOp'
type QueryConditionOp string

// List of QueryConditionOp
const (
	EQ QueryConditionOp = "eq"
	NE QueryConditionOp = "ne"
	GT QueryConditionOp = "gt"
	LT QueryConditionOp = "lt"
)

// All allowed values of QueryConditionOp enum
var AllowedQueryConditionOpEnumValues = []QueryConditionOp{
	"eq",
	"ne",
	"gt",
	"lt",
}

func (v *QueryConditionOp) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryConditionOp(value)
	for _, existing := range AllowedQueryConditionOpEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryConditionOp", value)
}

// NewQueryConditionOpFromValue returns a pointer to a valid QueryConditionOp
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryConditionOpFromValue(v string) (*QueryConditionOp, error) {
	ev := QueryConditionOp(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryConditionOp: valid values are %v", v, AllowedQueryConditionOpEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryConditionOp) IsValid() bool {
	for _, existing := range AllowedQueryConditionOpEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryConditionOp value
func (v QueryConditionOp) Ptr() *QueryConditionOp {
	return &v
}

type NullableQueryConditionOp struct {
	value *QueryConditionOp
	isSet bool
}

func (v NullableQueryConditionOp) Get() *QueryConditionOp {
	return v.value
}

func (v *NullableQueryConditionOp) Set(val *QueryConditionOp) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryConditionOp) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryConditionOp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryConditionOp(val *QueryConditionOp) *NullableQueryConditionOp {
	return &NullableQueryConditionOp{value: val, isSet: true}
}

func (v NullableQueryConditionOp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryConditionOp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

