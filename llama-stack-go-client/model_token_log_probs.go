/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TokenLogProbs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenLogProbs{}

// TokenLogProbs Log probabilities for generated tokens.
type TokenLogProbs struct {
	// Dictionary mapping tokens to their log probabilities
	LogprobsByToken map[string]float32 `json:"logprobs_by_token"`
}

type _TokenLogProbs TokenLogProbs

// NewTokenLogProbs instantiates a new TokenLogProbs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenLogProbs(logprobsByToken map[string]float32) *TokenLogProbs {
	this := TokenLogProbs{}
	this.LogprobsByToken = logprobsByToken
	return &this
}

// NewTokenLogProbsWithDefaults instantiates a new TokenLogProbs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenLogProbsWithDefaults() *TokenLogProbs {
	this := TokenLogProbs{}
	return &this
}

// GetLogprobsByToken returns the LogprobsByToken field value
func (o *TokenLogProbs) GetLogprobsByToken() map[string]float32 {
	if o == nil {
		var ret map[string]float32
		return ret
	}

	return o.LogprobsByToken
}

// GetLogprobsByTokenOk returns a tuple with the LogprobsByToken field value
// and a boolean to check if the value has been set.
func (o *TokenLogProbs) GetLogprobsByTokenOk() (map[string]float32, bool) {
	if o == nil {
		return map[string]float32{}, false
	}
	return o.LogprobsByToken, true
}

// SetLogprobsByToken sets field value
func (o *TokenLogProbs) SetLogprobsByToken(v map[string]float32) {
	o.LogprobsByToken = v
}

func (o TokenLogProbs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenLogProbs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["logprobs_by_token"] = o.LogprobsByToken
	return toSerialize, nil
}

func (o *TokenLogProbs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logprobs_by_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTokenLogProbs := _TokenLogProbs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTokenLogProbs)

	if err != nil {
		return err
	}

	*o = TokenLogProbs(varTokenLogProbs)

	return err
}

type NullableTokenLogProbs struct {
	value *TokenLogProbs
	isSet bool
}

func (v NullableTokenLogProbs) Get() *TokenLogProbs {
	return v.value
}

func (v *NullableTokenLogProbs) Set(val *TokenLogProbs) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenLogProbs) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenLogProbs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenLogProbs(val *TokenLogProbs) *NullableTokenLogProbs {
	return &NullableTokenLogProbs{value: val, isSet: true}
}

func (v NullableTokenLogProbs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenLogProbs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


