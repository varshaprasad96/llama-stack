/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SafetyViolation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SafetyViolation{}

// SafetyViolation struct for SafetyViolation
type SafetyViolation struct {
	ViolationLevel ViolationLevel `json:"violation_level"`
	UserMessage *string `json:"user_message,omitempty"`
	Metadata map[string]AppendRowsRequestRowsInnerValue `json:"metadata"`
}

type _SafetyViolation SafetyViolation

// NewSafetyViolation instantiates a new SafetyViolation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSafetyViolation(violationLevel ViolationLevel, metadata map[string]AppendRowsRequestRowsInnerValue) *SafetyViolation {
	this := SafetyViolation{}
	this.ViolationLevel = violationLevel
	this.Metadata = metadata
	return &this
}

// NewSafetyViolationWithDefaults instantiates a new SafetyViolation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSafetyViolationWithDefaults() *SafetyViolation {
	this := SafetyViolation{}
	return &this
}

// GetViolationLevel returns the ViolationLevel field value
func (o *SafetyViolation) GetViolationLevel() ViolationLevel {
	if o == nil {
		var ret ViolationLevel
		return ret
	}

	return o.ViolationLevel
}

// GetViolationLevelOk returns a tuple with the ViolationLevel field value
// and a boolean to check if the value has been set.
func (o *SafetyViolation) GetViolationLevelOk() (*ViolationLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViolationLevel, true
}

// SetViolationLevel sets field value
func (o *SafetyViolation) SetViolationLevel(v ViolationLevel) {
	o.ViolationLevel = v
}

// GetUserMessage returns the UserMessage field value if set, zero value otherwise.
func (o *SafetyViolation) GetUserMessage() string {
	if o == nil || IsNil(o.UserMessage) {
		var ret string
		return ret
	}
	return *o.UserMessage
}

// GetUserMessageOk returns a tuple with the UserMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SafetyViolation) GetUserMessageOk() (*string, bool) {
	if o == nil || IsNil(o.UserMessage) {
		return nil, false
	}
	return o.UserMessage, true
}

// HasUserMessage returns a boolean if a field has been set.
func (o *SafetyViolation) HasUserMessage() bool {
	if o != nil && !IsNil(o.UserMessage) {
		return true
	}

	return false
}

// SetUserMessage gets a reference to the given string and assigns it to the UserMessage field.
func (o *SafetyViolation) SetUserMessage(v string) {
	o.UserMessage = &v
}

// GetMetadata returns the Metadata field value
func (o *SafetyViolation) GetMetadata() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *SafetyViolation) GetMetadataOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *SafetyViolation) SetMetadata(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Metadata = v
}

func (o SafetyViolation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SafetyViolation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["violation_level"] = o.ViolationLevel
	if !IsNil(o.UserMessage) {
		toSerialize["user_message"] = o.UserMessage
	}
	toSerialize["metadata"] = o.Metadata
	return toSerialize, nil
}

func (o *SafetyViolation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"violation_level",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSafetyViolation := _SafetyViolation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSafetyViolation)

	if err != nil {
		return err
	}

	*o = SafetyViolation(varSafetyViolation)

	return err
}

type NullableSafetyViolation struct {
	value *SafetyViolation
	isSet bool
}

func (v NullableSafetyViolation) Get() *SafetyViolation {
	return v.value
}

func (v *NullableSafetyViolation) Set(val *SafetyViolation) {
	v.value = val
	v.isSet = true
}

func (v NullableSafetyViolation) IsSet() bool {
	return v.isSet
}

func (v *NullableSafetyViolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSafetyViolation(val *SafetyViolation) *NullableSafetyViolation {
	return &NullableSafetyViolation{value: val, isSet: true}
}

func (v NullableSafetyViolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSafetyViolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


