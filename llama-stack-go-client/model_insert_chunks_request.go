/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the InsertChunksRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InsertChunksRequest{}

// InsertChunksRequest struct for InsertChunksRequest
type InsertChunksRequest struct {
	VectorDbId string `json:"vector_db_id"`
	Chunks []Chunk `json:"chunks"`
	TtlSeconds *int32 `json:"ttl_seconds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InsertChunksRequest InsertChunksRequest

// NewInsertChunksRequest instantiates a new InsertChunksRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsertChunksRequest(vectorDbId string, chunks []Chunk) *InsertChunksRequest {
	this := InsertChunksRequest{}
	this.VectorDbId = vectorDbId
	this.Chunks = chunks
	return &this
}

// NewInsertChunksRequestWithDefaults instantiates a new InsertChunksRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsertChunksRequestWithDefaults() *InsertChunksRequest {
	this := InsertChunksRequest{}
	return &this
}

// GetVectorDbId returns the VectorDbId field value
func (o *InsertChunksRequest) GetVectorDbId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VectorDbId
}

// GetVectorDbIdOk returns a tuple with the VectorDbId field value
// and a boolean to check if the value has been set.
func (o *InsertChunksRequest) GetVectorDbIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VectorDbId, true
}

// SetVectorDbId sets field value
func (o *InsertChunksRequest) SetVectorDbId(v string) {
	o.VectorDbId = v
}

// GetChunks returns the Chunks field value
func (o *InsertChunksRequest) GetChunks() []Chunk {
	if o == nil {
		var ret []Chunk
		return ret
	}

	return o.Chunks
}

// GetChunksOk returns a tuple with the Chunks field value
// and a boolean to check if the value has been set.
func (o *InsertChunksRequest) GetChunksOk() ([]Chunk, bool) {
	if o == nil {
		return nil, false
	}
	return o.Chunks, true
}

// SetChunks sets field value
func (o *InsertChunksRequest) SetChunks(v []Chunk) {
	o.Chunks = v
}

// GetTtlSeconds returns the TtlSeconds field value if set, zero value otherwise.
func (o *InsertChunksRequest) GetTtlSeconds() int32 {
	if o == nil || IsNil(o.TtlSeconds) {
		var ret int32
		return ret
	}
	return *o.TtlSeconds
}

// GetTtlSecondsOk returns a tuple with the TtlSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsertChunksRequest) GetTtlSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.TtlSeconds) {
		return nil, false
	}
	return o.TtlSeconds, true
}

// HasTtlSeconds returns a boolean if a field has been set.
func (o *InsertChunksRequest) HasTtlSeconds() bool {
	if o != nil && !IsNil(o.TtlSeconds) {
		return true
	}

	return false
}

// SetTtlSeconds gets a reference to the given int32 and assigns it to the TtlSeconds field.
func (o *InsertChunksRequest) SetTtlSeconds(v int32) {
	o.TtlSeconds = &v
}

func (o InsertChunksRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InsertChunksRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vector_db_id"] = o.VectorDbId
	toSerialize["chunks"] = o.Chunks
	if !IsNil(o.TtlSeconds) {
		toSerialize["ttl_seconds"] = o.TtlSeconds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InsertChunksRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vector_db_id",
		"chunks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInsertChunksRequest := _InsertChunksRequest{}

	err = json.Unmarshal(data, &varInsertChunksRequest)

	if err != nil {
		return err
	}

	*o = InsertChunksRequest(varInsertChunksRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "vector_db_id")
		delete(additionalProperties, "chunks")
		delete(additionalProperties, "ttl_seconds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInsertChunksRequest struct {
	value *InsertChunksRequest
	isSet bool
}

func (v NullableInsertChunksRequest) Get() *InsertChunksRequest {
	return v.value
}

func (v *NullableInsertChunksRequest) Set(val *InsertChunksRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInsertChunksRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInsertChunksRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsertChunksRequest(val *InsertChunksRequest) *NullableInsertChunksRequest {
	return &NullableInsertChunksRequest{value: val, isSet: true}
}

func (v NullableInsertChunksRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsertChunksRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


