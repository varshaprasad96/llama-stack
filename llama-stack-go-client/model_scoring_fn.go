/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScoringFn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScoringFn{}

// ScoringFn struct for ScoringFn
type ScoringFn struct {
	Identifier string `json:"identifier"`
	ProviderResourceId string `json:"provider_resource_id"`
	ProviderId string `json:"provider_id"`
	Type string `json:"type"`
	Description *string `json:"description,omitempty"`
	Metadata map[string]AppendRowsRequestRowsInnerValue `json:"metadata"`
	ReturnType ParamType `json:"return_type"`
	Params *ScoringFnParams `json:"params,omitempty"`
}

type _ScoringFn ScoringFn

// NewScoringFn instantiates a new ScoringFn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScoringFn(identifier string, providerResourceId string, providerId string, type_ string, metadata map[string]AppendRowsRequestRowsInnerValue, returnType ParamType) *ScoringFn {
	this := ScoringFn{}
	this.Identifier = identifier
	this.ProviderResourceId = providerResourceId
	this.ProviderId = providerId
	this.Type = type_
	this.Metadata = metadata
	this.ReturnType = returnType
	return &this
}

// NewScoringFnWithDefaults instantiates a new ScoringFn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoringFnWithDefaults() *ScoringFn {
	this := ScoringFn{}
	var type_ string = "scoring_function"
	this.Type = type_
	return &this
}

// GetIdentifier returns the Identifier field value
func (o *ScoringFn) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *ScoringFn) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *ScoringFn) SetIdentifier(v string) {
	o.Identifier = v
}

// GetProviderResourceId returns the ProviderResourceId field value
func (o *ScoringFn) GetProviderResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderResourceId
}

// GetProviderResourceIdOk returns a tuple with the ProviderResourceId field value
// and a boolean to check if the value has been set.
func (o *ScoringFn) GetProviderResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderResourceId, true
}

// SetProviderResourceId sets field value
func (o *ScoringFn) SetProviderResourceId(v string) {
	o.ProviderResourceId = v
}

// GetProviderId returns the ProviderId field value
func (o *ScoringFn) GetProviderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value
// and a boolean to check if the value has been set.
func (o *ScoringFn) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderId, true
}

// SetProviderId sets field value
func (o *ScoringFn) SetProviderId(v string) {
	o.ProviderId = v
}

// GetType returns the Type field value
func (o *ScoringFn) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ScoringFn) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ScoringFn) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ScoringFn) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringFn) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ScoringFn) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ScoringFn) SetDescription(v string) {
	o.Description = &v
}

// GetMetadata returns the Metadata field value
func (o *ScoringFn) GetMetadata() map[string]AppendRowsRequestRowsInnerValue {
	if o == nil {
		var ret map[string]AppendRowsRequestRowsInnerValue
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ScoringFn) GetMetadataOk() (map[string]AppendRowsRequestRowsInnerValue, bool) {
	if o == nil {
		return map[string]AppendRowsRequestRowsInnerValue{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *ScoringFn) SetMetadata(v map[string]AppendRowsRequestRowsInnerValue) {
	o.Metadata = v
}

// GetReturnType returns the ReturnType field value
func (o *ScoringFn) GetReturnType() ParamType {
	if o == nil {
		var ret ParamType
		return ret
	}

	return o.ReturnType
}

// GetReturnTypeOk returns a tuple with the ReturnType field value
// and a boolean to check if the value has been set.
func (o *ScoringFn) GetReturnTypeOk() (*ParamType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReturnType, true
}

// SetReturnType sets field value
func (o *ScoringFn) SetReturnType(v ParamType) {
	o.ReturnType = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ScoringFn) GetParams() ScoringFnParams {
	if o == nil || IsNil(o.Params) {
		var ret ScoringFnParams
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScoringFn) GetParamsOk() (*ScoringFnParams, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ScoringFn) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given ScoringFnParams and assigns it to the Params field.
func (o *ScoringFn) SetParams(v ScoringFnParams) {
	o.Params = &v
}

func (o ScoringFn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScoringFn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identifier"] = o.Identifier
	toSerialize["provider_resource_id"] = o.ProviderResourceId
	toSerialize["provider_id"] = o.ProviderId
	toSerialize["type"] = o.Type
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["metadata"] = o.Metadata
	toSerialize["return_type"] = o.ReturnType
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return toSerialize, nil
}

func (o *ScoringFn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identifier",
		"provider_resource_id",
		"provider_id",
		"type",
		"metadata",
		"return_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScoringFn := _ScoringFn{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScoringFn)

	if err != nil {
		return err
	}

	*o = ScoringFn(varScoringFn)

	return err
}

type NullableScoringFn struct {
	value *ScoringFn
	isSet bool
}

func (v NullableScoringFn) Get() *ScoringFn {
	return v.value
}

func (v *NullableScoringFn) Set(val *ScoringFn) {
	v.value = val
	v.isSet = true
}

func (v NullableScoringFn) IsSet() bool {
	return v.isSet
}

func (v *NullableScoringFn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScoringFn(val *ScoringFn) *NullableScoringFn {
	return &NullableScoringFn{value: val, isSet: true}
}

func (v NullableScoringFn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScoringFn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


