/*
Llama Stack Specification

This is the specification of the Llama Stack that provides                 a set of endpoints and their corresponding interfaces that are tailored to                 best leverage Llama Models.

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SamplingParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SamplingParams{}

// SamplingParams Sampling parameters.
type SamplingParams struct {
	// The sampling strategy.
	Strategy SamplingStrategy `json:"strategy"`
	// The maximum number of tokens that can be generated in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length.
	MaxTokens *int32 `json:"max_tokens,omitempty"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	RepetitionPenalty *float32 `json:"repetition_penalty,omitempty"`
	// Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
	Stop []string `json:"stop,omitempty"`
}

type _SamplingParams SamplingParams

// NewSamplingParams instantiates a new SamplingParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSamplingParams(strategy SamplingStrategy) *SamplingParams {
	this := SamplingParams{}
	this.Strategy = strategy
	var maxTokens int32 = 0
	this.MaxTokens = &maxTokens
	var repetitionPenalty float32 = 1.0
	this.RepetitionPenalty = &repetitionPenalty
	return &this
}

// NewSamplingParamsWithDefaults instantiates a new SamplingParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSamplingParamsWithDefaults() *SamplingParams {
	this := SamplingParams{}
	var maxTokens int32 = 0
	this.MaxTokens = &maxTokens
	var repetitionPenalty float32 = 1.0
	this.RepetitionPenalty = &repetitionPenalty
	return &this
}

// GetStrategy returns the Strategy field value
func (o *SamplingParams) GetStrategy() SamplingStrategy {
	if o == nil {
		var ret SamplingStrategy
		return ret
	}

	return o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value
// and a boolean to check if the value has been set.
func (o *SamplingParams) GetStrategyOk() (*SamplingStrategy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Strategy, true
}

// SetStrategy sets field value
func (o *SamplingParams) SetStrategy(v SamplingStrategy) {
	o.Strategy = v
}

// GetMaxTokens returns the MaxTokens field value if set, zero value otherwise.
func (o *SamplingParams) GetMaxTokens() int32 {
	if o == nil || IsNil(o.MaxTokens) {
		var ret int32
		return ret
	}
	return *o.MaxTokens
}

// GetMaxTokensOk returns a tuple with the MaxTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamplingParams) GetMaxTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxTokens) {
		return nil, false
	}
	return o.MaxTokens, true
}

// HasMaxTokens returns a boolean if a field has been set.
func (o *SamplingParams) HasMaxTokens() bool {
	if o != nil && !IsNil(o.MaxTokens) {
		return true
	}

	return false
}

// SetMaxTokens gets a reference to the given int32 and assigns it to the MaxTokens field.
func (o *SamplingParams) SetMaxTokens(v int32) {
	o.MaxTokens = &v
}

// GetRepetitionPenalty returns the RepetitionPenalty field value if set, zero value otherwise.
func (o *SamplingParams) GetRepetitionPenalty() float32 {
	if o == nil || IsNil(o.RepetitionPenalty) {
		var ret float32
		return ret
	}
	return *o.RepetitionPenalty
}

// GetRepetitionPenaltyOk returns a tuple with the RepetitionPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamplingParams) GetRepetitionPenaltyOk() (*float32, bool) {
	if o == nil || IsNil(o.RepetitionPenalty) {
		return nil, false
	}
	return o.RepetitionPenalty, true
}

// HasRepetitionPenalty returns a boolean if a field has been set.
func (o *SamplingParams) HasRepetitionPenalty() bool {
	if o != nil && !IsNil(o.RepetitionPenalty) {
		return true
	}

	return false
}

// SetRepetitionPenalty gets a reference to the given float32 and assigns it to the RepetitionPenalty field.
func (o *SamplingParams) SetRepetitionPenalty(v float32) {
	o.RepetitionPenalty = &v
}

// GetStop returns the Stop field value if set, zero value otherwise.
func (o *SamplingParams) GetStop() []string {
	if o == nil || IsNil(o.Stop) {
		var ret []string
		return ret
	}
	return o.Stop
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SamplingParams) GetStopOk() ([]string, bool) {
	if o == nil || IsNil(o.Stop) {
		return nil, false
	}
	return o.Stop, true
}

// HasStop returns a boolean if a field has been set.
func (o *SamplingParams) HasStop() bool {
	if o != nil && !IsNil(o.Stop) {
		return true
	}

	return false
}

// SetStop gets a reference to the given []string and assigns it to the Stop field.
func (o *SamplingParams) SetStop(v []string) {
	o.Stop = v
}

func (o SamplingParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SamplingParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["strategy"] = o.Strategy
	if !IsNil(o.MaxTokens) {
		toSerialize["max_tokens"] = o.MaxTokens
	}
	if !IsNil(o.RepetitionPenalty) {
		toSerialize["repetition_penalty"] = o.RepetitionPenalty
	}
	if !IsNil(o.Stop) {
		toSerialize["stop"] = o.Stop
	}
	return toSerialize, nil
}

func (o *SamplingParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"strategy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSamplingParams := _SamplingParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSamplingParams)

	if err != nil {
		return err
	}

	*o = SamplingParams(varSamplingParams)

	return err
}

type NullableSamplingParams struct {
	value *SamplingParams
	isSet bool
}

func (v NullableSamplingParams) Get() *SamplingParams {
	return v.value
}

func (v *NullableSamplingParams) Set(val *SamplingParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSamplingParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSamplingParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSamplingParams(val *SamplingParams) *NullableSamplingParams {
	return &NullableSamplingParams{value: val, isSet: true}
}

func (v NullableSamplingParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSamplingParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


