/*
Llama Stack Specification

Testing FilesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_FilesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FilesAPIService V1FilesBucketGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string

		resp, httpRes, err := apiClient.FilesAPI.V1FilesBucketGet(context.Background(), bucket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesAPIService V1FilesBucketKeyDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string
		var key string

		httpRes, err := apiClient.FilesAPI.V1FilesBucketKeyDelete(context.Background(), bucket, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesAPIService V1FilesBucketKeyGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucket string
		var key string

		resp, httpRes, err := apiClient.FilesAPI.V1FilesBucketKeyGet(context.Background(), bucket, key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesAPIService V1FilesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FilesAPI.V1FilesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesAPIService V1FilesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FilesAPI.V1FilesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesAPIService V1FilesSessionUploadIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadId string

		resp, httpRes, err := apiClient.FilesAPI.V1FilesSessionUploadIdGet(context.Background(), uploadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FilesAPIService V1FilesSessionUploadIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uploadId string

		resp, httpRes, err := apiClient.FilesAPI.V1FilesSessionUploadIdPost(context.Background(), uploadId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
