/*
Llama Stack Specification

Testing ToolGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ToolGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ToolGroupsAPIService V1ToolgroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ToolGroupsAPI.V1ToolgroupsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolGroupsAPIService V1ToolgroupsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ToolGroupsAPI.V1ToolgroupsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolGroupsAPIService V1ToolgroupsToolgroupIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolgroupId string

		httpRes, err := apiClient.ToolGroupsAPI.V1ToolgroupsToolgroupIdDelete(context.Background(), toolgroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolGroupsAPIService V1ToolgroupsToolgroupIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolgroupId string

		resp, httpRes, err := apiClient.ToolGroupsAPI.V1ToolgroupsToolgroupIdGet(context.Background(), toolgroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolGroupsAPIService V1ToolsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ToolGroupsAPI.V1ToolsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ToolGroupsAPIService V1ToolsToolNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var toolName string

		resp, httpRes, err := apiClient.ToolGroupsAPI.V1ToolsToolNameGet(context.Background(), toolName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
