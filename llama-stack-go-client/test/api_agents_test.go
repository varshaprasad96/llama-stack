/*
Llama Stack Specification

Testing AgentsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AgentsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AgentsAPIService V1AgentsAgentIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var agentId string

		httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdDelete(context.Background(), agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsAgentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var agentId string

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdGet(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsAgentIdSessionPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var agentId string

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdSessionPost(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsAgentIdSessionSessionIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string
		var agentId string

		httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdSessionSessionIdDelete(context.Background(), sessionId, agentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsAgentIdSessionSessionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sessionId string
		var agentId string

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdSessionSessionIdGet(context.Background(), sessionId, agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsAgentIdSessionSessionIdTurnPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var agentId string
		var sessionId string

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdSessionSessionIdTurnPost(context.Background(), agentId, sessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsAgentIdSessionSessionIdTurnTurnIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var agentId string
		var sessionId string
		var turnId string

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdSessionSessionIdTurnTurnIdGet(context.Background(), agentId, sessionId, turnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsAgentIdSessionSessionIdTurnTurnIdResumePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var agentId string
		var sessionId string
		var turnId string

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdSessionSessionIdTurnTurnIdResumePost(context.Background(), agentId, sessionId, turnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsAgentIdSessionSessionIdTurnTurnIdStepStepIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var agentId string
		var sessionId string
		var turnId string
		var stepId string

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdSessionSessionIdTurnTurnIdStepStepIdGet(context.Background(), agentId, sessionId, turnId, stepId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsAgentIdSessionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var agentId string

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsAgentIdSessionsGet(context.Background(), agentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AgentsAPIService V1AgentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AgentsAPI.V1AgentsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
